
SWD_PROTO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d158  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800d268  0800d268  0000e268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d328  0800d328  0000f188  2**0
                  CONTENTS
  4 .ARM          00000000  0800d328  0800d328  0000f188  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d328  0800d328  0000f188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d328  0800d328  0000e328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d32c  0800d32c  0000e32c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000188  20000000  0800d330  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002390  20000188  0800d4b8  0000f188  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002518  0800d4b8  0000f518  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f188  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d3ab  00000000  00000000  0000f1b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d69  00000000  00000000  0002c55c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ae8  00000000  00000000  000312c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014b7  00000000  00000000  00032db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cfba  00000000  00000000  00034267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020a64  00000000  00000000  00051221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d398  00000000  00000000  00071c85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010f01d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fcc  00000000  00000000  0010f060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0011602c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000188 	.word	0x20000188
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d250 	.word	0x0800d250

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000018c 	.word	0x2000018c
 800014c:	0800d250 	.word	0x0800d250

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	@ 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	200001a4 	.word	0x200001a4
 800017c:	200001f8 	.word	0x200001f8

08000180 <xTaskI2CHandle>:
* @brief Function implementing the xTask_ADC thread.
* @param argument: Not used
* @retval None
*/
void xTaskI2CHandle(void const * argument)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b08a      	sub	sp, #40	@ 0x28
 8000184:	af02      	add	r7, sp, #8
 8000186:	6078      	str	r0, [r7, #4]
	const TickType_t xTaskPeriod_ms = 10;  // 100 ms for 10Hz
 8000188:	230a      	movs	r3, #10
 800018a:	61fb      	str	r3, [r7, #28]
    uint8_t soft_reset_cmd = 0xBA;
 800018c:	23ba      	movs	r3, #186	@ 0xba
 800018e:	76fb      	strb	r3, [r7, #27]
    uint8_t init_cmd[3] = {0xE1, 0x08, 0x00};  // Calibration command for AHT10
 8000190:	4a36      	ldr	r2, [pc, #216]	@ (800026c <xTaskI2CHandle+0xec>)
 8000192:	f107 0318 	add.w	r3, r7, #24
 8000196:	6812      	ldr	r2, [r2, #0]
 8000198:	4611      	mov	r1, r2
 800019a:	8019      	strh	r1, [r3, #0]
 800019c:	3302      	adds	r3, #2
 800019e:	0c12      	lsrs	r2, r2, #16
 80001a0:	701a      	strb	r2, [r3, #0]

    HAL_I2C_Master_Transmit(&hi2c1, AHT10_ADDRESS, &soft_reset_cmd, 1, HAL_MAX_DELAY);
 80001a2:	f107 021b 	add.w	r2, r7, #27
 80001a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80001aa:	9300      	str	r3, [sp, #0]
 80001ac:	2301      	movs	r3, #1
 80001ae:	2170      	movs	r1, #112	@ 0x70
 80001b0:	482f      	ldr	r0, [pc, #188]	@ (8000270 <xTaskI2CHandle+0xf0>)
 80001b2:	f001 fe9b 	bl	8001eec <HAL_I2C_Master_Transmit>
	osDelay(xTaskPeriod_ms);
 80001b6:	69f8      	ldr	r0, [r7, #28]
 80001b8:	f009 ff0b 	bl	8009fd2 <osDelay>

    HAL_I2C_Master_Transmit(&hi2c1, AHT10_ADDRESS, init_cmd, 3, HAL_MAX_DELAY);
 80001bc:	f107 0218 	add.w	r2, r7, #24
 80001c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80001c4:	9300      	str	r3, [sp, #0]
 80001c6:	2303      	movs	r3, #3
 80001c8:	2170      	movs	r1, #112	@ 0x70
 80001ca:	4829      	ldr	r0, [pc, #164]	@ (8000270 <xTaskI2CHandle+0xf0>)
 80001cc:	f001 fe8e 	bl	8001eec <HAL_I2C_Master_Transmit>
	osDelay(xTaskPeriod_ms);
 80001d0:	69f8      	ldr	r0, [r7, #28]
 80001d2:	f009 fefe 	bl	8009fd2 <osDelay>

	uint8_t trigger_measurement_cmd[3] = {0xAC, 0x33, 0x00};
 80001d6:	4a27      	ldr	r2, [pc, #156]	@ (8000274 <xTaskI2CHandle+0xf4>)
 80001d8:	f107 0314 	add.w	r3, r7, #20
 80001dc:	6812      	ldr	r2, [r2, #0]
 80001de:	4611      	mov	r1, r2
 80001e0:	8019      	strh	r1, [r3, #0]
 80001e2:	3302      	adds	r3, #2
 80001e4:	0c12      	lsrs	r2, r2, #16
 80001e6:	701a      	strb	r2, [r3, #0]
	uint8_t data[7];
	data[0] = USB_DATA_ID_I2C;
 80001e8:	2399      	movs	r3, #153	@ 0x99
 80001ea:	733b      	strb	r3, [r7, #12]

	float humidity;
	float temperature;

	for (;;) {
		if (xTaskI2C_flag) {
 80001ec:	4b22      	ldr	r3, [pc, #136]	@ (8000278 <xTaskI2CHandle+0xf8>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	b2db      	uxtb	r3, r3
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d0fa      	beq.n	80001ec <xTaskI2CHandle+0x6c>
			HAL_I2C_Master_Transmit(&hi2c1, AHT10_ADDRESS, trigger_measurement_cmd, 3, HAL_MAX_DELAY);
 80001f6:	f107 0214 	add.w	r2, r7, #20
 80001fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80001fe:	9300      	str	r3, [sp, #0]
 8000200:	2303      	movs	r3, #3
 8000202:	2170      	movs	r1, #112	@ 0x70
 8000204:	481a      	ldr	r0, [pc, #104]	@ (8000270 <xTaskI2CHandle+0xf0>)
 8000206:	f001 fe71 	bl	8001eec <HAL_I2C_Master_Transmit>
			osDelay(xTaskPeriod_ms);
 800020a:	69f8      	ldr	r0, [r7, #28]
 800020c:	f009 fee1 	bl	8009fd2 <osDelay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000210:	2201      	movs	r2, #1
 8000212:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000216:	4819      	ldr	r0, [pc, #100]	@ (800027c <xTaskI2CHandle+0xfc>)
 8000218:	f001 fd0c 	bl	8001c34 <HAL_GPIO_WritePin>
			// Read 6 bytes of data from the AHT10
			if (HAL_I2C_Master_Receive(&hi2c1, AHT10_ADDRESS, data+1, 6, HAL_MAX_DELAY) == HAL_OK) {
 800021c:	f107 020c 	add.w	r2, r7, #12
 8000220:	3201      	adds	r2, #1
 8000222:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000226:	9300      	str	r3, [sp, #0]
 8000228:	2306      	movs	r3, #6
 800022a:	2170      	movs	r1, #112	@ 0x70
 800022c:	4810      	ldr	r0, [pc, #64]	@ (8000270 <xTaskI2CHandle+0xf0>)
 800022e:	f001 ff5b 	bl	80020e8 <HAL_I2C_Master_Receive>

			}

			// Check if the sensor is busy
			if ((data[1] & 0x80) == 0) {
 8000232:	7b7b      	ldrb	r3, [r7, #13]
 8000234:	b25b      	sxtb	r3, r3
 8000236:	2b00      	cmp	r3, #0
 8000238:	db10      	blt.n	800025c <xTaskI2CHandle+0xdc>
				osMutexWait(usb_mutexHandle, 10);
 800023a:	4b11      	ldr	r3, [pc, #68]	@ (8000280 <xTaskI2CHandle+0x100>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	210a      	movs	r1, #10
 8000240:	4618      	mov	r0, r3
 8000242:	f009 fef3 	bl	800a02c <osMutexWait>
				CDC_Transmit_FS(data, 7);  // Transmit 7 bytes (buffer contains I2C ID + data)
 8000246:	f107 030c 	add.w	r3, r7, #12
 800024a:	2107      	movs	r1, #7
 800024c:	4618      	mov	r0, r3
 800024e:	f00c fbe7 	bl	800ca20 <CDC_Transmit_FS>
				osMutexRelease(usb_mutexHandle);
 8000252:	4b0b      	ldr	r3, [pc, #44]	@ (8000280 <xTaskI2CHandle+0x100>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4618      	mov	r0, r3
 8000258:	f009 ff36 	bl	800a0c8 <osMutexRelease>
			}
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800025c:	2200      	movs	r2, #0
 800025e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000262:	4806      	ldr	r0, [pc, #24]	@ (800027c <xTaskI2CHandle+0xfc>)
 8000264:	f001 fce6 	bl	8001c34 <HAL_GPIO_WritePin>
		if (xTaskI2C_flag) {
 8000268:	e7c0      	b.n	80001ec <xTaskI2CHandle+0x6c>
 800026a:	bf00      	nop
 800026c:	0800d268 	.word	0x0800d268
 8000270:	2000046c 	.word	0x2000046c
 8000274:	0800d26c 	.word	0x0800d26c
 8000278:	20000000 	.word	0x20000000
 800027c:	40011000 	.word	0x40011000
 8000280:	2000059c 	.word	0x2000059c

08000284 <main>:
	}
}


int main(void)
{
 8000284:	b5b0      	push	{r4, r5, r7, lr}
 8000286:	b08a      	sub	sp, #40	@ 0x28
 8000288:	af00      	add	r7, sp, #0
/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800028a:	f000 fdc3 	bl	8000e14 <HAL_Init>
	SystemClock_Config();
 800028e:	f000 f83d 	bl	800030c <SystemClock_Config>
	MX_DMA_Init();
 8000292:	f000 fa6d 	bl	8000770 <MX_DMA_Init>

	MX_GPIO_Init();
 8000296:	f000 fa89 	bl	80007ac <MX_GPIO_Init>
	MX_I2C1_Init();
 800029a:	f000 f8f1 	bl	8000480 <MX_I2C1_Init>
	MX_ADC1_Init();
 800029e:	f000 f893 	bl	80003c8 <MX_ADC1_Init>

	HAL_ADCEx_Calibration_Start(&hadc1);
 80002a2:	4816      	ldr	r0, [pc, #88]	@ (80002fc <main+0x78>)
 80002a4:	f001 f854 	bl	8001350 <HAL_ADCEx_Calibration_Start>

	MX_TIM1_Init();
 80002a8:	f000 f918 	bl	80004dc <MX_TIM1_Init>
	MX_TIM3_Init();
 80002ac:	f000 fa06 	bl	80006bc <MX_TIM3_Init>
	MX_TIM2_Init();
 80002b0:	f000 f9b6 	bl	8000620 <MX_TIM2_Init>
	MX_USB_DEVICE_Init();
 80002b4:	f00c f9ba 	bl	800c62c <MX_USB_DEVICE_Init>

//	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)dma_normal_adc_buffer, 3);


	/* definition and creation of usb_mutex */
	osMutexDef(usb_mutex);
 80002b8:	2300      	movs	r3, #0
 80002ba:	623b      	str	r3, [r7, #32]
 80002bc:	2300      	movs	r3, #0
 80002be:	627b      	str	r3, [r7, #36]	@ 0x24
	usb_mutexHandle = osMutexCreate(osMutex(usb_mutex));
 80002c0:	f107 0320 	add.w	r3, r7, #32
 80002c4:	4618      	mov	r0, r3
 80002c6:	f009 fe98 	bl	8009ffa <osMutexCreate>
 80002ca:	4603      	mov	r3, r0
 80002cc:	4a0c      	ldr	r2, [pc, #48]	@ (8000300 <main+0x7c>)
 80002ce:	6013      	str	r3, [r2, #0]

	/* Create the thread(s) */
	/* definition and creation of xTask_I2C */
	osThreadDef(xTaskI2C, xTaskI2CHandle, osPriorityNormal, 1, 128);
 80002d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000304 <main+0x80>)
 80002d2:	1d3c      	adds	r4, r7, #4
 80002d4:	461d      	mov	r5, r3
 80002d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	xTask_ADCHandle = osThreadCreate(osThread(xTaskI2C), NULL);
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	2100      	movs	r1, #0
 80002e6:	4618      	mov	r0, r3
 80002e8:	f009 fe27 	bl	8009f3a <osThreadCreate>
 80002ec:	4603      	mov	r3, r0
 80002ee:	4a06      	ldr	r2, [pc, #24]	@ (8000308 <main+0x84>)
 80002f0:	6013      	str	r3, [r2, #0]

	/* definition and creation of xTask_ADC */
//	osThreadDef(xTask_ADC, xTaskADCHandle, osPriorityNormal, 2, 128);
//	xTask_ADCHandle = osThreadCreate(osThread(xTask_ADC), NULL);

	osKernelStart();
 80002f2:	f009 fe1b 	bl	8009f2c <osKernelStart>

	while (1)
 80002f6:	bf00      	nop
 80002f8:	e7fd      	b.n	80002f6 <main+0x72>
 80002fa:	bf00      	nop
 80002fc:	200003f8 	.word	0x200003f8
 8000300:	2000059c 	.word	0x2000059c
 8000304:	0800d27c 	.word	0x0800d27c
 8000308:	20000598 	.word	0x20000598

0800030c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b094      	sub	sp, #80	@ 0x50
 8000310:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000312:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000316:	2228      	movs	r2, #40	@ 0x28
 8000318:	2100      	movs	r1, #0
 800031a:	4618      	mov	r0, r3
 800031c:	f00c ff5e 	bl	800d1dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000320:	f107 0314 	add.w	r3, r7, #20
 8000324:	2200      	movs	r2, #0
 8000326:	601a      	str	r2, [r3, #0]
 8000328:	605a      	str	r2, [r3, #4]
 800032a:	609a      	str	r2, [r3, #8]
 800032c:	60da      	str	r2, [r3, #12]
 800032e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000330:	1d3b      	adds	r3, r7, #4
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	605a      	str	r2, [r3, #4]
 8000338:	609a      	str	r2, [r3, #8]
 800033a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800033c:	2301      	movs	r3, #1
 800033e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000340:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000344:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000346:	2300      	movs	r3, #0
 8000348:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800034a:	2301      	movs	r3, #1
 800034c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800034e:	2302      	movs	r3, #2
 8000350:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000352:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000356:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000358:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800035c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800035e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000362:	4618      	mov	r0, r3
 8000364:	f004 fa1e 	bl	80047a4 <HAL_RCC_OscConfig>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800036e:	f000 faab 	bl	80008c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000372:	230f      	movs	r3, #15
 8000374:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000376:	2302      	movs	r3, #2
 8000378:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800037a:	2300      	movs	r3, #0
 800037c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800037e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000382:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000384:	2300      	movs	r3, #0
 8000386:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000388:	f107 0314 	add.w	r3, r7, #20
 800038c:	2101      	movs	r1, #1
 800038e:	4618      	mov	r0, r3
 8000390:	f004 fc8a 	bl	8004ca8 <HAL_RCC_ClockConfig>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800039a:	f000 fa95 	bl	80008c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800039e:	2312      	movs	r3, #18
 80003a0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80003a2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80003a6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80003a8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80003ac:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	4618      	mov	r0, r3
 80003b2:	f004 fe37 	bl	8005024 <HAL_RCCEx_PeriphCLKConfig>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80003bc:	f000 fa84 	bl	80008c8 <Error_Handler>
  }
}
 80003c0:	bf00      	nop
 80003c2:	3750      	adds	r7, #80	@ 0x50
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}

080003c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b084      	sub	sp, #16
 80003cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	2200      	movs	r2, #0
 80003d2:	601a      	str	r2, [r3, #0]
 80003d4:	605a      	str	r2, [r3, #4]
 80003d6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003d8:	4b27      	ldr	r3, [pc, #156]	@ (8000478 <MX_ADC1_Init+0xb0>)
 80003da:	4a28      	ldr	r2, [pc, #160]	@ (800047c <MX_ADC1_Init+0xb4>)
 80003dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80003de:	4b26      	ldr	r3, [pc, #152]	@ (8000478 <MX_ADC1_Init+0xb0>)
 80003e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80003e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003e6:	4b24      	ldr	r3, [pc, #144]	@ (8000478 <MX_ADC1_Init+0xb0>)
 80003e8:	2201      	movs	r2, #1
 80003ea:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003ec:	4b22      	ldr	r3, [pc, #136]	@ (8000478 <MX_ADC1_Init+0xb0>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003f2:	4b21      	ldr	r3, [pc, #132]	@ (8000478 <MX_ADC1_Init+0xb0>)
 80003f4:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80003f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000478 <MX_ADC1_Init+0xb0>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000400:	4b1d      	ldr	r3, [pc, #116]	@ (8000478 <MX_ADC1_Init+0xb0>)
 8000402:	2203      	movs	r2, #3
 8000404:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000406:	481c      	ldr	r0, [pc, #112]	@ (8000478 <MX_ADC1_Init+0xb0>)
 8000408:	f000 fd36 	bl	8000e78 <HAL_ADC_Init>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000412:	f000 fa59 	bl	80008c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000416:	2303      	movs	r3, #3
 8000418:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800041a:	2301      	movs	r3, #1
 800041c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800041e:	2300      	movs	r3, #0
 8000420:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	4619      	mov	r1, r3
 8000426:	4814      	ldr	r0, [pc, #80]	@ (8000478 <MX_ADC1_Init+0xb0>)
 8000428:	f000 fdfe 	bl	8001028 <HAL_ADC_ConfigChannel>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000432:	f000 fa49 	bl	80008c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000436:	2304      	movs	r3, #4
 8000438:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800043a:	2302      	movs	r3, #2
 800043c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	4619      	mov	r1, r3
 8000442:	480d      	ldr	r0, [pc, #52]	@ (8000478 <MX_ADC1_Init+0xb0>)
 8000444:	f000 fdf0 	bl	8001028 <HAL_ADC_ConfigChannel>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800044e:	f000 fa3b 	bl	80008c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000452:	2305      	movs	r3, #5
 8000454:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000456:	2303      	movs	r3, #3
 8000458:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800045a:	1d3b      	adds	r3, r7, #4
 800045c:	4619      	mov	r1, r3
 800045e:	4806      	ldr	r0, [pc, #24]	@ (8000478 <MX_ADC1_Init+0xb0>)
 8000460:	f000 fde2 	bl	8001028 <HAL_ADC_ConfigChannel>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800046a:	f000 fa2d 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800046e:	bf00      	nop
 8000470:	3710      	adds	r7, #16
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	200003f8 	.word	0x200003f8
 800047c:	40012400 	.word	0x40012400

08000480 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000484:	4b12      	ldr	r3, [pc, #72]	@ (80004d0 <MX_I2C1_Init+0x50>)
 8000486:	4a13      	ldr	r2, [pc, #76]	@ (80004d4 <MX_I2C1_Init+0x54>)
 8000488:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800048a:	4b11      	ldr	r3, [pc, #68]	@ (80004d0 <MX_I2C1_Init+0x50>)
 800048c:	4a12      	ldr	r2, [pc, #72]	@ (80004d8 <MX_I2C1_Init+0x58>)
 800048e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000490:	4b0f      	ldr	r3, [pc, #60]	@ (80004d0 <MX_I2C1_Init+0x50>)
 8000492:	2200      	movs	r2, #0
 8000494:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000496:	4b0e      	ldr	r3, [pc, #56]	@ (80004d0 <MX_I2C1_Init+0x50>)
 8000498:	2200      	movs	r2, #0
 800049a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800049c:	4b0c      	ldr	r3, [pc, #48]	@ (80004d0 <MX_I2C1_Init+0x50>)
 800049e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80004a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004a4:	4b0a      	ldr	r3, [pc, #40]	@ (80004d0 <MX_I2C1_Init+0x50>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80004aa:	4b09      	ldr	r3, [pc, #36]	@ (80004d0 <MX_I2C1_Init+0x50>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004b0:	4b07      	ldr	r3, [pc, #28]	@ (80004d0 <MX_I2C1_Init+0x50>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004b6:	4b06      	ldr	r3, [pc, #24]	@ (80004d0 <MX_I2C1_Init+0x50>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004bc:	4804      	ldr	r0, [pc, #16]	@ (80004d0 <MX_I2C1_Init+0x50>)
 80004be:	f001 fbd1 	bl	8001c64 <HAL_I2C_Init>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80004c8:	f000 f9fe 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004cc:	bf00      	nop
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	2000046c 	.word	0x2000046c
 80004d4:	40005400 	.word	0x40005400
 80004d8:	000186a0 	.word	0x000186a0

080004dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b096      	sub	sp, #88	@ 0x58
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004e2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004f0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]
 800050a:	615a      	str	r2, [r3, #20]
 800050c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	2220      	movs	r2, #32
 8000512:	2100      	movs	r1, #0
 8000514:	4618      	mov	r0, r3
 8000516:	f00c fe61 	bl	800d1dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800051a:	4b3f      	ldr	r3, [pc, #252]	@ (8000618 <MX_TIM1_Init+0x13c>)
 800051c:	4a3f      	ldr	r2, [pc, #252]	@ (800061c <MX_TIM1_Init+0x140>)
 800051e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 65535;
 8000520:	4b3d      	ldr	r3, [pc, #244]	@ (8000618 <MX_TIM1_Init+0x13c>)
 8000522:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000526:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000528:	4b3b      	ldr	r3, [pc, #236]	@ (8000618 <MX_TIM1_Init+0x13c>)
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800052e:	4b3a      	ldr	r3, [pc, #232]	@ (8000618 <MX_TIM1_Init+0x13c>)
 8000530:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000534:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000536:	4b38      	ldr	r3, [pc, #224]	@ (8000618 <MX_TIM1_Init+0x13c>)
 8000538:	2200      	movs	r2, #0
 800053a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800053c:	4b36      	ldr	r3, [pc, #216]	@ (8000618 <MX_TIM1_Init+0x13c>)
 800053e:	2200      	movs	r2, #0
 8000540:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000542:	4b35      	ldr	r3, [pc, #212]	@ (8000618 <MX_TIM1_Init+0x13c>)
 8000544:	2200      	movs	r2, #0
 8000546:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000548:	4833      	ldr	r0, [pc, #204]	@ (8000618 <MX_TIM1_Init+0x13c>)
 800054a:	f004 fed7 	bl	80052fc <HAL_TIM_Base_Init>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000554:	f000 f9b8 	bl	80008c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000558:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800055c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800055e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000562:	4619      	mov	r1, r3
 8000564:	482c      	ldr	r0, [pc, #176]	@ (8000618 <MX_TIM1_Init+0x13c>)
 8000566:	f005 f985 	bl	8005874 <HAL_TIM_ConfigClockSource>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000570:	f000 f9aa 	bl	80008c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000574:	4828      	ldr	r0, [pc, #160]	@ (8000618 <MX_TIM1_Init+0x13c>)
 8000576:	f004 ff63 	bl	8005440 <HAL_TIM_PWM_Init>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000580:	f000 f9a2 	bl	80008c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000584:	2300      	movs	r3, #0
 8000586:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000588:	2300      	movs	r3, #0
 800058a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800058c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000590:	4619      	mov	r1, r3
 8000592:	4821      	ldr	r0, [pc, #132]	@ (8000618 <MX_TIM1_Init+0x13c>)
 8000594:	f005 fcda 	bl	8005f4c <HAL_TIMEx_MasterConfigSynchronization>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800059e:	f000 f993 	bl	80008c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005a2:	2360      	movs	r3, #96	@ 0x60
 80005a4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005aa:	2300      	movs	r3, #0
 80005ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80005ae:	2300      	movs	r3, #0
 80005b0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005b2:	2300      	movs	r3, #0
 80005b4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80005b6:	2300      	movs	r3, #0
 80005b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80005ba:	2300      	movs	r3, #0
 80005bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005c2:	2200      	movs	r2, #0
 80005c4:	4619      	mov	r1, r3
 80005c6:	4814      	ldr	r0, [pc, #80]	@ (8000618 <MX_TIM1_Init+0x13c>)
 80005c8:	f005 f892 	bl	80056f0 <HAL_TIM_PWM_ConfigChannel>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80005d2:	f000 f979 	bl	80008c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005d6:	2300      	movs	r3, #0
 80005d8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005ee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005f0:	2300      	movs	r3, #0
 80005f2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	4619      	mov	r1, r3
 80005f8:	4807      	ldr	r0, [pc, #28]	@ (8000618 <MX_TIM1_Init+0x13c>)
 80005fa:	f005 fd05 	bl	8006008 <HAL_TIMEx_ConfigBreakDeadTime>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000604:	f000 f960 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000608:	4803      	ldr	r0, [pc, #12]	@ (8000618 <MX_TIM1_Init+0x13c>)
 800060a:	f000 fac1 	bl	8000b90 <HAL_TIM_MspPostInit>

}
 800060e:	bf00      	nop
 8000610:	3758      	adds	r7, #88	@ 0x58
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	200004c0 	.word	0x200004c0
 800061c:	40012c00 	.word	0x40012c00

08000620 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000626:	f107 0308 	add.w	r3, r7, #8
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000634:	463b      	mov	r3, r7
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800063c:	4b1e      	ldr	r3, [pc, #120]	@ (80006b8 <MX_TIM2_Init+0x98>)
 800063e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000642:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8000644:	4b1c      	ldr	r3, [pc, #112]	@ (80006b8 <MX_TIM2_Init+0x98>)
 8000646:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800064a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800064c:	4b1a      	ldr	r3, [pc, #104]	@ (80006b8 <MX_TIM2_Init+0x98>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000652:	4b19      	ldr	r3, [pc, #100]	@ (80006b8 <MX_TIM2_Init+0x98>)
 8000654:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000658:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800065a:	4b17      	ldr	r3, [pc, #92]	@ (80006b8 <MX_TIM2_Init+0x98>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000660:	4b15      	ldr	r3, [pc, #84]	@ (80006b8 <MX_TIM2_Init+0x98>)
 8000662:	2200      	movs	r2, #0
 8000664:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000666:	4814      	ldr	r0, [pc, #80]	@ (80006b8 <MX_TIM2_Init+0x98>)
 8000668:	f004 fe48 	bl	80052fc <HAL_TIM_Base_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000672:	f000 f929 	bl	80008c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000676:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800067a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800067c:	f107 0308 	add.w	r3, r7, #8
 8000680:	4619      	mov	r1, r3
 8000682:	480d      	ldr	r0, [pc, #52]	@ (80006b8 <MX_TIM2_Init+0x98>)
 8000684:	f005 f8f6 	bl	8005874 <HAL_TIM_ConfigClockSource>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800068e:	f000 f91b 	bl	80008c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000692:	2300      	movs	r3, #0
 8000694:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000696:	2300      	movs	r3, #0
 8000698:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800069a:	463b      	mov	r3, r7
 800069c:	4619      	mov	r1, r3
 800069e:	4806      	ldr	r0, [pc, #24]	@ (80006b8 <MX_TIM2_Init+0x98>)
 80006a0:	f005 fc54 	bl	8005f4c <HAL_TIMEx_MasterConfigSynchronization>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80006aa:	f000 f90d 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	3718      	adds	r7, #24
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000508 	.word	0x20000508

080006bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08a      	sub	sp, #40	@ 0x28
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c2:	f107 0320 	add.w	r3, r7, #32
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	611a      	str	r2, [r3, #16]
 80006da:	615a      	str	r2, [r3, #20]
 80006dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006de:	4b22      	ldr	r3, [pc, #136]	@ (8000768 <MX_TIM3_Init+0xac>)
 80006e0:	4a22      	ldr	r2, [pc, #136]	@ (800076c <MX_TIM3_Init+0xb0>)
 80006e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80006e4:	4b20      	ldr	r3, [pc, #128]	@ (8000768 <MX_TIM3_Init+0xac>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ea:	4b1f      	ldr	r3, [pc, #124]	@ (8000768 <MX_TIM3_Init+0xac>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80006f0:	4b1d      	ldr	r3, [pc, #116]	@ (8000768 <MX_TIM3_Init+0xac>)
 80006f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000768 <MX_TIM3_Init+0xac>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000768 <MX_TIM3_Init+0xac>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000704:	4818      	ldr	r0, [pc, #96]	@ (8000768 <MX_TIM3_Init+0xac>)
 8000706:	f004 fe9b 	bl	8005440 <HAL_TIM_PWM_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000710:	f000 f8da 	bl	80008c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000714:	2300      	movs	r3, #0
 8000716:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000718:	2300      	movs	r3, #0
 800071a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800071c:	f107 0320 	add.w	r3, r7, #32
 8000720:	4619      	mov	r1, r3
 8000722:	4811      	ldr	r0, [pc, #68]	@ (8000768 <MX_TIM3_Init+0xac>)
 8000724:	f005 fc12 	bl	8005f4c <HAL_TIMEx_MasterConfigSynchronization>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800072e:	f000 f8cb 	bl	80008c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000732:	2360      	movs	r3, #96	@ 0x60
 8000734:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800073a:	2300      	movs	r3, #0
 800073c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800073e:	2300      	movs	r3, #0
 8000740:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2208      	movs	r2, #8
 8000746:	4619      	mov	r1, r3
 8000748:	4807      	ldr	r0, [pc, #28]	@ (8000768 <MX_TIM3_Init+0xac>)
 800074a:	f004 ffd1 	bl	80056f0 <HAL_TIM_PWM_ConfigChannel>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000754:	f000 f8b8 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000758:	4803      	ldr	r0, [pc, #12]	@ (8000768 <MX_TIM3_Init+0xac>)
 800075a:	f000 fa19 	bl	8000b90 <HAL_TIM_MspPostInit>

}
 800075e:	bf00      	nop
 8000760:	3728      	adds	r7, #40	@ 0x28
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000550 	.word	0x20000550
 800076c:	40000400 	.word	0x40000400

08000770 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000776:	4b0c      	ldr	r3, [pc, #48]	@ (80007a8 <MX_DMA_Init+0x38>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	4a0b      	ldr	r2, [pc, #44]	@ (80007a8 <MX_DMA_Init+0x38>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6153      	str	r3, [r2, #20]
 8000782:	4b09      	ldr	r3, [pc, #36]	@ (80007a8 <MX_DMA_Init+0x38>)
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	2105      	movs	r1, #5
 8000792:	200b      	movs	r0, #11
 8000794:	f000 ff3f 	bl	8001616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000798:	200b      	movs	r0, #11
 800079a:	f000 ff58 	bl	800164e <HAL_NVIC_EnableIRQ>

}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000

080007ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 0310 	add.w	r3, r7, #16
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c0:	4b35      	ldr	r3, [pc, #212]	@ (8000898 <MX_GPIO_Init+0xec>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	4a34      	ldr	r2, [pc, #208]	@ (8000898 <MX_GPIO_Init+0xec>)
 80007c6:	f043 0310 	orr.w	r3, r3, #16
 80007ca:	6193      	str	r3, [r2, #24]
 80007cc:	4b32      	ldr	r3, [pc, #200]	@ (8000898 <MX_GPIO_Init+0xec>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	f003 0310 	and.w	r3, r3, #16
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d8:	4b2f      	ldr	r3, [pc, #188]	@ (8000898 <MX_GPIO_Init+0xec>)
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	4a2e      	ldr	r2, [pc, #184]	@ (8000898 <MX_GPIO_Init+0xec>)
 80007de:	f043 0320 	orr.w	r3, r3, #32
 80007e2:	6193      	str	r3, [r2, #24]
 80007e4:	4b2c      	ldr	r3, [pc, #176]	@ (8000898 <MX_GPIO_Init+0xec>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	f003 0320 	and.w	r3, r3, #32
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f0:	4b29      	ldr	r3, [pc, #164]	@ (8000898 <MX_GPIO_Init+0xec>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	4a28      	ldr	r2, [pc, #160]	@ (8000898 <MX_GPIO_Init+0xec>)
 80007f6:	f043 0304 	orr.w	r3, r3, #4
 80007fa:	6193      	str	r3, [r2, #24]
 80007fc:	4b26      	ldr	r3, [pc, #152]	@ (8000898 <MX_GPIO_Init+0xec>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	f003 0304 	and.w	r3, r3, #4
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000808:	4b23      	ldr	r3, [pc, #140]	@ (8000898 <MX_GPIO_Init+0xec>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	4a22      	ldr	r2, [pc, #136]	@ (8000898 <MX_GPIO_Init+0xec>)
 800080e:	f043 0308 	orr.w	r3, r3, #8
 8000812:	6193      	str	r3, [r2, #24]
 8000814:	4b20      	ldr	r3, [pc, #128]	@ (8000898 <MX_GPIO_Init+0xec>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	f003 0308 	and.w	r3, r3, #8
 800081c:	603b      	str	r3, [r7, #0]
 800081e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000820:	2201      	movs	r2, #1
 8000822:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000826:	481d      	ldr	r0, [pc, #116]	@ (800089c <MX_GPIO_Init+0xf0>)
 8000828:	f001 fa04 	bl	8001c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000832:	481b      	ldr	r0, [pc, #108]	@ (80008a0 <MX_GPIO_Init+0xf4>)
 8000834:	f001 f9fe 	bl	8001c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000838:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800083c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2302      	movs	r3, #2
 8000848:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800084a:	f107 0310 	add.w	r3, r7, #16
 800084e:	4619      	mov	r1, r3
 8000850:	4812      	ldr	r0, [pc, #72]	@ (800089c <MX_GPIO_Init+0xf0>)
 8000852:	f001 f86b 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000856:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800085a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000864:	f107 0310 	add.w	r3, r7, #16
 8000868:	4619      	mov	r1, r3
 800086a:	480d      	ldr	r0, [pc, #52]	@ (80008a0 <MX_GPIO_Init+0xf4>)
 800086c:	f001 f85e 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000870:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000874:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	2301      	movs	r3, #1
 8000878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2302      	movs	r3, #2
 8000880:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000882:	f107 0310 	add.w	r3, r7, #16
 8000886:	4619      	mov	r1, r3
 8000888:	4805      	ldr	r0, [pc, #20]	@ (80008a0 <MX_GPIO_Init+0xf4>)
 800088a:	f001 f84f 	bl	800192c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800088e:	bf00      	nop
 8000890:	3720      	adds	r7, #32
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40021000 	.word	0x40021000
 800089c:	40011000 	.word	0x40011000
 80008a0:	40010c00 	.word	0x40010c00

080008a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a04      	ldr	r2, [pc, #16]	@ (80008c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d101      	bne.n	80008ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008b6:	f000 fac3 	bl	8000e40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40000800 	.word	0x40000800

080008c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008cc:	b672      	cpsid	i
}
 80008ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <Error_Handler+0x8>

080008d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008da:	4b18      	ldr	r3, [pc, #96]	@ (800093c <HAL_MspInit+0x68>)
 80008dc:	699b      	ldr	r3, [r3, #24]
 80008de:	4a17      	ldr	r2, [pc, #92]	@ (800093c <HAL_MspInit+0x68>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6193      	str	r3, [r2, #24]
 80008e6:	4b15      	ldr	r3, [pc, #84]	@ (800093c <HAL_MspInit+0x68>)
 80008e8:	699b      	ldr	r3, [r3, #24]
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f2:	4b12      	ldr	r3, [pc, #72]	@ (800093c <HAL_MspInit+0x68>)
 80008f4:	69db      	ldr	r3, [r3, #28]
 80008f6:	4a11      	ldr	r2, [pc, #68]	@ (800093c <HAL_MspInit+0x68>)
 80008f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008fc:	61d3      	str	r3, [r2, #28]
 80008fe:	4b0f      	ldr	r3, [pc, #60]	@ (800093c <HAL_MspInit+0x68>)
 8000900:	69db      	ldr	r3, [r3, #28]
 8000902:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	210f      	movs	r1, #15
 800090e:	f06f 0001 	mvn.w	r0, #1
 8000912:	f000 fe80 	bl	8001616 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000916:	4b0a      	ldr	r3, [pc, #40]	@ (8000940 <HAL_MspInit+0x6c>)
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	4a04      	ldr	r2, [pc, #16]	@ (8000940 <HAL_MspInit+0x6c>)
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000932:	bf00      	nop
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40021000 	.word	0x40021000
 8000940:	40010000 	.word	0x40010000

08000944 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08a      	sub	sp, #40	@ 0x28
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	f107 0318 	add.w	r3, r7, #24
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a33      	ldr	r2, [pc, #204]	@ (8000a2c <HAL_ADC_MspInit+0xe8>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d15f      	bne.n	8000a24 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000964:	4b32      	ldr	r3, [pc, #200]	@ (8000a30 <HAL_ADC_MspInit+0xec>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	4a31      	ldr	r2, [pc, #196]	@ (8000a30 <HAL_ADC_MspInit+0xec>)
 800096a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800096e:	6193      	str	r3, [r2, #24]
 8000970:	4b2f      	ldr	r3, [pc, #188]	@ (8000a30 <HAL_ADC_MspInit+0xec>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000978:	617b      	str	r3, [r7, #20]
 800097a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097c:	4b2c      	ldr	r3, [pc, #176]	@ (8000a30 <HAL_ADC_MspInit+0xec>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	4a2b      	ldr	r2, [pc, #172]	@ (8000a30 <HAL_ADC_MspInit+0xec>)
 8000982:	f043 0304 	orr.w	r3, r3, #4
 8000986:	6193      	str	r3, [r2, #24]
 8000988:	4b29      	ldr	r3, [pc, #164]	@ (8000a30 <HAL_ADC_MspInit+0xec>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	f003 0304 	and.w	r3, r3, #4
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000994:	4b26      	ldr	r3, [pc, #152]	@ (8000a30 <HAL_ADC_MspInit+0xec>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	4a25      	ldr	r2, [pc, #148]	@ (8000a30 <HAL_ADC_MspInit+0xec>)
 800099a:	f043 0308 	orr.w	r3, r3, #8
 800099e:	6193      	str	r3, [r2, #24]
 80009a0:	4b23      	ldr	r3, [pc, #140]	@ (8000a30 <HAL_ADC_MspInit+0xec>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	f003 0308 	and.w	r3, r3, #8
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80009ac:	2338      	movs	r3, #56	@ 0x38
 80009ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009b0:	2303      	movs	r3, #3
 80009b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b4:	f107 0318 	add.w	r3, r7, #24
 80009b8:	4619      	mov	r1, r3
 80009ba:	481e      	ldr	r0, [pc, #120]	@ (8000a34 <HAL_ADC_MspInit+0xf0>)
 80009bc:	f000 ffb6 	bl	800192c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009c0:	2302      	movs	r3, #2
 80009c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009c4:	2303      	movs	r3, #3
 80009c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c8:	f107 0318 	add.w	r3, r7, #24
 80009cc:	4619      	mov	r1, r3
 80009ce:	481a      	ldr	r0, [pc, #104]	@ (8000a38 <HAL_ADC_MspInit+0xf4>)
 80009d0:	f000 ffac 	bl	800192c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80009d4:	4b19      	ldr	r3, [pc, #100]	@ (8000a3c <HAL_ADC_MspInit+0xf8>)
 80009d6:	4a1a      	ldr	r2, [pc, #104]	@ (8000a40 <HAL_ADC_MspInit+0xfc>)
 80009d8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009da:	4b18      	ldr	r3, [pc, #96]	@ (8000a3c <HAL_ADC_MspInit+0xf8>)
 80009dc:	2200      	movs	r2, #0
 80009de:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80009e0:	4b16      	ldr	r3, [pc, #88]	@ (8000a3c <HAL_ADC_MspInit+0xf8>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80009e6:	4b15      	ldr	r3, [pc, #84]	@ (8000a3c <HAL_ADC_MspInit+0xf8>)
 80009e8:	2280      	movs	r2, #128	@ 0x80
 80009ea:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009ec:	4b13      	ldr	r3, [pc, #76]	@ (8000a3c <HAL_ADC_MspInit+0xf8>)
 80009ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009f2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009f4:	4b11      	ldr	r3, [pc, #68]	@ (8000a3c <HAL_ADC_MspInit+0xf8>)
 80009f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009fa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a3c <HAL_ADC_MspInit+0xf8>)
 80009fe:	2220      	movs	r2, #32
 8000a00:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	@ (8000a3c <HAL_ADC_MspInit+0xf8>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a08:	480c      	ldr	r0, [pc, #48]	@ (8000a3c <HAL_ADC_MspInit+0xf8>)
 8000a0a:	f000 fe2f 	bl	800166c <HAL_DMA_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8000a14:	f7ff ff58 	bl	80008c8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a08      	ldr	r2, [pc, #32]	@ (8000a3c <HAL_ADC_MspInit+0xf8>)
 8000a1c:	621a      	str	r2, [r3, #32]
 8000a1e:	4a07      	ldr	r2, [pc, #28]	@ (8000a3c <HAL_ADC_MspInit+0xf8>)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a24:	bf00      	nop
 8000a26:	3728      	adds	r7, #40	@ 0x28
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40012400 	.word	0x40012400
 8000a30:	40021000 	.word	0x40021000
 8000a34:	40010800 	.word	0x40010800
 8000a38:	40010c00 	.word	0x40010c00
 8000a3c:	20000428 	.word	0x20000428
 8000a40:	40020008 	.word	0x40020008

08000a44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	@ 0x28
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a1d      	ldr	r2, [pc, #116]	@ (8000ad4 <HAL_I2C_MspInit+0x90>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d132      	bne.n	8000aca <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a64:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad8 <HAL_I2C_MspInit+0x94>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	4a1b      	ldr	r2, [pc, #108]	@ (8000ad8 <HAL_I2C_MspInit+0x94>)
 8000a6a:	f043 0308 	orr.w	r3, r3, #8
 8000a6e:	6193      	str	r3, [r2, #24]
 8000a70:	4b19      	ldr	r3, [pc, #100]	@ (8000ad8 <HAL_I2C_MspInit+0x94>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	f003 0308 	and.w	r3, r3, #8
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a7c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a82:	2312      	movs	r3, #18
 8000a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a86:	2303      	movs	r3, #3
 8000a88:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4812      	ldr	r0, [pc, #72]	@ (8000adc <HAL_I2C_MspInit+0x98>)
 8000a92:	f000 ff4b 	bl	800192c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000a96:	4b12      	ldr	r3, [pc, #72]	@ (8000ae0 <HAL_I2C_MspInit+0x9c>)
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a9e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000aa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa6:	f043 0302 	orr.w	r3, r3, #2
 8000aaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8000aac:	4a0c      	ldr	r2, [pc, #48]	@ (8000ae0 <HAL_I2C_MspInit+0x9c>)
 8000aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab0:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ab2:	4b09      	ldr	r3, [pc, #36]	@ (8000ad8 <HAL_I2C_MspInit+0x94>)
 8000ab4:	69db      	ldr	r3, [r3, #28]
 8000ab6:	4a08      	ldr	r2, [pc, #32]	@ (8000ad8 <HAL_I2C_MspInit+0x94>)
 8000ab8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000abc:	61d3      	str	r3, [r2, #28]
 8000abe:	4b06      	ldr	r3, [pc, #24]	@ (8000ad8 <HAL_I2C_MspInit+0x94>)
 8000ac0:	69db      	ldr	r3, [r3, #28]
 8000ac2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000aca:	bf00      	nop
 8000acc:	3728      	adds	r7, #40	@ 0x28
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40005400 	.word	0x40005400
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	40010c00 	.word	0x40010c00
 8000ae0:	40010000 	.word	0x40010000

08000ae4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a16      	ldr	r2, [pc, #88]	@ (8000b4c <HAL_TIM_Base_MspInit+0x68>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d10c      	bne.n	8000b10 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000af6:	4b16      	ldr	r3, [pc, #88]	@ (8000b50 <HAL_TIM_Base_MspInit+0x6c>)
 8000af8:	699b      	ldr	r3, [r3, #24]
 8000afa:	4a15      	ldr	r2, [pc, #84]	@ (8000b50 <HAL_TIM_Base_MspInit+0x6c>)
 8000afc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b00:	6193      	str	r3, [r2, #24]
 8000b02:	4b13      	ldr	r3, [pc, #76]	@ (8000b50 <HAL_TIM_Base_MspInit+0x6c>)
 8000b04:	699b      	ldr	r3, [r3, #24]
 8000b06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b0e:	e018      	b.n	8000b42 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b18:	d113      	bne.n	8000b42 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b50 <HAL_TIM_Base_MspInit+0x6c>)
 8000b1c:	69db      	ldr	r3, [r3, #28]
 8000b1e:	4a0c      	ldr	r2, [pc, #48]	@ (8000b50 <HAL_TIM_Base_MspInit+0x6c>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	61d3      	str	r3, [r2, #28]
 8000b26:	4b0a      	ldr	r3, [pc, #40]	@ (8000b50 <HAL_TIM_Base_MspInit+0x6c>)
 8000b28:	69db      	ldr	r3, [r3, #28]
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2105      	movs	r1, #5
 8000b36:	201c      	movs	r0, #28
 8000b38:	f000 fd6d 	bl	8001616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b3c:	201c      	movs	r0, #28
 8000b3e:	f000 fd86 	bl	800164e <HAL_NVIC_EnableIRQ>
}
 8000b42:	bf00      	nop
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40012c00 	.word	0x40012c00
 8000b50:	40021000 	.word	0x40021000

08000b54 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a09      	ldr	r2, [pc, #36]	@ (8000b88 <HAL_TIM_PWM_MspInit+0x34>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d10b      	bne.n	8000b7e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b66:	4b09      	ldr	r3, [pc, #36]	@ (8000b8c <HAL_TIM_PWM_MspInit+0x38>)
 8000b68:	69db      	ldr	r3, [r3, #28]
 8000b6a:	4a08      	ldr	r2, [pc, #32]	@ (8000b8c <HAL_TIM_PWM_MspInit+0x38>)
 8000b6c:	f043 0302 	orr.w	r3, r3, #2
 8000b70:	61d3      	str	r3, [r2, #28]
 8000b72:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <HAL_TIM_PWM_MspInit+0x38>)
 8000b74:	69db      	ldr	r3, [r3, #28]
 8000b76:	f003 0302 	and.w	r3, r3, #2
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b7e:	bf00      	nop
 8000b80:	3714      	adds	r7, #20
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr
 8000b88:	40000400 	.word	0x40000400
 8000b8c:	40021000 	.word	0x40021000

08000b90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b088      	sub	sp, #32
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 0310 	add.w	r3, r7, #16
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a1f      	ldr	r2, [pc, #124]	@ (8000c28 <HAL_TIM_MspPostInit+0x98>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d119      	bne.n	8000be4 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c2c <HAL_TIM_MspPostInit+0x9c>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	4a1d      	ldr	r2, [pc, #116]	@ (8000c2c <HAL_TIM_MspPostInit+0x9c>)
 8000bb6:	f043 0304 	orr.w	r3, r3, #4
 8000bba:	6193      	str	r3, [r2, #24]
 8000bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c2c <HAL_TIM_MspPostInit+0x9c>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	f003 0304 	and.w	r3, r3, #4
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000bc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bcc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd6:	f107 0310 	add.w	r3, r7, #16
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4814      	ldr	r0, [pc, #80]	@ (8000c30 <HAL_TIM_MspPostInit+0xa0>)
 8000bde:	f000 fea5 	bl	800192c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000be2:	e01c      	b.n	8000c1e <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM3)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a12      	ldr	r2, [pc, #72]	@ (8000c34 <HAL_TIM_MspPostInit+0xa4>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d117      	bne.n	8000c1e <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bee:	4b0f      	ldr	r3, [pc, #60]	@ (8000c2c <HAL_TIM_MspPostInit+0x9c>)
 8000bf0:	699b      	ldr	r3, [r3, #24]
 8000bf2:	4a0e      	ldr	r2, [pc, #56]	@ (8000c2c <HAL_TIM_MspPostInit+0x9c>)
 8000bf4:	f043 0308 	orr.w	r3, r3, #8
 8000bf8:	6193      	str	r3, [r2, #24]
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000c2c <HAL_TIM_MspPostInit+0x9c>)
 8000bfc:	699b      	ldr	r3, [r3, #24]
 8000bfe:	f003 0308 	and.w	r3, r3, #8
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c06:	2301      	movs	r3, #1
 8000c08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c12:	f107 0310 	add.w	r3, r7, #16
 8000c16:	4619      	mov	r1, r3
 8000c18:	4807      	ldr	r0, [pc, #28]	@ (8000c38 <HAL_TIM_MspPostInit+0xa8>)
 8000c1a:	f000 fe87 	bl	800192c <HAL_GPIO_Init>
}
 8000c1e:	bf00      	nop
 8000c20:	3720      	adds	r7, #32
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40012c00 	.word	0x40012c00
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	40010800 	.word	0x40010800
 8000c34:	40000400 	.word	0x40000400
 8000c38:	40010c00 	.word	0x40010c00

08000c3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08e      	sub	sp, #56	@ 0x38
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000c52:	4b34      	ldr	r3, [pc, #208]	@ (8000d24 <HAL_InitTick+0xe8>)
 8000c54:	69db      	ldr	r3, [r3, #28]
 8000c56:	4a33      	ldr	r2, [pc, #204]	@ (8000d24 <HAL_InitTick+0xe8>)
 8000c58:	f043 0304 	orr.w	r3, r3, #4
 8000c5c:	61d3      	str	r3, [r2, #28]
 8000c5e:	4b31      	ldr	r3, [pc, #196]	@ (8000d24 <HAL_InitTick+0xe8>)
 8000c60:	69db      	ldr	r3, [r3, #28]
 8000c62:	f003 0304 	and.w	r3, r3, #4
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c6a:	f107 0210 	add.w	r2, r7, #16
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4611      	mov	r1, r2
 8000c74:	4618      	mov	r0, r3
 8000c76:	f004 f987 	bl	8004f88 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c7a:	6a3b      	ldr	r3, [r7, #32]
 8000c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d103      	bne.n	8000c8c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c84:	f004 f958 	bl	8004f38 <HAL_RCC_GetPCLK1Freq>
 8000c88:	6378      	str	r0, [r7, #52]	@ 0x34
 8000c8a:	e004      	b.n	8000c96 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c8c:	f004 f954 	bl	8004f38 <HAL_RCC_GetPCLK1Freq>
 8000c90:	4603      	mov	r3, r0
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c98:	4a23      	ldr	r2, [pc, #140]	@ (8000d28 <HAL_InitTick+0xec>)
 8000c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c9e:	0c9b      	lsrs	r3, r3, #18
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000ca4:	4b21      	ldr	r3, [pc, #132]	@ (8000d2c <HAL_InitTick+0xf0>)
 8000ca6:	4a22      	ldr	r2, [pc, #136]	@ (8000d30 <HAL_InitTick+0xf4>)
 8000ca8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000caa:	4b20      	ldr	r3, [pc, #128]	@ (8000d2c <HAL_InitTick+0xf0>)
 8000cac:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cb0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000cb2:	4a1e      	ldr	r2, [pc, #120]	@ (8000d2c <HAL_InitTick+0xf0>)
 8000cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cb6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000cb8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d2c <HAL_InitTick+0xf0>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cbe:	4b1b      	ldr	r3, [pc, #108]	@ (8000d2c <HAL_InitTick+0xf0>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc4:	4b19      	ldr	r3, [pc, #100]	@ (8000d2c <HAL_InitTick+0xf0>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000cca:	4818      	ldr	r0, [pc, #96]	@ (8000d2c <HAL_InitTick+0xf0>)
 8000ccc:	f004 fb16 	bl	80052fc <HAL_TIM_Base_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000cd6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d11b      	bne.n	8000d16 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000cde:	4813      	ldr	r0, [pc, #76]	@ (8000d2c <HAL_InitTick+0xf0>)
 8000ce0:	f004 fb5c 	bl	800539c <HAL_TIM_Base_Start_IT>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000cea:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d111      	bne.n	8000d16 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000cf2:	201e      	movs	r0, #30
 8000cf4:	f000 fcab 	bl	800164e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2b0f      	cmp	r3, #15
 8000cfc:	d808      	bhi.n	8000d10 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	6879      	ldr	r1, [r7, #4]
 8000d02:	201e      	movs	r0, #30
 8000d04:	f000 fc87 	bl	8001616 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d08:	4a0a      	ldr	r2, [pc, #40]	@ (8000d34 <HAL_InitTick+0xf8>)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6013      	str	r3, [r2, #0]
 8000d0e:	e002      	b.n	8000d16 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000d10:	2301      	movs	r3, #1
 8000d12:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d16:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3738      	adds	r7, #56	@ 0x38
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40021000 	.word	0x40021000
 8000d28:	431bde83 	.word	0x431bde83
 8000d2c:	200005a8 	.word	0x200005a8
 8000d30:	40000800 	.word	0x40000800
 8000d34:	2000000c 	.word	0x2000000c

08000d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <NMI_Handler+0x4>

08000d40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <HardFault_Handler+0x4>

08000d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <MemManage_Handler+0x4>

08000d50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <BusFault_Handler+0x4>

08000d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <UsageFault_Handler+0x4>

08000d60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr

08000d6c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d70:	4802      	ldr	r0, [pc, #8]	@ (8000d7c <DMA1_Channel1_IRQHandler+0x10>)
 8000d72:	f000 fcd5 	bl	8001720 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000428 	.word	0x20000428

08000d80 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000d84:	4802      	ldr	r0, [pc, #8]	@ (8000d90 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000d86:	f002 f8c5 	bl	8002f14 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20002008 	.word	0x20002008

08000d94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d98:	4802      	ldr	r0, [pc, #8]	@ (8000da4 <TIM2_IRQHandler+0x10>)
 8000d9a:	f004 fba0 	bl	80054de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000508 	.word	0x20000508

08000da8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000dac:	4802      	ldr	r0, [pc, #8]	@ (8000db8 <TIM4_IRQHandler+0x10>)
 8000dae:	f004 fb96 	bl	80054de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	200005a8 	.word	0x200005a8

08000dbc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr

08000dc8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dc8:	f7ff fff8 	bl	8000dbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dcc:	480b      	ldr	r0, [pc, #44]	@ (8000dfc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000dce:	490c      	ldr	r1, [pc, #48]	@ (8000e00 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000dd0:	4a0c      	ldr	r2, [pc, #48]	@ (8000e04 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd4:	e002      	b.n	8000ddc <LoopCopyDataInit>

08000dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dda:	3304      	adds	r3, #4

08000ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de0:	d3f9      	bcc.n	8000dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de2:	4a09      	ldr	r2, [pc, #36]	@ (8000e08 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000de4:	4c09      	ldr	r4, [pc, #36]	@ (8000e0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de8:	e001      	b.n	8000dee <LoopFillZerobss>

08000dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dec:	3204      	adds	r2, #4

08000dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df0:	d3fb      	bcc.n	8000dea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000df2:	f00c f9fb 	bl	800d1ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000df6:	f7ff fa45 	bl	8000284 <main>
  bx lr
 8000dfa:	4770      	bx	lr
  ldr r0, =_sdata
 8000dfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e00:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 8000e04:	0800d330 	.word	0x0800d330
  ldr r2, =_sbss
 8000e08:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 8000e0c:	20002518 	.word	0x20002518

08000e10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e10:	e7fe      	b.n	8000e10 <ADC1_2_IRQHandler>
	...

08000e14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e18:	4b08      	ldr	r3, [pc, #32]	@ (8000e3c <HAL_Init+0x28>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a07      	ldr	r2, [pc, #28]	@ (8000e3c <HAL_Init+0x28>)
 8000e1e:	f043 0310 	orr.w	r3, r3, #16
 8000e22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e24:	2003      	movs	r0, #3
 8000e26:	f000 fbeb 	bl	8001600 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2a:	200f      	movs	r0, #15
 8000e2c:	f7ff ff06 	bl	8000c3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e30:	f7ff fd50 	bl	80008d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40022000 	.word	0x40022000

08000e40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e44:	4b05      	ldr	r3, [pc, #20]	@ (8000e5c <HAL_IncTick+0x1c>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b05      	ldr	r3, [pc, #20]	@ (8000e60 <HAL_IncTick+0x20>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4413      	add	r3, r2
 8000e50:	4a03      	ldr	r2, [pc, #12]	@ (8000e60 <HAL_IncTick+0x20>)
 8000e52:	6013      	str	r3, [r2, #0]
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr
 8000e5c:	20000010 	.word	0x20000010
 8000e60:	200005f0 	.word	0x200005f0

08000e64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return uwTick;
 8000e68:	4b02      	ldr	r3, [pc, #8]	@ (8000e74 <HAL_GetTick+0x10>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr
 8000e74:	200005f0 	.word	0x200005f0

08000e78 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e80:	2300      	movs	r3, #0
 8000e82:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000e84:	2300      	movs	r3, #0
 8000e86:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d101      	bne.n	8000e9a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e0be      	b.n	8001018 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d109      	bne.n	8000ebc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff fd44 	bl	8000944 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f000 fa05 	bl	80012cc <ADC_ConversionStop_Disable>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eca:	f003 0310 	and.w	r3, r3, #16
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	f040 8099 	bne.w	8001006 <HAL_ADC_Init+0x18e>
 8000ed4:	7dfb      	ldrb	r3, [r7, #23]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	f040 8095 	bne.w	8001006 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ee0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000ee4:	f023 0302 	bic.w	r3, r3, #2
 8000ee8:	f043 0202 	orr.w	r2, r3, #2
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ef8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	7b1b      	ldrb	r3, [r3, #12]
 8000efe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f00:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f10:	d003      	beq.n	8000f1a <HAL_ADC_Init+0xa2>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d102      	bne.n	8000f20 <HAL_ADC_Init+0xa8>
 8000f1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f1e:	e000      	b.n	8000f22 <HAL_ADC_Init+0xaa>
 8000f20:	2300      	movs	r3, #0
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	7d1b      	ldrb	r3, [r3, #20]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d119      	bne.n	8000f64 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	7b1b      	ldrb	r3, [r3, #12]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d109      	bne.n	8000f4c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	035a      	lsls	r2, r3, #13
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	e00b      	b.n	8000f64 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f50:	f043 0220 	orr.w	r2, r3, #32
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f5c:	f043 0201 	orr.w	r2, r3, #1
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	430a      	orrs	r2, r1
 8000f76:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	689a      	ldr	r2, [r3, #8]
 8000f7e:	4b28      	ldr	r3, [pc, #160]	@ (8001020 <HAL_ADC_Init+0x1a8>)
 8000f80:	4013      	ands	r3, r2
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	6812      	ldr	r2, [r2, #0]
 8000f86:	68b9      	ldr	r1, [r7, #8]
 8000f88:	430b      	orrs	r3, r1
 8000f8a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f94:	d003      	beq.n	8000f9e <HAL_ADC_Init+0x126>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d104      	bne.n	8000fa8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	691b      	ldr	r3, [r3, #16]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	051b      	lsls	r3, r3, #20
 8000fa6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fae:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	689a      	ldr	r2, [r3, #8]
 8000fc2:	4b18      	ldr	r3, [pc, #96]	@ (8001024 <HAL_ADC_Init+0x1ac>)
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	68ba      	ldr	r2, [r7, #8]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d10b      	bne.n	8000fe4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fd6:	f023 0303 	bic.w	r3, r3, #3
 8000fda:	f043 0201 	orr.w	r2, r3, #1
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fe2:	e018      	b.n	8001016 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fe8:	f023 0312 	bic.w	r3, r3, #18
 8000fec:	f043 0210 	orr.w	r2, r3, #16
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ff8:	f043 0201 	orr.w	r2, r3, #1
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001004:	e007      	b.n	8001016 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800100a:	f043 0210 	orr.w	r2, r3, #16
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001016:	7dfb      	ldrb	r3, [r7, #23]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	ffe1f7fd 	.word	0xffe1f7fd
 8001024:	ff1f0efe 	.word	0xff1f0efe

08001028 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001032:	2300      	movs	r3, #0
 8001034:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001036:	2300      	movs	r3, #0
 8001038:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001040:	2b01      	cmp	r3, #1
 8001042:	d101      	bne.n	8001048 <HAL_ADC_ConfigChannel+0x20>
 8001044:	2302      	movs	r3, #2
 8001046:	e0dc      	b.n	8001202 <HAL_ADC_ConfigChannel+0x1da>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2201      	movs	r2, #1
 800104c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	2b06      	cmp	r3, #6
 8001056:	d81c      	bhi.n	8001092 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685a      	ldr	r2, [r3, #4]
 8001062:	4613      	mov	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4413      	add	r3, r2
 8001068:	3b05      	subs	r3, #5
 800106a:	221f      	movs	r2, #31
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	4019      	ands	r1, r3
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	6818      	ldr	r0, [r3, #0]
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685a      	ldr	r2, [r3, #4]
 800107c:	4613      	mov	r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4413      	add	r3, r2
 8001082:	3b05      	subs	r3, #5
 8001084:	fa00 f203 	lsl.w	r2, r0, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	430a      	orrs	r2, r1
 800108e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001090:	e03c      	b.n	800110c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	2b0c      	cmp	r3, #12
 8001098:	d81c      	bhi.n	80010d4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685a      	ldr	r2, [r3, #4]
 80010a4:	4613      	mov	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	3b23      	subs	r3, #35	@ 0x23
 80010ac:	221f      	movs	r2, #31
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	4019      	ands	r1, r3
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	6818      	ldr	r0, [r3, #0]
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685a      	ldr	r2, [r3, #4]
 80010be:	4613      	mov	r3, r2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4413      	add	r3, r2
 80010c4:	3b23      	subs	r3, #35	@ 0x23
 80010c6:	fa00 f203 	lsl.w	r2, r0, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	430a      	orrs	r2, r1
 80010d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80010d2:	e01b      	b.n	800110c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685a      	ldr	r2, [r3, #4]
 80010de:	4613      	mov	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	3b41      	subs	r3, #65	@ 0x41
 80010e6:	221f      	movs	r2, #31
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	4019      	ands	r1, r3
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	6818      	ldr	r0, [r3, #0]
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685a      	ldr	r2, [r3, #4]
 80010f8:	4613      	mov	r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4413      	add	r3, r2
 80010fe:	3b41      	subs	r3, #65	@ 0x41
 8001100:	fa00 f203 	lsl.w	r2, r0, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	430a      	orrs	r2, r1
 800110a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b09      	cmp	r3, #9
 8001112:	d91c      	bls.n	800114e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	68d9      	ldr	r1, [r3, #12]
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	4613      	mov	r3, r2
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	4413      	add	r3, r2
 8001124:	3b1e      	subs	r3, #30
 8001126:	2207      	movs	r2, #7
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	4019      	ands	r1, r3
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	6898      	ldr	r0, [r3, #8]
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4613      	mov	r3, r2
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	4413      	add	r3, r2
 800113e:	3b1e      	subs	r3, #30
 8001140:	fa00 f203 	lsl.w	r2, r0, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	430a      	orrs	r2, r1
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	e019      	b.n	8001182 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	6919      	ldr	r1, [r3, #16]
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4613      	mov	r3, r2
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	4413      	add	r3, r2
 800115e:	2207      	movs	r2, #7
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	4019      	ands	r1, r3
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	6898      	ldr	r0, [r3, #8]
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4613      	mov	r3, r2
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	4413      	add	r3, r2
 8001176:	fa00 f203 	lsl.w	r2, r0, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	430a      	orrs	r2, r1
 8001180:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b10      	cmp	r3, #16
 8001188:	d003      	beq.n	8001192 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800118e:	2b11      	cmp	r3, #17
 8001190:	d132      	bne.n	80011f8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a1d      	ldr	r2, [pc, #116]	@ (800120c <HAL_ADC_ConfigChannel+0x1e4>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d125      	bne.n	80011e8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d126      	bne.n	80011f8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80011b8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2b10      	cmp	r3, #16
 80011c0:	d11a      	bne.n	80011f8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011c2:	4b13      	ldr	r3, [pc, #76]	@ (8001210 <HAL_ADC_ConfigChannel+0x1e8>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a13      	ldr	r2, [pc, #76]	@ (8001214 <HAL_ADC_ConfigChannel+0x1ec>)
 80011c8:	fba2 2303 	umull	r2, r3, r2, r3
 80011cc:	0c9a      	lsrs	r2, r3, #18
 80011ce:	4613      	mov	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4413      	add	r3, r2
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011d8:	e002      	b.n	80011e0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	3b01      	subs	r3, #1
 80011de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1f9      	bne.n	80011da <HAL_ADC_ConfigChannel+0x1b2>
 80011e6:	e007      	b.n	80011f8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011ec:	f043 0220 	orr.w	r2, r3, #32
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001200:	7bfb      	ldrb	r3, [r7, #15]
}
 8001202:	4618      	mov	r0, r3
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr
 800120c:	40012400 	.word	0x40012400
 8001210:	20000008 	.word	0x20000008
 8001214:	431bde83 	.word	0x431bde83

08001218 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001224:	2300      	movs	r3, #0
 8001226:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	2b01      	cmp	r3, #1
 8001234:	d040      	beq.n	80012b8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	689a      	ldr	r2, [r3, #8]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f042 0201 	orr.w	r2, r2, #1
 8001244:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001246:	4b1f      	ldr	r3, [pc, #124]	@ (80012c4 <ADC_Enable+0xac>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a1f      	ldr	r2, [pc, #124]	@ (80012c8 <ADC_Enable+0xb0>)
 800124c:	fba2 2303 	umull	r2, r3, r2, r3
 8001250:	0c9b      	lsrs	r3, r3, #18
 8001252:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001254:	e002      	b.n	800125c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	3b01      	subs	r3, #1
 800125a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d1f9      	bne.n	8001256 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001262:	f7ff fdff 	bl	8000e64 <HAL_GetTick>
 8001266:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001268:	e01f      	b.n	80012aa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800126a:	f7ff fdfb 	bl	8000e64 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d918      	bls.n	80012aa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	2b01      	cmp	r3, #1
 8001284:	d011      	beq.n	80012aa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800128a:	f043 0210 	orr.w	r2, r3, #16
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001296:	f043 0201 	orr.w	r2, r3, #1
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e007      	b.n	80012ba <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d1d8      	bne.n	800126a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000008 	.word	0x20000008
 80012c8:	431bde83 	.word	0x431bde83

080012cc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d12e      	bne.n	8001344 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	689a      	ldr	r2, [r3, #8]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 0201 	bic.w	r2, r2, #1
 80012f4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012f6:	f7ff fdb5 	bl	8000e64 <HAL_GetTick>
 80012fa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012fc:	e01b      	b.n	8001336 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80012fe:	f7ff fdb1 	bl	8000e64 <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d914      	bls.n	8001336 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	2b01      	cmp	r3, #1
 8001318:	d10d      	bne.n	8001336 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800131e:	f043 0210 	orr.w	r2, r3, #16
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800132a:	f043 0201 	orr.w	r2, r3, #1
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e007      	b.n	8001346 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	2b01      	cmp	r3, #1
 8001342:	d0dc      	beq.n	80012fe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001350:	b590      	push	{r4, r7, lr}
 8001352:	b087      	sub	sp, #28
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001358:	2300      	movs	r3, #0
 800135a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800135c:	2300      	movs	r3, #0
 800135e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001366:	2b01      	cmp	r3, #1
 8001368:	d101      	bne.n	800136e <HAL_ADCEx_Calibration_Start+0x1e>
 800136a:	2302      	movs	r3, #2
 800136c:	e097      	b.n	800149e <HAL_ADCEx_Calibration_Start+0x14e>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2201      	movs	r2, #1
 8001372:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff ffa8 	bl	80012cc <ADC_ConversionStop_Disable>
 800137c:	4603      	mov	r3, r0
 800137e:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff ff49 	bl	8001218 <ADC_Enable>
 8001386:	4603      	mov	r3, r0
 8001388:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800138a:	7dfb      	ldrb	r3, [r7, #23]
 800138c:	2b00      	cmp	r3, #0
 800138e:	f040 8081 	bne.w	8001494 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001396:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800139a:	f023 0302 	bic.w	r3, r3, #2
 800139e:	f043 0202 	orr.w	r2, r3, #2
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80013a6:	4b40      	ldr	r3, [pc, #256]	@ (80014a8 <HAL_ADCEx_Calibration_Start+0x158>)
 80013a8:	681c      	ldr	r4, [r3, #0]
 80013aa:	2002      	movs	r0, #2
 80013ac:	f003 fef0 	bl	8005190 <HAL_RCCEx_GetPeriphCLKFreq>
 80013b0:	4603      	mov	r3, r0
 80013b2:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80013b6:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80013b8:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80013ba:	e002      	b.n	80013c2 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	3b01      	subs	r3, #1
 80013c0:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1f9      	bne.n	80013bc <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	689a      	ldr	r2, [r3, #8]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f042 0208 	orr.w	r2, r2, #8
 80013d6:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80013d8:	f7ff fd44 	bl	8000e64 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80013de:	e01b      	b.n	8001418 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80013e0:	f7ff fd40 	bl	8000e64 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b0a      	cmp	r3, #10
 80013ec:	d914      	bls.n	8001418 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f003 0308 	and.w	r3, r3, #8
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d00d      	beq.n	8001418 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001400:	f023 0312 	bic.w	r3, r3, #18
 8001404:	f043 0210 	orr.w	r2, r3, #16
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e042      	b.n	800149e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f003 0308 	and.w	r3, r3, #8
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1dc      	bne.n	80013e0 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f042 0204 	orr.w	r2, r2, #4
 8001434:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001436:	f7ff fd15 	bl	8000e64 <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800143c:	e01b      	b.n	8001476 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800143e:	f7ff fd11 	bl	8000e64 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b0a      	cmp	r3, #10
 800144a:	d914      	bls.n	8001476 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 0304 	and.w	r3, r3, #4
 8001456:	2b00      	cmp	r3, #0
 8001458:	d00d      	beq.n	8001476 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800145e:	f023 0312 	bic.w	r3, r3, #18
 8001462:	f043 0210 	orr.w	r2, r3, #16
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e013      	b.n	800149e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1dc      	bne.n	800143e <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001488:	f023 0303 	bic.w	r3, r3, #3
 800148c:	f043 0201 	orr.w	r2, r3, #1
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800149c:	7dfb      	ldrb	r3, [r7, #23]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	371c      	adds	r7, #28
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd90      	pop	{r4, r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000008 	.word	0x20000008

080014ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014bc:	4b0c      	ldr	r3, [pc, #48]	@ (80014f0 <__NVIC_SetPriorityGrouping+0x44>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014c8:	4013      	ands	r3, r2
 80014ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014de:	4a04      	ldr	r2, [pc, #16]	@ (80014f0 <__NVIC_SetPriorityGrouping+0x44>)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	60d3      	str	r3, [r2, #12]
}
 80014e4:	bf00      	nop
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f8:	4b04      	ldr	r3, [pc, #16]	@ (800150c <__NVIC_GetPriorityGrouping+0x18>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	0a1b      	lsrs	r3, r3, #8
 80014fe:	f003 0307 	and.w	r3, r3, #7
}
 8001502:	4618      	mov	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151e:	2b00      	cmp	r3, #0
 8001520:	db0b      	blt.n	800153a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	f003 021f 	and.w	r2, r3, #31
 8001528:	4906      	ldr	r1, [pc, #24]	@ (8001544 <__NVIC_EnableIRQ+0x34>)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	095b      	lsrs	r3, r3, #5
 8001530:	2001      	movs	r0, #1
 8001532:	fa00 f202 	lsl.w	r2, r0, r2
 8001536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr
 8001544:	e000e100 	.word	0xe000e100

08001548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	6039      	str	r1, [r7, #0]
 8001552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001558:	2b00      	cmp	r3, #0
 800155a:	db0a      	blt.n	8001572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	b2da      	uxtb	r2, r3
 8001560:	490c      	ldr	r1, [pc, #48]	@ (8001594 <__NVIC_SetPriority+0x4c>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	0112      	lsls	r2, r2, #4
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	440b      	add	r3, r1
 800156c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001570:	e00a      	b.n	8001588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	b2da      	uxtb	r2, r3
 8001576:	4908      	ldr	r1, [pc, #32]	@ (8001598 <__NVIC_SetPriority+0x50>)
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	3b04      	subs	r3, #4
 8001580:	0112      	lsls	r2, r2, #4
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	440b      	add	r3, r1
 8001586:	761a      	strb	r2, [r3, #24]
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	e000e100 	.word	0xe000e100
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800159c:	b480      	push	{r7}
 800159e:	b089      	sub	sp, #36	@ 0x24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	f1c3 0307 	rsb	r3, r3, #7
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	bf28      	it	cs
 80015ba:	2304      	movcs	r3, #4
 80015bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3304      	adds	r3, #4
 80015c2:	2b06      	cmp	r3, #6
 80015c4:	d902      	bls.n	80015cc <NVIC_EncodePriority+0x30>
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3b03      	subs	r3, #3
 80015ca:	e000      	b.n	80015ce <NVIC_EncodePriority+0x32>
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43da      	mvns	r2, r3
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	401a      	ands	r2, r3
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	fa01 f303 	lsl.w	r3, r1, r3
 80015ee:	43d9      	mvns	r1, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f4:	4313      	orrs	r3, r2
         );
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3724      	adds	r7, #36	@ 0x24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr

08001600 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff ff4f 	bl	80014ac <__NVIC_SetPriorityGrouping>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001616:	b580      	push	{r7, lr}
 8001618:	b086      	sub	sp, #24
 800161a:	af00      	add	r7, sp, #0
 800161c:	4603      	mov	r3, r0
 800161e:	60b9      	str	r1, [r7, #8]
 8001620:	607a      	str	r2, [r7, #4]
 8001622:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001628:	f7ff ff64 	bl	80014f4 <__NVIC_GetPriorityGrouping>
 800162c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	68b9      	ldr	r1, [r7, #8]
 8001632:	6978      	ldr	r0, [r7, #20]
 8001634:	f7ff ffb2 	bl	800159c <NVIC_EncodePriority>
 8001638:	4602      	mov	r2, r0
 800163a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800163e:	4611      	mov	r1, r2
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ff81 	bl	8001548 <__NVIC_SetPriority>
}
 8001646:	bf00      	nop
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
 8001654:	4603      	mov	r3, r0
 8001656:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff ff57 	bl	8001510 <__NVIC_EnableIRQ>
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001674:	2300      	movs	r3, #0
 8001676:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e043      	b.n	800170a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	4b22      	ldr	r3, [pc, #136]	@ (8001714 <HAL_DMA_Init+0xa8>)
 800168a:	4413      	add	r3, r2
 800168c:	4a22      	ldr	r2, [pc, #136]	@ (8001718 <HAL_DMA_Init+0xac>)
 800168e:	fba2 2303 	umull	r2, r3, r2, r3
 8001692:	091b      	lsrs	r3, r3, #4
 8001694:	009a      	lsls	r2, r3, #2
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a1f      	ldr	r2, [pc, #124]	@ (800171c <HAL_DMA_Init+0xb0>)
 800169e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2202      	movs	r2, #2
 80016a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80016b6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80016ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80016c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016e4:	68fa      	ldr	r2, [r7, #12]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr
 8001714:	bffdfff8 	.word	0xbffdfff8
 8001718:	cccccccd 	.word	0xcccccccd
 800171c:	40020000 	.word	0x40020000

08001720 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173c:	2204      	movs	r2, #4
 800173e:	409a      	lsls	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4013      	ands	r3, r2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d04f      	beq.n	80017e8 <HAL_DMA_IRQHandler+0xc8>
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	f003 0304 	and.w	r3, r3, #4
 800174e:	2b00      	cmp	r3, #0
 8001750:	d04a      	beq.n	80017e8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0320 	and.w	r3, r3, #32
 800175c:	2b00      	cmp	r3, #0
 800175e:	d107      	bne.n	8001770 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 0204 	bic.w	r2, r2, #4
 800176e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a66      	ldr	r2, [pc, #408]	@ (8001910 <HAL_DMA_IRQHandler+0x1f0>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d029      	beq.n	80017ce <HAL_DMA_IRQHandler+0xae>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a65      	ldr	r2, [pc, #404]	@ (8001914 <HAL_DMA_IRQHandler+0x1f4>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d022      	beq.n	80017ca <HAL_DMA_IRQHandler+0xaa>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a63      	ldr	r2, [pc, #396]	@ (8001918 <HAL_DMA_IRQHandler+0x1f8>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d01a      	beq.n	80017c4 <HAL_DMA_IRQHandler+0xa4>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a62      	ldr	r2, [pc, #392]	@ (800191c <HAL_DMA_IRQHandler+0x1fc>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d012      	beq.n	80017be <HAL_DMA_IRQHandler+0x9e>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a60      	ldr	r2, [pc, #384]	@ (8001920 <HAL_DMA_IRQHandler+0x200>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d00a      	beq.n	80017b8 <HAL_DMA_IRQHandler+0x98>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a5f      	ldr	r2, [pc, #380]	@ (8001924 <HAL_DMA_IRQHandler+0x204>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d102      	bne.n	80017b2 <HAL_DMA_IRQHandler+0x92>
 80017ac:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80017b0:	e00e      	b.n	80017d0 <HAL_DMA_IRQHandler+0xb0>
 80017b2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80017b6:	e00b      	b.n	80017d0 <HAL_DMA_IRQHandler+0xb0>
 80017b8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80017bc:	e008      	b.n	80017d0 <HAL_DMA_IRQHandler+0xb0>
 80017be:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017c2:	e005      	b.n	80017d0 <HAL_DMA_IRQHandler+0xb0>
 80017c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017c8:	e002      	b.n	80017d0 <HAL_DMA_IRQHandler+0xb0>
 80017ca:	2340      	movs	r3, #64	@ 0x40
 80017cc:	e000      	b.n	80017d0 <HAL_DMA_IRQHandler+0xb0>
 80017ce:	2304      	movs	r3, #4
 80017d0:	4a55      	ldr	r2, [pc, #340]	@ (8001928 <HAL_DMA_IRQHandler+0x208>)
 80017d2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f000 8094 	beq.w	8001906 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80017e6:	e08e      	b.n	8001906 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ec:	2202      	movs	r2, #2
 80017ee:	409a      	lsls	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	4013      	ands	r3, r2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d056      	beq.n	80018a6 <HAL_DMA_IRQHandler+0x186>
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d051      	beq.n	80018a6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0320 	and.w	r3, r3, #32
 800180c:	2b00      	cmp	r3, #0
 800180e:	d10b      	bne.n	8001828 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f022 020a 	bic.w	r2, r2, #10
 800181e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2201      	movs	r2, #1
 8001824:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a38      	ldr	r2, [pc, #224]	@ (8001910 <HAL_DMA_IRQHandler+0x1f0>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d029      	beq.n	8001886 <HAL_DMA_IRQHandler+0x166>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a37      	ldr	r2, [pc, #220]	@ (8001914 <HAL_DMA_IRQHandler+0x1f4>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d022      	beq.n	8001882 <HAL_DMA_IRQHandler+0x162>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a35      	ldr	r2, [pc, #212]	@ (8001918 <HAL_DMA_IRQHandler+0x1f8>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d01a      	beq.n	800187c <HAL_DMA_IRQHandler+0x15c>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a34      	ldr	r2, [pc, #208]	@ (800191c <HAL_DMA_IRQHandler+0x1fc>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d012      	beq.n	8001876 <HAL_DMA_IRQHandler+0x156>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a32      	ldr	r2, [pc, #200]	@ (8001920 <HAL_DMA_IRQHandler+0x200>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d00a      	beq.n	8001870 <HAL_DMA_IRQHandler+0x150>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a31      	ldr	r2, [pc, #196]	@ (8001924 <HAL_DMA_IRQHandler+0x204>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d102      	bne.n	800186a <HAL_DMA_IRQHandler+0x14a>
 8001864:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001868:	e00e      	b.n	8001888 <HAL_DMA_IRQHandler+0x168>
 800186a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800186e:	e00b      	b.n	8001888 <HAL_DMA_IRQHandler+0x168>
 8001870:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001874:	e008      	b.n	8001888 <HAL_DMA_IRQHandler+0x168>
 8001876:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800187a:	e005      	b.n	8001888 <HAL_DMA_IRQHandler+0x168>
 800187c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001880:	e002      	b.n	8001888 <HAL_DMA_IRQHandler+0x168>
 8001882:	2320      	movs	r3, #32
 8001884:	e000      	b.n	8001888 <HAL_DMA_IRQHandler+0x168>
 8001886:	2302      	movs	r3, #2
 8001888:	4a27      	ldr	r2, [pc, #156]	@ (8001928 <HAL_DMA_IRQHandler+0x208>)
 800188a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001898:	2b00      	cmp	r3, #0
 800189a:	d034      	beq.n	8001906 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80018a4:	e02f      	b.n	8001906 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018aa:	2208      	movs	r2, #8
 80018ac:	409a      	lsls	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	4013      	ands	r3, r2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d028      	beq.n	8001908 <HAL_DMA_IRQHandler+0x1e8>
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	f003 0308 	and.w	r3, r3, #8
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d023      	beq.n	8001908 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f022 020e 	bic.w	r2, r2, #14
 80018ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018d8:	2101      	movs	r1, #1
 80018da:	fa01 f202 	lsl.w	r2, r1, r2
 80018de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2201      	movs	r2, #1
 80018ea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d004      	beq.n	8001908 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	4798      	blx	r3
    }
  }
  return;
 8001906:	bf00      	nop
 8001908:	bf00      	nop
}
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40020008 	.word	0x40020008
 8001914:	4002001c 	.word	0x4002001c
 8001918:	40020030 	.word	0x40020030
 800191c:	40020044 	.word	0x40020044
 8001920:	40020058 	.word	0x40020058
 8001924:	4002006c 	.word	0x4002006c
 8001928:	40020000 	.word	0x40020000

0800192c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800192c:	b480      	push	{r7}
 800192e:	b08b      	sub	sp, #44	@ 0x2c
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001936:	2300      	movs	r3, #0
 8001938:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800193a:	2300      	movs	r3, #0
 800193c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800193e:	e169      	b.n	8001c14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001940:	2201      	movs	r2, #1
 8001942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	69fa      	ldr	r2, [r7, #28]
 8001950:	4013      	ands	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	429a      	cmp	r2, r3
 800195a:	f040 8158 	bne.w	8001c0e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	4a9a      	ldr	r2, [pc, #616]	@ (8001bcc <HAL_GPIO_Init+0x2a0>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d05e      	beq.n	8001a26 <HAL_GPIO_Init+0xfa>
 8001968:	4a98      	ldr	r2, [pc, #608]	@ (8001bcc <HAL_GPIO_Init+0x2a0>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d875      	bhi.n	8001a5a <HAL_GPIO_Init+0x12e>
 800196e:	4a98      	ldr	r2, [pc, #608]	@ (8001bd0 <HAL_GPIO_Init+0x2a4>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d058      	beq.n	8001a26 <HAL_GPIO_Init+0xfa>
 8001974:	4a96      	ldr	r2, [pc, #600]	@ (8001bd0 <HAL_GPIO_Init+0x2a4>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d86f      	bhi.n	8001a5a <HAL_GPIO_Init+0x12e>
 800197a:	4a96      	ldr	r2, [pc, #600]	@ (8001bd4 <HAL_GPIO_Init+0x2a8>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d052      	beq.n	8001a26 <HAL_GPIO_Init+0xfa>
 8001980:	4a94      	ldr	r2, [pc, #592]	@ (8001bd4 <HAL_GPIO_Init+0x2a8>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d869      	bhi.n	8001a5a <HAL_GPIO_Init+0x12e>
 8001986:	4a94      	ldr	r2, [pc, #592]	@ (8001bd8 <HAL_GPIO_Init+0x2ac>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d04c      	beq.n	8001a26 <HAL_GPIO_Init+0xfa>
 800198c:	4a92      	ldr	r2, [pc, #584]	@ (8001bd8 <HAL_GPIO_Init+0x2ac>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d863      	bhi.n	8001a5a <HAL_GPIO_Init+0x12e>
 8001992:	4a92      	ldr	r2, [pc, #584]	@ (8001bdc <HAL_GPIO_Init+0x2b0>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d046      	beq.n	8001a26 <HAL_GPIO_Init+0xfa>
 8001998:	4a90      	ldr	r2, [pc, #576]	@ (8001bdc <HAL_GPIO_Init+0x2b0>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d85d      	bhi.n	8001a5a <HAL_GPIO_Init+0x12e>
 800199e:	2b12      	cmp	r3, #18
 80019a0:	d82a      	bhi.n	80019f8 <HAL_GPIO_Init+0xcc>
 80019a2:	2b12      	cmp	r3, #18
 80019a4:	d859      	bhi.n	8001a5a <HAL_GPIO_Init+0x12e>
 80019a6:	a201      	add	r2, pc, #4	@ (adr r2, 80019ac <HAL_GPIO_Init+0x80>)
 80019a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ac:	08001a27 	.word	0x08001a27
 80019b0:	08001a01 	.word	0x08001a01
 80019b4:	08001a13 	.word	0x08001a13
 80019b8:	08001a55 	.word	0x08001a55
 80019bc:	08001a5b 	.word	0x08001a5b
 80019c0:	08001a5b 	.word	0x08001a5b
 80019c4:	08001a5b 	.word	0x08001a5b
 80019c8:	08001a5b 	.word	0x08001a5b
 80019cc:	08001a5b 	.word	0x08001a5b
 80019d0:	08001a5b 	.word	0x08001a5b
 80019d4:	08001a5b 	.word	0x08001a5b
 80019d8:	08001a5b 	.word	0x08001a5b
 80019dc:	08001a5b 	.word	0x08001a5b
 80019e0:	08001a5b 	.word	0x08001a5b
 80019e4:	08001a5b 	.word	0x08001a5b
 80019e8:	08001a5b 	.word	0x08001a5b
 80019ec:	08001a5b 	.word	0x08001a5b
 80019f0:	08001a09 	.word	0x08001a09
 80019f4:	08001a1d 	.word	0x08001a1d
 80019f8:	4a79      	ldr	r2, [pc, #484]	@ (8001be0 <HAL_GPIO_Init+0x2b4>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d013      	beq.n	8001a26 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019fe:	e02c      	b.n	8001a5a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	623b      	str	r3, [r7, #32]
          break;
 8001a06:	e029      	b.n	8001a5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	623b      	str	r3, [r7, #32]
          break;
 8001a10:	e024      	b.n	8001a5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	3308      	adds	r3, #8
 8001a18:	623b      	str	r3, [r7, #32]
          break;
 8001a1a:	e01f      	b.n	8001a5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	330c      	adds	r3, #12
 8001a22:	623b      	str	r3, [r7, #32]
          break;
 8001a24:	e01a      	b.n	8001a5c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d102      	bne.n	8001a34 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a2e:	2304      	movs	r3, #4
 8001a30:	623b      	str	r3, [r7, #32]
          break;
 8001a32:	e013      	b.n	8001a5c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d105      	bne.n	8001a48 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a3c:	2308      	movs	r3, #8
 8001a3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69fa      	ldr	r2, [r7, #28]
 8001a44:	611a      	str	r2, [r3, #16]
          break;
 8001a46:	e009      	b.n	8001a5c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a48:	2308      	movs	r3, #8
 8001a4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	69fa      	ldr	r2, [r7, #28]
 8001a50:	615a      	str	r2, [r3, #20]
          break;
 8001a52:	e003      	b.n	8001a5c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a54:	2300      	movs	r3, #0
 8001a56:	623b      	str	r3, [r7, #32]
          break;
 8001a58:	e000      	b.n	8001a5c <HAL_GPIO_Init+0x130>
          break;
 8001a5a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	2bff      	cmp	r3, #255	@ 0xff
 8001a60:	d801      	bhi.n	8001a66 <HAL_GPIO_Init+0x13a>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	e001      	b.n	8001a6a <HAL_GPIO_Init+0x13e>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	3304      	adds	r3, #4
 8001a6a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	2bff      	cmp	r3, #255	@ 0xff
 8001a70:	d802      	bhi.n	8001a78 <HAL_GPIO_Init+0x14c>
 8001a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	e002      	b.n	8001a7e <HAL_GPIO_Init+0x152>
 8001a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7a:	3b08      	subs	r3, #8
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	210f      	movs	r1, #15
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	401a      	ands	r2, r3
 8001a90:	6a39      	ldr	r1, [r7, #32]
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	fa01 f303 	lsl.w	r3, r1, r3
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f000 80b1 	beq.w	8001c0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001aac:	4b4d      	ldr	r3, [pc, #308]	@ (8001be4 <HAL_GPIO_Init+0x2b8>)
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	4a4c      	ldr	r2, [pc, #304]	@ (8001be4 <HAL_GPIO_Init+0x2b8>)
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	6193      	str	r3, [r2, #24]
 8001ab8:	4b4a      	ldr	r3, [pc, #296]	@ (8001be4 <HAL_GPIO_Init+0x2b8>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	60bb      	str	r3, [r7, #8]
 8001ac2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ac4:	4a48      	ldr	r2, [pc, #288]	@ (8001be8 <HAL_GPIO_Init+0x2bc>)
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac8:	089b      	lsrs	r3, r3, #2
 8001aca:	3302      	adds	r3, #2
 8001acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	220f      	movs	r2, #15
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a40      	ldr	r2, [pc, #256]	@ (8001bec <HAL_GPIO_Init+0x2c0>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d013      	beq.n	8001b18 <HAL_GPIO_Init+0x1ec>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a3f      	ldr	r2, [pc, #252]	@ (8001bf0 <HAL_GPIO_Init+0x2c4>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d00d      	beq.n	8001b14 <HAL_GPIO_Init+0x1e8>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a3e      	ldr	r2, [pc, #248]	@ (8001bf4 <HAL_GPIO_Init+0x2c8>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d007      	beq.n	8001b10 <HAL_GPIO_Init+0x1e4>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a3d      	ldr	r2, [pc, #244]	@ (8001bf8 <HAL_GPIO_Init+0x2cc>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d101      	bne.n	8001b0c <HAL_GPIO_Init+0x1e0>
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e006      	b.n	8001b1a <HAL_GPIO_Init+0x1ee>
 8001b0c:	2304      	movs	r3, #4
 8001b0e:	e004      	b.n	8001b1a <HAL_GPIO_Init+0x1ee>
 8001b10:	2302      	movs	r3, #2
 8001b12:	e002      	b.n	8001b1a <HAL_GPIO_Init+0x1ee>
 8001b14:	2301      	movs	r3, #1
 8001b16:	e000      	b.n	8001b1a <HAL_GPIO_Init+0x1ee>
 8001b18:	2300      	movs	r3, #0
 8001b1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b1c:	f002 0203 	and.w	r2, r2, #3
 8001b20:	0092      	lsls	r2, r2, #2
 8001b22:	4093      	lsls	r3, r2
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b2a:	492f      	ldr	r1, [pc, #188]	@ (8001be8 <HAL_GPIO_Init+0x2bc>)
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2e:	089b      	lsrs	r3, r3, #2
 8001b30:	3302      	adds	r3, #2
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d006      	beq.n	8001b52 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b44:	4b2d      	ldr	r3, [pc, #180]	@ (8001bfc <HAL_GPIO_Init+0x2d0>)
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	492c      	ldr	r1, [pc, #176]	@ (8001bfc <HAL_GPIO_Init+0x2d0>)
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	608b      	str	r3, [r1, #8]
 8001b50:	e006      	b.n	8001b60 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b52:	4b2a      	ldr	r3, [pc, #168]	@ (8001bfc <HAL_GPIO_Init+0x2d0>)
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	4928      	ldr	r1, [pc, #160]	@ (8001bfc <HAL_GPIO_Init+0x2d0>)
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d006      	beq.n	8001b7a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b6c:	4b23      	ldr	r3, [pc, #140]	@ (8001bfc <HAL_GPIO_Init+0x2d0>)
 8001b6e:	68da      	ldr	r2, [r3, #12]
 8001b70:	4922      	ldr	r1, [pc, #136]	@ (8001bfc <HAL_GPIO_Init+0x2d0>)
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	60cb      	str	r3, [r1, #12]
 8001b78:	e006      	b.n	8001b88 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b7a:	4b20      	ldr	r3, [pc, #128]	@ (8001bfc <HAL_GPIO_Init+0x2d0>)
 8001b7c:	68da      	ldr	r2, [r3, #12]
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	43db      	mvns	r3, r3
 8001b82:	491e      	ldr	r1, [pc, #120]	@ (8001bfc <HAL_GPIO_Init+0x2d0>)
 8001b84:	4013      	ands	r3, r2
 8001b86:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d006      	beq.n	8001ba2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b94:	4b19      	ldr	r3, [pc, #100]	@ (8001bfc <HAL_GPIO_Init+0x2d0>)
 8001b96:	685a      	ldr	r2, [r3, #4]
 8001b98:	4918      	ldr	r1, [pc, #96]	@ (8001bfc <HAL_GPIO_Init+0x2d0>)
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	604b      	str	r3, [r1, #4]
 8001ba0:	e006      	b.n	8001bb0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ba2:	4b16      	ldr	r3, [pc, #88]	@ (8001bfc <HAL_GPIO_Init+0x2d0>)
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	4914      	ldr	r1, [pc, #80]	@ (8001bfc <HAL_GPIO_Init+0x2d0>)
 8001bac:	4013      	ands	r3, r2
 8001bae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d021      	beq.n	8001c00 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8001bfc <HAL_GPIO_Init+0x2d0>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	490e      	ldr	r1, [pc, #56]	@ (8001bfc <HAL_GPIO_Init+0x2d0>)
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	600b      	str	r3, [r1, #0]
 8001bc8:	e021      	b.n	8001c0e <HAL_GPIO_Init+0x2e2>
 8001bca:	bf00      	nop
 8001bcc:	10320000 	.word	0x10320000
 8001bd0:	10310000 	.word	0x10310000
 8001bd4:	10220000 	.word	0x10220000
 8001bd8:	10210000 	.word	0x10210000
 8001bdc:	10120000 	.word	0x10120000
 8001be0:	10110000 	.word	0x10110000
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40010000 	.word	0x40010000
 8001bec:	40010800 	.word	0x40010800
 8001bf0:	40010c00 	.word	0x40010c00
 8001bf4:	40011000 	.word	0x40011000
 8001bf8:	40011400 	.word	0x40011400
 8001bfc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c00:	4b0b      	ldr	r3, [pc, #44]	@ (8001c30 <HAL_GPIO_Init+0x304>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	43db      	mvns	r3, r3
 8001c08:	4909      	ldr	r1, [pc, #36]	@ (8001c30 <HAL_GPIO_Init+0x304>)
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c10:	3301      	adds	r3, #1
 8001c12:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f47f ae8e 	bne.w	8001940 <HAL_GPIO_Init+0x14>
  }
}
 8001c24:	bf00      	nop
 8001c26:	bf00      	nop
 8001c28:	372c      	adds	r7, #44	@ 0x2c
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr
 8001c30:	40010400 	.word	0x40010400

08001c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	807b      	strh	r3, [r7, #2]
 8001c40:	4613      	mov	r3, r2
 8001c42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c44:	787b      	ldrb	r3, [r7, #1]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c4a:	887a      	ldrh	r2, [r7, #2]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c50:	e003      	b.n	8001c5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c52:	887b      	ldrh	r3, [r7, #2]
 8001c54:	041a      	lsls	r2, r3, #16
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	611a      	str	r2, [r3, #16]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr

08001c64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e12b      	b.n	8001ece <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d106      	bne.n	8001c90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7fe feda 	bl	8000a44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2224      	movs	r2, #36	@ 0x24
 8001c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 0201 	bic.w	r2, r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001cb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001cc6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cc8:	f003 f936 	bl	8004f38 <HAL_RCC_GetPCLK1Freq>
 8001ccc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	4a81      	ldr	r2, [pc, #516]	@ (8001ed8 <HAL_I2C_Init+0x274>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d807      	bhi.n	8001ce8 <HAL_I2C_Init+0x84>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4a80      	ldr	r2, [pc, #512]	@ (8001edc <HAL_I2C_Init+0x278>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	bf94      	ite	ls
 8001ce0:	2301      	movls	r3, #1
 8001ce2:	2300      	movhi	r3, #0
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	e006      	b.n	8001cf6 <HAL_I2C_Init+0x92>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4a7d      	ldr	r2, [pc, #500]	@ (8001ee0 <HAL_I2C_Init+0x27c>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	bf94      	ite	ls
 8001cf0:	2301      	movls	r3, #1
 8001cf2:	2300      	movhi	r3, #0
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e0e7      	b.n	8001ece <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	4a78      	ldr	r2, [pc, #480]	@ (8001ee4 <HAL_I2C_Init+0x280>)
 8001d02:	fba2 2303 	umull	r2, r3, r2, r3
 8001d06:	0c9b      	lsrs	r3, r3, #18
 8001d08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68ba      	ldr	r2, [r7, #8]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	4a6a      	ldr	r2, [pc, #424]	@ (8001ed8 <HAL_I2C_Init+0x274>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d802      	bhi.n	8001d38 <HAL_I2C_Init+0xd4>
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	3301      	adds	r3, #1
 8001d36:	e009      	b.n	8001d4c <HAL_I2C_Init+0xe8>
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001d3e:	fb02 f303 	mul.w	r3, r2, r3
 8001d42:	4a69      	ldr	r2, [pc, #420]	@ (8001ee8 <HAL_I2C_Init+0x284>)
 8001d44:	fba2 2303 	umull	r2, r3, r2, r3
 8001d48:	099b      	lsrs	r3, r3, #6
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	6812      	ldr	r2, [r2, #0]
 8001d50:	430b      	orrs	r3, r1
 8001d52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001d5e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	495c      	ldr	r1, [pc, #368]	@ (8001ed8 <HAL_I2C_Init+0x274>)
 8001d68:	428b      	cmp	r3, r1
 8001d6a:	d819      	bhi.n	8001da0 <HAL_I2C_Init+0x13c>
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	1e59      	subs	r1, r3, #1
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d7a:	1c59      	adds	r1, r3, #1
 8001d7c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001d80:	400b      	ands	r3, r1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00a      	beq.n	8001d9c <HAL_I2C_Init+0x138>
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	1e59      	subs	r1, r3, #1
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d94:	3301      	adds	r3, #1
 8001d96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d9a:	e051      	b.n	8001e40 <HAL_I2C_Init+0x1dc>
 8001d9c:	2304      	movs	r3, #4
 8001d9e:	e04f      	b.n	8001e40 <HAL_I2C_Init+0x1dc>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d111      	bne.n	8001dcc <HAL_I2C_Init+0x168>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	1e58      	subs	r0, r3, #1
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6859      	ldr	r1, [r3, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	440b      	add	r3, r1
 8001db6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dba:	3301      	adds	r3, #1
 8001dbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	bf0c      	ite	eq
 8001dc4:	2301      	moveq	r3, #1
 8001dc6:	2300      	movne	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	e012      	b.n	8001df2 <HAL_I2C_Init+0x18e>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	1e58      	subs	r0, r3, #1
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6859      	ldr	r1, [r3, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	440b      	add	r3, r1
 8001dda:	0099      	lsls	r1, r3, #2
 8001ddc:	440b      	add	r3, r1
 8001dde:	fbb0 f3f3 	udiv	r3, r0, r3
 8001de2:	3301      	adds	r3, #1
 8001de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	bf0c      	ite	eq
 8001dec:	2301      	moveq	r3, #1
 8001dee:	2300      	movne	r3, #0
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <HAL_I2C_Init+0x196>
 8001df6:	2301      	movs	r3, #1
 8001df8:	e022      	b.n	8001e40 <HAL_I2C_Init+0x1dc>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d10e      	bne.n	8001e20 <HAL_I2C_Init+0x1bc>
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	1e58      	subs	r0, r3, #1
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6859      	ldr	r1, [r3, #4]
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	440b      	add	r3, r1
 8001e10:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e14:	3301      	adds	r3, #1
 8001e16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e1e:	e00f      	b.n	8001e40 <HAL_I2C_Init+0x1dc>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	1e58      	subs	r0, r3, #1
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6859      	ldr	r1, [r3, #4]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	0099      	lsls	r1, r3, #2
 8001e30:	440b      	add	r3, r1
 8001e32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e36:	3301      	adds	r3, #1
 8001e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e40:	6879      	ldr	r1, [r7, #4]
 8001e42:	6809      	ldr	r1, [r1, #0]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69da      	ldr	r2, [r3, #28]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	430a      	orrs	r2, r1
 8001e62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001e6e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6911      	ldr	r1, [r2, #16]
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	68d2      	ldr	r2, [r2, #12]
 8001e7a:	4311      	orrs	r1, r2
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6812      	ldr	r2, [r2, #0]
 8001e80:	430b      	orrs	r3, r1
 8001e82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	695a      	ldr	r2, [r3, #20]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 0201 	orr.w	r2, r2, #1
 8001eae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2220      	movs	r2, #32
 8001eba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	000186a0 	.word	0x000186a0
 8001edc:	001e847f 	.word	0x001e847f
 8001ee0:	003d08ff 	.word	0x003d08ff
 8001ee4:	431bde83 	.word	0x431bde83
 8001ee8:	10624dd3 	.word	0x10624dd3

08001eec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b088      	sub	sp, #32
 8001ef0:	af02      	add	r7, sp, #8
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	607a      	str	r2, [r7, #4]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	460b      	mov	r3, r1
 8001efa:	817b      	strh	r3, [r7, #10]
 8001efc:	4613      	mov	r3, r2
 8001efe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f00:	f7fe ffb0 	bl	8000e64 <HAL_GetTick>
 8001f04:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b20      	cmp	r3, #32
 8001f10:	f040 80e0 	bne.w	80020d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	2319      	movs	r3, #25
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	4970      	ldr	r1, [pc, #448]	@ (80020e0 <HAL_I2C_Master_Transmit+0x1f4>)
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f000 fc9e 	bl	8002860 <I2C_WaitOnFlagUntilTimeout>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	e0d3      	b.n	80020d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d101      	bne.n	8001f3c <HAL_I2C_Master_Transmit+0x50>
 8001f38:	2302      	movs	r3, #2
 8001f3a:	e0cc      	b.n	80020d6 <HAL_I2C_Master_Transmit+0x1ea>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d007      	beq.n	8001f62 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f042 0201 	orr.w	r2, r2, #1
 8001f60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f70:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2221      	movs	r2, #33	@ 0x21
 8001f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2210      	movs	r2, #16
 8001f7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2200      	movs	r2, #0
 8001f86:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	893a      	ldrh	r2, [r7, #8]
 8001f92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	4a50      	ldr	r2, [pc, #320]	@ (80020e4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001fa2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001fa4:	8979      	ldrh	r1, [r7, #10]
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	6a3a      	ldr	r2, [r7, #32]
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f000 fb08 	bl	80025c0 <I2C_MasterRequestWrite>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e08d      	b.n	80020d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fba:	2300      	movs	r3, #0
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	613b      	str	r3, [r7, #16]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	613b      	str	r3, [r7, #16]
 8001fce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001fd0:	e066      	b.n	80020a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	6a39      	ldr	r1, [r7, #32]
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f000 fd5c 	bl	8002a94 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00d      	beq.n	8001ffe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	d107      	bne.n	8001ffa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ff8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e06b      	b.n	80020d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002002:	781a      	ldrb	r2, [r3, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200e:	1c5a      	adds	r2, r3, #1
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002018:	b29b      	uxth	r3, r3
 800201a:	3b01      	subs	r3, #1
 800201c:	b29a      	uxth	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002026:	3b01      	subs	r3, #1
 8002028:	b29a      	uxth	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	695b      	ldr	r3, [r3, #20]
 8002034:	f003 0304 	and.w	r3, r3, #4
 8002038:	2b04      	cmp	r3, #4
 800203a:	d11b      	bne.n	8002074 <HAL_I2C_Master_Transmit+0x188>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002040:	2b00      	cmp	r3, #0
 8002042:	d017      	beq.n	8002074 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002048:	781a      	ldrb	r2, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002054:	1c5a      	adds	r2, r3, #1
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800205e:	b29b      	uxth	r3, r3
 8002060:	3b01      	subs	r3, #1
 8002062:	b29a      	uxth	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800206c:	3b01      	subs	r3, #1
 800206e:	b29a      	uxth	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	6a39      	ldr	r1, [r7, #32]
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f000 fd53 	bl	8002b24 <I2C_WaitOnBTFFlagUntilTimeout>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d00d      	beq.n	80020a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002088:	2b04      	cmp	r3, #4
 800208a:	d107      	bne.n	800209c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800209a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e01a      	b.n	80020d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d194      	bne.n	8001fd2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2220      	movs	r2, #32
 80020bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80020d0:	2300      	movs	r3, #0
 80020d2:	e000      	b.n	80020d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80020d4:	2302      	movs	r3, #2
  }
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	00100002 	.word	0x00100002
 80020e4:	ffff0000 	.word	0xffff0000

080020e8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08c      	sub	sp, #48	@ 0x30
 80020ec:	af02      	add	r7, sp, #8
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	607a      	str	r2, [r7, #4]
 80020f2:	461a      	mov	r2, r3
 80020f4:	460b      	mov	r3, r1
 80020f6:	817b      	strh	r3, [r7, #10]
 80020f8:	4613      	mov	r3, r2
 80020fa:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80020fc:	2300      	movs	r3, #0
 80020fe:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002100:	f7fe feb0 	bl	8000e64 <HAL_GetTick>
 8002104:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b20      	cmp	r3, #32
 8002110:	f040 824b 	bne.w	80025aa <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	2319      	movs	r3, #25
 800211a:	2201      	movs	r2, #1
 800211c:	497f      	ldr	r1, [pc, #508]	@ (800231c <HAL_I2C_Master_Receive+0x234>)
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f000 fb9e 	bl	8002860 <I2C_WaitOnFlagUntilTimeout>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800212a:	2302      	movs	r3, #2
 800212c:	e23e      	b.n	80025ac <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002134:	2b01      	cmp	r3, #1
 8002136:	d101      	bne.n	800213c <HAL_I2C_Master_Receive+0x54>
 8002138:	2302      	movs	r3, #2
 800213a:	e237      	b.n	80025ac <HAL_I2C_Master_Receive+0x4c4>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b01      	cmp	r3, #1
 8002150:	d007      	beq.n	8002162 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f042 0201 	orr.w	r2, r2, #1
 8002160:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002170:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2222      	movs	r2, #34	@ 0x22
 8002176:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2210      	movs	r2, #16
 800217e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	893a      	ldrh	r2, [r7, #8]
 8002192:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002198:	b29a      	uxth	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	4a5f      	ldr	r2, [pc, #380]	@ (8002320 <HAL_I2C_Master_Receive+0x238>)
 80021a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021a4:	8979      	ldrh	r1, [r7, #10]
 80021a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f000 fa8a 	bl	80026c4 <I2C_MasterRequestRead>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e1f8      	b.n	80025ac <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d113      	bne.n	80021ea <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021c2:	2300      	movs	r3, #0
 80021c4:	61fb      	str	r3, [r7, #28]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	61fb      	str	r3, [r7, #28]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	61fb      	str	r3, [r7, #28]
 80021d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	e1cc      	b.n	8002584 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d11e      	bne.n	8002230 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002200:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002202:	b672      	cpsid	i
}
 8002204:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002206:	2300      	movs	r3, #0
 8002208:	61bb      	str	r3, [r7, #24]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	61bb      	str	r3, [r7, #24]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	61bb      	str	r3, [r7, #24]
 800221a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800222a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800222c:	b662      	cpsie	i
}
 800222e:	e035      	b.n	800229c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002234:	2b02      	cmp	r3, #2
 8002236:	d11e      	bne.n	8002276 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002246:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002248:	b672      	cpsid	i
}
 800224a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	617b      	str	r3, [r7, #20]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	617b      	str	r3, [r7, #20]
 8002260:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002270:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002272:	b662      	cpsie	i
}
 8002274:	e012      	b.n	800229c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002284:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002286:	2300      	movs	r3, #0
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	613b      	str	r3, [r7, #16]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	613b      	str	r3, [r7, #16]
 800229a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800229c:	e172      	b.n	8002584 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022a2:	2b03      	cmp	r3, #3
 80022a4:	f200 811f 	bhi.w	80024e6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d123      	bne.n	80022f8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022b2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f000 fc7d 	bl	8002bb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e173      	b.n	80025ac <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	691a      	ldr	r2, [r3, #16]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d6:	1c5a      	adds	r2, r3, #1
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022e0:	3b01      	subs	r3, #1
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	3b01      	subs	r3, #1
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80022f6:	e145      	b.n	8002584 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d152      	bne.n	80023a6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002306:	2200      	movs	r2, #0
 8002308:	4906      	ldr	r1, [pc, #24]	@ (8002324 <HAL_I2C_Master_Receive+0x23c>)
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 faa8 	bl	8002860 <I2C_WaitOnFlagUntilTimeout>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d008      	beq.n	8002328 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e148      	b.n	80025ac <HAL_I2C_Master_Receive+0x4c4>
 800231a:	bf00      	nop
 800231c:	00100002 	.word	0x00100002
 8002320:	ffff0000 	.word	0xffff0000
 8002324:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002328:	b672      	cpsid	i
}
 800232a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800233a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	691a      	ldr	r2, [r3, #16]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002358:	3b01      	subs	r3, #1
 800235a:	b29a      	uxth	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002364:	b29b      	uxth	r3, r3
 8002366:	3b01      	subs	r3, #1
 8002368:	b29a      	uxth	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800236e:	b662      	cpsie	i
}
 8002370:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	691a      	ldr	r2, [r3, #16]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002384:	1c5a      	adds	r2, r3, #1
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800238e:	3b01      	subs	r3, #1
 8002390:	b29a      	uxth	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800239a:	b29b      	uxth	r3, r3
 800239c:	3b01      	subs	r3, #1
 800239e:	b29a      	uxth	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80023a4:	e0ee      	b.n	8002584 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ac:	2200      	movs	r2, #0
 80023ae:	4981      	ldr	r1, [pc, #516]	@ (80025b4 <HAL_I2C_Master_Receive+0x4cc>)
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f000 fa55 	bl	8002860 <I2C_WaitOnFlagUntilTimeout>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e0f5      	b.n	80025ac <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80023d0:	b672      	cpsid	i
}
 80023d2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	691a      	ldr	r2, [r3, #16]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e6:	1c5a      	adds	r2, r3, #1
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023f0:	3b01      	subs	r3, #1
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	3b01      	subs	r3, #1
 8002400:	b29a      	uxth	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002406:	4b6c      	ldr	r3, [pc, #432]	@ (80025b8 <HAL_I2C_Master_Receive+0x4d0>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	08db      	lsrs	r3, r3, #3
 800240c:	4a6b      	ldr	r2, [pc, #428]	@ (80025bc <HAL_I2C_Master_Receive+0x4d4>)
 800240e:	fba2 2303 	umull	r2, r3, r2, r3
 8002412:	0a1a      	lsrs	r2, r3, #8
 8002414:	4613      	mov	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	00da      	lsls	r2, r3, #3
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002420:	6a3b      	ldr	r3, [r7, #32]
 8002422:	3b01      	subs	r3, #1
 8002424:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002426:	6a3b      	ldr	r3, [r7, #32]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d118      	bne.n	800245e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2220      	movs	r2, #32
 8002436:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002446:	f043 0220 	orr.w	r2, r3, #32
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800244e:	b662      	cpsie	i
}
 8002450:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e0a6      	b.n	80025ac <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b04      	cmp	r3, #4
 800246a:	d1d9      	bne.n	8002420 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800247a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	691a      	ldr	r2, [r3, #16]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002498:	3b01      	subs	r3, #1
 800249a:	b29a      	uxth	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	3b01      	subs	r3, #1
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80024ae:	b662      	cpsie	i
}
 80024b0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	691a      	ldr	r2, [r3, #16]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c4:	1c5a      	adds	r2, r3, #1
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ce:	3b01      	subs	r3, #1
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024da:	b29b      	uxth	r3, r3
 80024dc:	3b01      	subs	r3, #1
 80024de:	b29a      	uxth	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80024e4:	e04e      	b.n	8002584 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 fb62 	bl	8002bb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e058      	b.n	80025ac <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	691a      	ldr	r2, [r3, #16]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002516:	3b01      	subs	r3, #1
 8002518:	b29a      	uxth	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002522:	b29b      	uxth	r3, r3
 8002524:	3b01      	subs	r3, #1
 8002526:	b29a      	uxth	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	2b04      	cmp	r3, #4
 8002538:	d124      	bne.n	8002584 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800253e:	2b03      	cmp	r3, #3
 8002540:	d107      	bne.n	8002552 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002550:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	691a      	ldr	r2, [r3, #16]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002564:	1c5a      	adds	r2, r3, #1
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800256e:	3b01      	subs	r3, #1
 8002570:	b29a      	uxth	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800257a:	b29b      	uxth	r3, r3
 800257c:	3b01      	subs	r3, #1
 800257e:	b29a      	uxth	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002588:	2b00      	cmp	r3, #0
 800258a:	f47f ae88 	bne.w	800229e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2220      	movs	r2, #32
 8002592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	e000      	b.n	80025ac <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80025aa:	2302      	movs	r3, #2
  }
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3728      	adds	r7, #40	@ 0x28
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	00010004 	.word	0x00010004
 80025b8:	20000008 	.word	0x20000008
 80025bc:	14f8b589 	.word	0x14f8b589

080025c0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b088      	sub	sp, #32
 80025c4:	af02      	add	r7, sp, #8
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	607a      	str	r2, [r7, #4]
 80025ca:	603b      	str	r3, [r7, #0]
 80025cc:	460b      	mov	r3, r1
 80025ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	2b08      	cmp	r3, #8
 80025da:	d006      	beq.n	80025ea <I2C_MasterRequestWrite+0x2a>
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d003      	beq.n	80025ea <I2C_MasterRequestWrite+0x2a>
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80025e8:	d108      	bne.n	80025fc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	e00b      	b.n	8002614 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002600:	2b12      	cmp	r3, #18
 8002602:	d107      	bne.n	8002614 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002612:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 f91d 	bl	8002860 <I2C_WaitOnFlagUntilTimeout>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00d      	beq.n	8002648 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002636:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800263a:	d103      	bne.n	8002644 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002642:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e035      	b.n	80026b4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002650:	d108      	bne.n	8002664 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002652:	897b      	ldrh	r3, [r7, #10]
 8002654:	b2db      	uxtb	r3, r3
 8002656:	461a      	mov	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002660:	611a      	str	r2, [r3, #16]
 8002662:	e01b      	b.n	800269c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002664:	897b      	ldrh	r3, [r7, #10]
 8002666:	11db      	asrs	r3, r3, #7
 8002668:	b2db      	uxtb	r3, r3
 800266a:	f003 0306 	and.w	r3, r3, #6
 800266e:	b2db      	uxtb	r3, r3
 8002670:	f063 030f 	orn	r3, r3, #15
 8002674:	b2da      	uxtb	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	490e      	ldr	r1, [pc, #56]	@ (80026bc <I2C_MasterRequestWrite+0xfc>)
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 f966 	bl	8002954 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e010      	b.n	80026b4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002692:	897b      	ldrh	r3, [r7, #10]
 8002694:	b2da      	uxtb	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	4907      	ldr	r1, [pc, #28]	@ (80026c0 <I2C_MasterRequestWrite+0x100>)
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	f000 f956 	bl	8002954 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e000      	b.n	80026b4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	00010008 	.word	0x00010008
 80026c0:	00010002 	.word	0x00010002

080026c4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b088      	sub	sp, #32
 80026c8:	af02      	add	r7, sp, #8
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	607a      	str	r2, [r7, #4]
 80026ce:	603b      	str	r3, [r7, #0]
 80026d0:	460b      	mov	r3, r1
 80026d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80026e8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	2b08      	cmp	r3, #8
 80026ee:	d006      	beq.n	80026fe <I2C_MasterRequestRead+0x3a>
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d003      	beq.n	80026fe <I2C_MasterRequestRead+0x3a>
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80026fc:	d108      	bne.n	8002710 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	e00b      	b.n	8002728 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002714:	2b11      	cmp	r3, #17
 8002716:	d107      	bne.n	8002728 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002726:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f000 f893 	bl	8002860 <I2C_WaitOnFlagUntilTimeout>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00d      	beq.n	800275c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800274a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800274e:	d103      	bne.n	8002758 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002756:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e079      	b.n	8002850 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002764:	d108      	bne.n	8002778 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002766:	897b      	ldrh	r3, [r7, #10]
 8002768:	b2db      	uxtb	r3, r3
 800276a:	f043 0301 	orr.w	r3, r3, #1
 800276e:	b2da      	uxtb	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	611a      	str	r2, [r3, #16]
 8002776:	e05f      	b.n	8002838 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002778:	897b      	ldrh	r3, [r7, #10]
 800277a:	11db      	asrs	r3, r3, #7
 800277c:	b2db      	uxtb	r3, r3
 800277e:	f003 0306 	and.w	r3, r3, #6
 8002782:	b2db      	uxtb	r3, r3
 8002784:	f063 030f 	orn	r3, r3, #15
 8002788:	b2da      	uxtb	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	4930      	ldr	r1, [pc, #192]	@ (8002858 <I2C_MasterRequestRead+0x194>)
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 f8dc 	bl	8002954 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e054      	b.n	8002850 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80027a6:	897b      	ldrh	r3, [r7, #10]
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	4929      	ldr	r1, [pc, #164]	@ (800285c <I2C_MasterRequestRead+0x198>)
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f000 f8cc 	bl	8002954 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e044      	b.n	8002850 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027c6:	2300      	movs	r3, #0
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027ea:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	9300      	str	r3, [sp, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f000 f831 	bl	8002860 <I2C_WaitOnFlagUntilTimeout>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00d      	beq.n	8002820 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800280e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002812:	d103      	bne.n	800281c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800281a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e017      	b.n	8002850 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002820:	897b      	ldrh	r3, [r7, #10]
 8002822:	11db      	asrs	r3, r3, #7
 8002824:	b2db      	uxtb	r3, r3
 8002826:	f003 0306 	and.w	r3, r3, #6
 800282a:	b2db      	uxtb	r3, r3
 800282c:	f063 030e 	orn	r3, r3, #14
 8002830:	b2da      	uxtb	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	4907      	ldr	r1, [pc, #28]	@ (800285c <I2C_MasterRequestRead+0x198>)
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 f888 	bl	8002954 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e000      	b.n	8002850 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	00010008 	.word	0x00010008
 800285c:	00010002 	.word	0x00010002

08002860 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	603b      	str	r3, [r7, #0]
 800286c:	4613      	mov	r3, r2
 800286e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002870:	e048      	b.n	8002904 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002878:	d044      	beq.n	8002904 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800287a:	f7fe faf3 	bl	8000e64 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	429a      	cmp	r2, r3
 8002888:	d302      	bcc.n	8002890 <I2C_WaitOnFlagUntilTimeout+0x30>
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d139      	bne.n	8002904 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	0c1b      	lsrs	r3, r3, #16
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b01      	cmp	r3, #1
 8002898:	d10d      	bne.n	80028b6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	43da      	mvns	r2, r3
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	4013      	ands	r3, r2
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	bf0c      	ite	eq
 80028ac:	2301      	moveq	r3, #1
 80028ae:	2300      	movne	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	461a      	mov	r2, r3
 80028b4:	e00c      	b.n	80028d0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	43da      	mvns	r2, r3
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	4013      	ands	r3, r2
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	bf0c      	ite	eq
 80028c8:	2301      	moveq	r3, #1
 80028ca:	2300      	movne	r3, #0
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	461a      	mov	r2, r3
 80028d0:	79fb      	ldrb	r3, [r7, #7]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d116      	bne.n	8002904 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2220      	movs	r2, #32
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f0:	f043 0220 	orr.w	r2, r3, #32
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e023      	b.n	800294c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	0c1b      	lsrs	r3, r3, #16
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b01      	cmp	r3, #1
 800290c:	d10d      	bne.n	800292a <I2C_WaitOnFlagUntilTimeout+0xca>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	43da      	mvns	r2, r3
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	4013      	ands	r3, r2
 800291a:	b29b      	uxth	r3, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	bf0c      	ite	eq
 8002920:	2301      	moveq	r3, #1
 8002922:	2300      	movne	r3, #0
 8002924:	b2db      	uxtb	r3, r3
 8002926:	461a      	mov	r2, r3
 8002928:	e00c      	b.n	8002944 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	43da      	mvns	r2, r3
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	4013      	ands	r3, r2
 8002936:	b29b      	uxth	r3, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	bf0c      	ite	eq
 800293c:	2301      	moveq	r3, #1
 800293e:	2300      	movne	r3, #0
 8002940:	b2db      	uxtb	r3, r3
 8002942:	461a      	mov	r2, r3
 8002944:	79fb      	ldrb	r3, [r7, #7]
 8002946:	429a      	cmp	r2, r3
 8002948:	d093      	beq.n	8002872 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
 8002960:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002962:	e071      	b.n	8002a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800296e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002972:	d123      	bne.n	80029bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002982:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800298c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2220      	movs	r2, #32
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a8:	f043 0204 	orr.w	r2, r3, #4
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e067      	b.n	8002a8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80029c2:	d041      	beq.n	8002a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029c4:	f7fe fa4e 	bl	8000e64 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d302      	bcc.n	80029da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d136      	bne.n	8002a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	0c1b      	lsrs	r3, r3, #16
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d10c      	bne.n	80029fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	43da      	mvns	r2, r3
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	4013      	ands	r3, r2
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	bf14      	ite	ne
 80029f6:	2301      	movne	r3, #1
 80029f8:	2300      	moveq	r3, #0
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	e00b      	b.n	8002a16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	43da      	mvns	r2, r3
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	bf14      	ite	ne
 8002a10:	2301      	movne	r3, #1
 8002a12:	2300      	moveq	r3, #0
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d016      	beq.n	8002a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a34:	f043 0220 	orr.w	r2, r3, #32
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e021      	b.n	8002a8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	0c1b      	lsrs	r3, r3, #16
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d10c      	bne.n	8002a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	695b      	ldr	r3, [r3, #20]
 8002a58:	43da      	mvns	r2, r3
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	bf14      	ite	ne
 8002a64:	2301      	movne	r3, #1
 8002a66:	2300      	moveq	r3, #0
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	e00b      	b.n	8002a84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	43da      	mvns	r2, r3
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	4013      	ands	r3, r2
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	bf14      	ite	ne
 8002a7e:	2301      	movne	r3, #1
 8002a80:	2300      	moveq	r3, #0
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f47f af6d 	bne.w	8002964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002aa0:	e034      	b.n	8002b0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 f8e3 	bl	8002c6e <I2C_IsAcknowledgeFailed>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e034      	b.n	8002b1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ab8:	d028      	beq.n	8002b0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aba:	f7fe f9d3 	bl	8000e64 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	68ba      	ldr	r2, [r7, #8]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d302      	bcc.n	8002ad0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d11d      	bne.n	8002b0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ada:	2b80      	cmp	r3, #128	@ 0x80
 8002adc:	d016      	beq.n	8002b0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af8:	f043 0220 	orr.w	r2, r3, #32
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e007      	b.n	8002b1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b16:	2b80      	cmp	r3, #128	@ 0x80
 8002b18:	d1c3      	bne.n	8002aa2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b30:	e034      	b.n	8002b9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 f89b 	bl	8002c6e <I2C_IsAcknowledgeFailed>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e034      	b.n	8002bac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b48:	d028      	beq.n	8002b9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b4a:	f7fe f98b 	bl	8000e64 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d302      	bcc.n	8002b60 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d11d      	bne.n	8002b9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	f003 0304 	and.w	r3, r3, #4
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d016      	beq.n	8002b9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2220      	movs	r2, #32
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b88:	f043 0220 	orr.w	r2, r3, #32
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e007      	b.n	8002bac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	f003 0304 	and.w	r3, r3, #4
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d1c3      	bne.n	8002b32 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bc0:	e049      	b.n	8002c56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	f003 0310 	and.w	r3, r3, #16
 8002bcc:	2b10      	cmp	r3, #16
 8002bce:	d119      	bne.n	8002c04 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f06f 0210 	mvn.w	r2, #16
 8002bd8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2220      	movs	r2, #32
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e030      	b.n	8002c66 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c04:	f7fe f92e 	bl	8000e64 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d302      	bcc.n	8002c1a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d11d      	bne.n	8002c56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c24:	2b40      	cmp	r3, #64	@ 0x40
 8002c26:	d016      	beq.n	8002c56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2220      	movs	r2, #32
 8002c32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c42:	f043 0220 	orr.w	r2, r3, #32
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e007      	b.n	8002c66 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c60:	2b40      	cmp	r3, #64	@ 0x40
 8002c62:	d1ae      	bne.n	8002bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c84:	d11b      	bne.n	8002cbe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c8e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2220      	movs	r2, #32
 8002c9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002caa:	f043 0204 	orr.w	r2, r3, #4
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e000      	b.n	8002cc0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bc80      	pop	{r7}
 8002cc8:	4770      	bx	lr

08002cca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002cca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ccc:	b08b      	sub	sp, #44	@ 0x2c
 8002cce:	af06      	add	r7, sp, #24
 8002cd0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e0f1      	b.n	8002ec0 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d106      	bne.n	8002cf6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f009 ffc9 	bl	800cc88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2203      	movs	r2, #3
 8002cfa:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f003 fa09 	bl	800611a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	603b      	str	r3, [r7, #0]
 8002d0e:	687e      	ldr	r6, [r7, #4]
 8002d10:	466d      	mov	r5, sp
 8002d12:	f106 0410 	add.w	r4, r6, #16
 8002d16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d1a:	6823      	ldr	r3, [r4, #0]
 8002d1c:	602b      	str	r3, [r5, #0]
 8002d1e:	1d33      	adds	r3, r6, #4
 8002d20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d22:	6838      	ldr	r0, [r7, #0]
 8002d24:	f003 f9d3 	bl	80060ce <USB_CoreInit>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d005      	beq.n	8002d3a <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2202      	movs	r2, #2
 8002d32:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e0c2      	b.n	8002ec0 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2100      	movs	r1, #0
 8002d40:	4618      	mov	r0, r3
 8002d42:	f003 fa04 	bl	800614e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d46:	2300      	movs	r3, #0
 8002d48:	73fb      	strb	r3, [r7, #15]
 8002d4a:	e040      	b.n	8002dce <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	1c5a      	adds	r2, r3, #1
 8002d52:	4613      	mov	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	440b      	add	r3, r1
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	2201      	movs	r2, #1
 8002d60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	1c5a      	adds	r2, r3, #1
 8002d68:	4613      	mov	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4413      	add	r3, r2
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	440b      	add	r3, r1
 8002d72:	7bfa      	ldrb	r2, [r7, #15]
 8002d74:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	1c5a      	adds	r2, r3, #1
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	440b      	add	r3, r1
 8002d86:	3303      	adds	r3, #3
 8002d88:	2200      	movs	r2, #0
 8002d8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d8c:	7bfa      	ldrb	r2, [r7, #15]
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	440b      	add	r3, r1
 8002d9a:	3338      	adds	r3, #56	@ 0x38
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002da0:	7bfa      	ldrb	r2, [r7, #15]
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	4613      	mov	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	440b      	add	r3, r1
 8002dae:	333c      	adds	r3, #60	@ 0x3c
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002db4:	7bfa      	ldrb	r2, [r7, #15]
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	4613      	mov	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	440b      	add	r3, r1
 8002dc2:	3340      	adds	r3, #64	@ 0x40
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dc8:	7bfb      	ldrb	r3, [r7, #15]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	73fb      	strb	r3, [r7, #15]
 8002dce:	7bfa      	ldrb	r2, [r7, #15]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d3b9      	bcc.n	8002d4c <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dd8:	2300      	movs	r3, #0
 8002dda:	73fb      	strb	r3, [r7, #15]
 8002ddc:	e044      	b.n	8002e68 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002dde:	7bfa      	ldrb	r2, [r7, #15]
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	4613      	mov	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	440b      	add	r3, r1
 8002dec:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8002df0:	2200      	movs	r2, #0
 8002df2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002df4:	7bfa      	ldrb	r2, [r7, #15]
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4413      	add	r3, r2
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	440b      	add	r3, r1
 8002e02:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002e06:	7bfa      	ldrb	r2, [r7, #15]
 8002e08:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e0a:	7bfa      	ldrb	r2, [r7, #15]
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	440b      	add	r3, r1
 8002e18:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e20:	7bfa      	ldrb	r2, [r7, #15]
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	440b      	add	r3, r1
 8002e2e:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e36:	7bfa      	ldrb	r2, [r7, #15]
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	440b      	add	r3, r1
 8002e44:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e4c:	7bfa      	ldrb	r2, [r7, #15]
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	4613      	mov	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4413      	add	r3, r2
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	440b      	add	r3, r1
 8002e5a:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e62:	7bfb      	ldrb	r3, [r7, #15]
 8002e64:	3301      	adds	r3, #1
 8002e66:	73fb      	strb	r3, [r7, #15]
 8002e68:	7bfa      	ldrb	r2, [r7, #15]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d3b5      	bcc.n	8002dde <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	603b      	str	r3, [r7, #0]
 8002e78:	687e      	ldr	r6, [r7, #4]
 8002e7a:	466d      	mov	r5, sp
 8002e7c:	f106 0410 	add.w	r4, r6, #16
 8002e80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e84:	6823      	ldr	r3, [r4, #0]
 8002e86:	602b      	str	r3, [r5, #0]
 8002e88:	1d33      	adds	r3, r6, #4
 8002e8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e8c:	6838      	ldr	r0, [r7, #0]
 8002e8e:	f003 f96a 	bl	8006166 <USB_DevInit>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d005      	beq.n	8002ea4 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e00d      	b.n	8002ec0 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f005 fbec 	bl	8008696 <USB_DevDisconnect>

  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3714      	adds	r7, #20
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ec8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d101      	bne.n	8002ede <HAL_PCD_Start+0x16>
 8002eda:	2302      	movs	r3, #2
 8002edc:	e016      	b.n	8002f0c <HAL_PCD_Start+0x44>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f003 f8ff 	bl	80060ee <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f00a f93b 	bl	800d16e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f005 fbc0 	bl	8008682 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b088      	sub	sp, #32
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f005 fbc2 	bl	80086aa <USB_ReadInterrupts>
 8002f26:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 fb1b 	bl	800356e <PCD_EP_ISR_Handler>

    return;
 8002f38:	e119      	b.n	800316e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d013      	beq.n	8002f6c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f56:	b292      	uxth	r2, r2
 8002f58:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f009 ff0e 	bl	800cd7e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002f62:	2100      	movs	r1, #0
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 f905 	bl	8003174 <HAL_PCD_SetAddress>

    return;
 8002f6a:	e100      	b.n	800316e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00c      	beq.n	8002f90 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002f88:	b292      	uxth	r2, r2
 8002f8a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002f8e:	e0ee      	b.n	800316e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00c      	beq.n	8002fb4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002fac:	b292      	uxth	r2, r2
 8002fae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002fb2:	e0dc      	b.n	800316e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d027      	beq.n	800300e <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0204 	bic.w	r2, r2, #4
 8002fd0:	b292      	uxth	r2, r2
 8002fd2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0208 	bic.w	r2, r2, #8
 8002fe8:	b292      	uxth	r2, r2
 8002fea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f009 fefe 	bl	800cdf0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003006:	b292      	uxth	r2, r2
 8003008:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800300c:	e0af      	b.n	800316e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 8083 	beq.w	8003120 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800301a:	2300      	movs	r3, #0
 800301c:	77fb      	strb	r3, [r7, #31]
 800301e:	e010      	b.n	8003042 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	461a      	mov	r2, r3
 8003026:	7ffb      	ldrb	r3, [r7, #31]
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	441a      	add	r2, r3
 800302c:	7ffb      	ldrb	r3, [r7, #31]
 800302e:	8812      	ldrh	r2, [r2, #0]
 8003030:	b292      	uxth	r2, r2
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	3320      	adds	r3, #32
 8003036:	443b      	add	r3, r7
 8003038:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800303c:	7ffb      	ldrb	r3, [r7, #31]
 800303e:	3301      	adds	r3, #1
 8003040:	77fb      	strb	r3, [r7, #31]
 8003042:	7ffb      	ldrb	r3, [r7, #31]
 8003044:	2b07      	cmp	r3, #7
 8003046:	d9eb      	bls.n	8003020 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003050:	b29a      	uxth	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0201 	orr.w	r2, r2, #1
 800305a:	b292      	uxth	r2, r2
 800305c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003068:	b29a      	uxth	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0201 	bic.w	r2, r2, #1
 8003072:	b292      	uxth	r2, r2
 8003074:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003078:	bf00      	nop
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003082:	b29b      	uxth	r3, r3
 8003084:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0f6      	beq.n	800307a <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003094:	b29a      	uxth	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800309e:	b292      	uxth	r2, r2
 80030a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80030a4:	2300      	movs	r3, #0
 80030a6:	77fb      	strb	r3, [r7, #31]
 80030a8:	e00f      	b.n	80030ca <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80030aa:	7ffb      	ldrb	r3, [r7, #31]
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6812      	ldr	r2, [r2, #0]
 80030b0:	4611      	mov	r1, r2
 80030b2:	7ffa      	ldrb	r2, [r7, #31]
 80030b4:	0092      	lsls	r2, r2, #2
 80030b6:	440a      	add	r2, r1
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	3320      	adds	r3, #32
 80030bc:	443b      	add	r3, r7
 80030be:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80030c2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80030c4:	7ffb      	ldrb	r3, [r7, #31]
 80030c6:	3301      	adds	r3, #1
 80030c8:	77fb      	strb	r3, [r7, #31]
 80030ca:	7ffb      	ldrb	r3, [r7, #31]
 80030cc:	2b07      	cmp	r3, #7
 80030ce:	d9ec      	bls.n	80030aa <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80030d8:	b29a      	uxth	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0208 	orr.w	r2, r2, #8
 80030e2:	b292      	uxth	r2, r2
 80030e4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030fa:	b292      	uxth	r2, r2
 80030fc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003108:	b29a      	uxth	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0204 	orr.w	r2, r2, #4
 8003112:	b292      	uxth	r2, r2
 8003114:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f009 fe4f 	bl	800cdbc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800311e:	e026      	b.n	800316e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00f      	beq.n	800314a <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003132:	b29a      	uxth	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800313c:	b292      	uxth	r2, r2
 800313e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f009 fe0d 	bl	800cd62 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003148:	e011      	b.n	800316e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00c      	beq.n	800316e <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800315c:	b29a      	uxth	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003166:	b292      	uxth	r2, r2
 8003168:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800316c:	bf00      	nop
  }
}
 800316e:	3720      	adds	r7, #32
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	460b      	mov	r3, r1
 800317e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003186:	2b01      	cmp	r3, #1
 8003188:	d101      	bne.n	800318e <HAL_PCD_SetAddress+0x1a>
 800318a:	2302      	movs	r3, #2
 800318c:	e013      	b.n	80031b6 <HAL_PCD_SetAddress+0x42>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	78fa      	ldrb	r2, [r7, #3]
 800319a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	78fa      	ldrb	r2, [r7, #3]
 80031a4:	4611      	mov	r1, r2
 80031a6:	4618      	mov	r0, r3
 80031a8:	f005 fa58 	bl	800865c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b084      	sub	sp, #16
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
 80031c6:	4608      	mov	r0, r1
 80031c8:	4611      	mov	r1, r2
 80031ca:	461a      	mov	r2, r3
 80031cc:	4603      	mov	r3, r0
 80031ce:	70fb      	strb	r3, [r7, #3]
 80031d0:	460b      	mov	r3, r1
 80031d2:	803b      	strh	r3, [r7, #0]
 80031d4:	4613      	mov	r3, r2
 80031d6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80031d8:	2300      	movs	r3, #0
 80031da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	da0e      	bge.n	8003202 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031e4:	78fb      	ldrb	r3, [r7, #3]
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	1c5a      	adds	r2, r3, #1
 80031ec:	4613      	mov	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	4413      	add	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2201      	movs	r2, #1
 80031fe:	705a      	strb	r2, [r3, #1]
 8003200:	e00e      	b.n	8003220 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003202:	78fb      	ldrb	r3, [r7, #3]
 8003204:	f003 0207 	and.w	r2, r3, #7
 8003208:	4613      	mov	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	4413      	add	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003220:	78fb      	ldrb	r3, [r7, #3]
 8003222:	f003 0307 	and.w	r3, r3, #7
 8003226:	b2da      	uxtb	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800322c:	883a      	ldrh	r2, [r7, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	78ba      	ldrb	r2, [r7, #2]
 8003236:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003238:	78bb      	ldrb	r3, [r7, #2]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d102      	bne.n	8003244 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800324a:	2b01      	cmp	r3, #1
 800324c:	d101      	bne.n	8003252 <HAL_PCD_EP_Open+0x94>
 800324e:	2302      	movs	r3, #2
 8003250:	e00e      	b.n	8003270 <HAL_PCD_EP_Open+0xb2>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68f9      	ldr	r1, [r7, #12]
 8003260:	4618      	mov	r0, r3
 8003262:	f002 ffa1 	bl	80061a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 800326e:	7afb      	ldrb	r3, [r7, #11]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	460b      	mov	r3, r1
 8003282:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003284:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003288:	2b00      	cmp	r3, #0
 800328a:	da0e      	bge.n	80032aa <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800328c:	78fb      	ldrb	r3, [r7, #3]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	1c5a      	adds	r2, r3, #1
 8003294:	4613      	mov	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	4413      	add	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2201      	movs	r2, #1
 80032a6:	705a      	strb	r2, [r3, #1]
 80032a8:	e00e      	b.n	80032c8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032aa:	78fb      	ldrb	r3, [r7, #3]
 80032ac:	f003 0207 	and.w	r2, r3, #7
 80032b0:	4613      	mov	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	4413      	add	r3, r2
 80032c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80032c8:	78fb      	ldrb	r3, [r7, #3]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	b2da      	uxtb	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <HAL_PCD_EP_Close+0x6a>
 80032de:	2302      	movs	r3, #2
 80032e0:	e00e      	b.n	8003300 <HAL_PCD_EP_Close+0x88>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68f9      	ldr	r1, [r7, #12]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f003 fb19 	bl	8006928 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	607a      	str	r2, [r7, #4]
 8003312:	603b      	str	r3, [r7, #0]
 8003314:	460b      	mov	r3, r1
 8003316:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003318:	7afb      	ldrb	r3, [r7, #11]
 800331a:	f003 0207 	and.w	r2, r3, #7
 800331e:	4613      	mov	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4413      	add	r3, r2
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	4413      	add	r3, r2
 800332e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	2200      	movs	r2, #0
 8003340:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	2200      	movs	r2, #0
 8003346:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003348:	7afb      	ldrb	r3, [r7, #11]
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	b2da      	uxtb	r2, r3
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6979      	ldr	r1, [r7, #20]
 800335a:	4618      	mov	r0, r3
 800335c:	f003 fcd0 	bl	8006d00 <USB_EPStartXfer>

  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3718      	adds	r7, #24
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
 8003372:	460b      	mov	r3, r1
 8003374:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003376:	78fb      	ldrb	r3, [r7, #3]
 8003378:	f003 0207 	and.w	r2, r3, #7
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	4613      	mov	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	440b      	add	r3, r1
 8003388:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800338c:	681b      	ldr	r3, [r3, #0]
}
 800338e:	4618      	mov	r0, r3
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	bc80      	pop	{r7}
 8003396:	4770      	bx	lr

08003398 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	607a      	str	r2, [r7, #4]
 80033a2:	603b      	str	r3, [r7, #0]
 80033a4:	460b      	mov	r3, r1
 80033a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033a8:	7afb      	ldrb	r3, [r7, #11]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	1c5a      	adds	r2, r3, #1
 80033b0:	4613      	mov	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	4413      	add	r3, r2
 80033bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	2200      	movs	r2, #0
 80033dc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	2201      	movs	r2, #1
 80033e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033e4:	7afb      	ldrb	r3, [r7, #11]
 80033e6:	f003 0307 	and.w	r3, r3, #7
 80033ea:	b2da      	uxtb	r2, r3
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6979      	ldr	r1, [r7, #20]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f003 fc82 	bl	8006d00 <USB_EPStartXfer>

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b084      	sub	sp, #16
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
 800340e:	460b      	mov	r3, r1
 8003410:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003412:	78fb      	ldrb	r3, [r7, #3]
 8003414:	f003 0207 	and.w	r2, r3, #7
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	429a      	cmp	r2, r3
 800341e:	d901      	bls.n	8003424 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e04c      	b.n	80034be <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003424:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003428:	2b00      	cmp	r3, #0
 800342a:	da0e      	bge.n	800344a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800342c:	78fb      	ldrb	r3, [r7, #3]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	1c5a      	adds	r2, r3, #1
 8003434:	4613      	mov	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	4413      	add	r3, r2
 8003440:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2201      	movs	r2, #1
 8003446:	705a      	strb	r2, [r3, #1]
 8003448:	e00c      	b.n	8003464 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800344a:	78fa      	ldrb	r2, [r7, #3]
 800344c:	4613      	mov	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4413      	add	r3, r2
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	4413      	add	r3, r2
 800345c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2201      	movs	r2, #1
 8003468:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800346a:	78fb      	ldrb	r3, [r7, #3]
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	b2da      	uxtb	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800347c:	2b01      	cmp	r3, #1
 800347e:	d101      	bne.n	8003484 <HAL_PCD_EP_SetStall+0x7e>
 8003480:	2302      	movs	r3, #2
 8003482:	e01c      	b.n	80034be <HAL_PCD_EP_SetStall+0xb8>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68f9      	ldr	r1, [r7, #12]
 8003492:	4618      	mov	r0, r3
 8003494:	f004 ffe5 	bl	8008462 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003498:	78fb      	ldrb	r3, [r7, #3]
 800349a:	f003 0307 	and.w	r3, r3, #7
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d108      	bne.n	80034b4 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 80034ac:	4619      	mov	r1, r3
 80034ae:	4610      	mov	r0, r2
 80034b0:	f005 f90a 	bl	80086c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b084      	sub	sp, #16
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
 80034ce:	460b      	mov	r3, r1
 80034d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80034d2:	78fb      	ldrb	r3, [r7, #3]
 80034d4:	f003 020f 	and.w	r2, r3, #15
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d901      	bls.n	80034e4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e040      	b.n	8003566 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	da0e      	bge.n	800350a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034ec:	78fb      	ldrb	r3, [r7, #3]
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	1c5a      	adds	r2, r3, #1
 80034f4:	4613      	mov	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	4413      	add	r3, r2
 8003500:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2201      	movs	r2, #1
 8003506:	705a      	strb	r2, [r3, #1]
 8003508:	e00e      	b.n	8003528 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800350a:	78fb      	ldrb	r3, [r7, #3]
 800350c:	f003 0207 	and.w	r2, r3, #7
 8003510:	4613      	mov	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	4413      	add	r3, r2
 8003520:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800352e:	78fb      	ldrb	r3, [r7, #3]
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	b2da      	uxtb	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003540:	2b01      	cmp	r3, #1
 8003542:	d101      	bne.n	8003548 <HAL_PCD_EP_ClrStall+0x82>
 8003544:	2302      	movs	r3, #2
 8003546:	e00e      	b.n	8003566 <HAL_PCD_EP_ClrStall+0xa0>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68f9      	ldr	r1, [r7, #12]
 8003556:	4618      	mov	r0, r3
 8003558:	f004 ffd3 	bl	8008502 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b096      	sub	sp, #88	@ 0x58
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003576:	e3be      	b.n	8003cf6 <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003580:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003584:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003588:	b2db      	uxtb	r3, r3
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003592:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003596:	2b00      	cmp	r3, #0
 8003598:	f040 8178 	bne.w	800388c <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800359c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80035a0:	f003 0310 	and.w	r3, r3, #16
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d151      	bne.n	800364c <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	881b      	ldrh	r3, [r3, #0]
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80035b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035b8:	81fb      	strh	r3, [r7, #14]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	89fb      	ldrh	r3, [r7, #14]
 80035c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	3328      	adds	r3, #40	@ 0x28
 80035d0:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035da:	b29b      	uxth	r3, r3
 80035dc:	461a      	mov	r2, r3
 80035de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	4413      	add	r3, r2
 80035e6:	3302      	adds	r3, #2
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6812      	ldr	r2, [r2, #0]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80035f4:	881b      	ldrh	r3, [r3, #0]
 80035f6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80035fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035fc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80035fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003600:	695a      	ldr	r2, [r3, #20]
 8003602:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	441a      	add	r2, r3
 8003608:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800360a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800360c:	2100      	movs	r1, #0
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f009 fb8d 	bl	800cd2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 836a 	beq.w	8003cf6 <PCD_EP_ISR_Handler+0x788>
 8003622:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	2b00      	cmp	r3, #0
 8003628:	f040 8365 	bne.w	8003cf6 <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003632:	b2db      	uxtb	r3, r3
 8003634:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003638:	b2da      	uxtb	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800364a:	e354      	b.n	8003cf6 <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003652:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	881b      	ldrh	r3, [r3, #0]
 800365a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800365e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003662:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003666:	2b00      	cmp	r3, #0
 8003668:	d034      	beq.n	80036d4 <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003672:	b29b      	uxth	r3, r3
 8003674:	461a      	mov	r2, r3
 8003676:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	4413      	add	r3, r2
 800367e:	3306      	adds	r3, #6
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6812      	ldr	r2, [r2, #0]
 8003686:	4413      	add	r3, r2
 8003688:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800368c:	881b      	ldrh	r3, [r3, #0]
 800368e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003692:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003694:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6818      	ldr	r0, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 80036a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036a2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80036a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036a6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	f005 f85d 	bl	8008768 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	881b      	ldrh	r3, [r3, #0]
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80036ba:	4013      	ands	r3, r2
 80036bc:	823b      	strh	r3, [r7, #16]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	8a3a      	ldrh	r2, [r7, #16]
 80036c4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80036c8:	b292      	uxth	r2, r2
 80036ca:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f009 fb01 	bl	800ccd4 <HAL_PCD_SetupStageCallback>
 80036d2:	e310      	b.n	8003cf6 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80036d4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f280 830c 	bge.w	8003cf6 <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	881b      	ldrh	r3, [r3, #0]
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80036ea:	4013      	ands	r3, r2
 80036ec:	83fb      	strh	r3, [r7, #30]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	8bfa      	ldrh	r2, [r7, #30]
 80036f4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80036f8:	b292      	uxth	r2, r2
 80036fa:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003704:	b29b      	uxth	r3, r3
 8003706:	461a      	mov	r2, r3
 8003708:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	4413      	add	r3, r2
 8003710:	3306      	adds	r3, #6
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6812      	ldr	r2, [r2, #0]
 8003718:	4413      	add	r3, r2
 800371a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003724:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003726:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003728:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d019      	beq.n	8003764 <PCD_EP_ISR_Handler+0x1f6>
 8003730:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d015      	beq.n	8003764 <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6818      	ldr	r0, [r3, #0]
 800373c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800373e:	6959      	ldr	r1, [r3, #20]
 8003740:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003742:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003744:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003746:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003748:	b29b      	uxth	r3, r3
 800374a:	f005 f80d 	bl	8008768 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800374e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003750:	695a      	ldr	r2, [r3, #20]
 8003752:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	441a      	add	r2, r3
 8003758:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800375a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800375c:	2100      	movs	r1, #0
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f009 faca 	bl	800ccf8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800376e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003772:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003776:	2b00      	cmp	r3, #0
 8003778:	f040 82bd 	bne.w	8003cf6 <PCD_EP_ISR_Handler+0x788>
 800377c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003780:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003784:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003788:	f000 82b5 	beq.w	8003cf6 <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	61bb      	str	r3, [r7, #24]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800379a:	b29b      	uxth	r3, r3
 800379c:	461a      	mov	r2, r3
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	4413      	add	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80037aa:	617b      	str	r3, [r7, #20]
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	881b      	ldrh	r3, [r3, #0]
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	801a      	strh	r2, [r3, #0]
 80037bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80037c2:	d91d      	bls.n	8003800 <PCD_EP_ISR_Handler+0x292>
 80037c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	095b      	lsrs	r3, r3, #5
 80037ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80037cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	f003 031f 	and.w	r3, r3, #31
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d102      	bne.n	80037de <PCD_EP_ISR_Handler+0x270>
 80037d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037da:	3b01      	subs	r3, #1
 80037dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	881b      	ldrh	r3, [r3, #0]
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	029b      	lsls	r3, r3, #10
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	4313      	orrs	r3, r2
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	801a      	strh	r2, [r3, #0]
 80037fe:	e026      	b.n	800384e <PCD_EP_ISR_Handler+0x2e0>
 8003800:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d10a      	bne.n	800381e <PCD_EP_ISR_Handler+0x2b0>
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	881b      	ldrh	r3, [r3, #0]
 800380c:	b29b      	uxth	r3, r3
 800380e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003812:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003816:	b29a      	uxth	r2, r3
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	801a      	strh	r2, [r3, #0]
 800381c:	e017      	b.n	800384e <PCD_EP_ISR_Handler+0x2e0>
 800381e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	085b      	lsrs	r3, r3, #1
 8003824:	647b      	str	r3, [r7, #68]	@ 0x44
 8003826:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d002      	beq.n	8003838 <PCD_EP_ISR_Handler+0x2ca>
 8003832:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003834:	3301      	adds	r3, #1
 8003836:	647b      	str	r3, [r7, #68]	@ 0x44
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	b29a      	uxth	r2, r3
 800383e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003840:	b29b      	uxth	r3, r3
 8003842:	029b      	lsls	r3, r3, #10
 8003844:	b29b      	uxth	r3, r3
 8003846:	4313      	orrs	r3, r2
 8003848:	b29a      	uxth	r2, r3
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	881b      	ldrh	r3, [r3, #0]
 8003854:	b29b      	uxth	r3, r3
 8003856:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800385a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800385e:	827b      	strh	r3, [r7, #18]
 8003860:	8a7b      	ldrh	r3, [r7, #18]
 8003862:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003866:	827b      	strh	r3, [r7, #18]
 8003868:	8a7b      	ldrh	r3, [r7, #18]
 800386a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800386e:	827b      	strh	r3, [r7, #18]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	8a7b      	ldrh	r3, [r7, #18]
 8003876:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800387a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800387e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003882:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003886:	b29b      	uxth	r3, r3
 8003888:	8013      	strh	r3, [r2, #0]
 800388a:	e234      	b.n	8003cf6 <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	461a      	mov	r2, r3
 8003892:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	4413      	add	r3, r2
 800389a:	881b      	ldrh	r3, [r3, #0]
 800389c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80038a0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f280 80fc 	bge.w	8003aa2 <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	461a      	mov	r2, r3
 80038b0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	4413      	add	r3, r2
 80038b8:	881b      	ldrh	r3, [r3, #0]
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80038c0:	4013      	ands	r3, r2
 80038c2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	461a      	mov	r2, r3
 80038cc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4413      	add	r3, r2
 80038d4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80038d8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80038dc:	b292      	uxth	r2, r2
 80038de:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80038e0:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80038e4:	4613      	mov	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4413      	add	r3, r2
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	4413      	add	r3, r2
 80038f4:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80038f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038f8:	7b1b      	ldrb	r3, [r3, #12]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d125      	bne.n	800394a <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003906:	b29b      	uxth	r3, r3
 8003908:	461a      	mov	r2, r3
 800390a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	4413      	add	r3, r2
 8003912:	3306      	adds	r3, #6
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6812      	ldr	r2, [r2, #0]
 800391a:	4413      	add	r3, r2
 800391c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003920:	881b      	ldrh	r3, [r3, #0]
 8003922:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003926:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800392a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800392e:	2b00      	cmp	r3, #0
 8003930:	f000 8092 	beq.w	8003a58 <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6818      	ldr	r0, [r3, #0]
 8003938:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800393a:	6959      	ldr	r1, [r3, #20]
 800393c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800393e:	88da      	ldrh	r2, [r3, #6]
 8003940:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003944:	f004 ff10 	bl	8008768 <USB_ReadPMA>
 8003948:	e086      	b.n	8003a58 <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800394a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800394c:	78db      	ldrb	r3, [r3, #3]
 800394e:	2b02      	cmp	r3, #2
 8003950:	d10a      	bne.n	8003968 <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003952:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003956:	461a      	mov	r2, r3
 8003958:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f9d9 	bl	8003d12 <HAL_PCD_EP_DB_Receive>
 8003960:	4603      	mov	r3, r0
 8003962:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003966:	e077      	b.n	8003a58 <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	461a      	mov	r2, r3
 800396e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	4413      	add	r3, r2
 8003976:	881b      	ldrh	r3, [r3, #0]
 8003978:	b29b      	uxth	r3, r3
 800397a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800397e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003982:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	461a      	mov	r2, r3
 800398c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	441a      	add	r2, r3
 8003994:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003998:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800399c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039a4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	461a      	mov	r2, r3
 80039b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	881b      	ldrh	r3, [r3, #0]
 80039bc:	b29b      	uxth	r3, r3
 80039be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d024      	beq.n	8003a10 <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	461a      	mov	r2, r3
 80039d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	4413      	add	r3, r2
 80039da:	3302      	adds	r3, #2
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	6812      	ldr	r2, [r2, #0]
 80039e2:	4413      	add	r3, r2
 80039e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039ee:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80039f2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d02e      	beq.n	8003a58 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6818      	ldr	r0, [r3, #0]
 80039fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a00:	6959      	ldr	r1, [r3, #20]
 8003a02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a04:	891a      	ldrh	r2, [r3, #8]
 8003a06:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003a0a:	f004 fead 	bl	8008768 <USB_ReadPMA>
 8003a0e:	e023      	b.n	8003a58 <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	4413      	add	r3, r2
 8003a24:	3306      	adds	r3, #6
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6812      	ldr	r2, [r2, #0]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003a32:	881b      	ldrh	r3, [r3, #0]
 8003a34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a38:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003a3c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d009      	beq.n	8003a58 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6818      	ldr	r0, [r3, #0]
 8003a48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a4a:	6959      	ldr	r1, [r3, #20]
 8003a4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a4e:	895a      	ldrh	r2, [r3, #10]
 8003a50:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003a54:	f004 fe88 	bl	8008768 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003a58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a5a:	69da      	ldr	r2, [r3, #28]
 8003a5c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003a60:	441a      	add	r2, r3
 8003a62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a64:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003a66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a68:	695a      	ldr	r2, [r3, #20]
 8003a6a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003a6e:	441a      	add	r2, r3
 8003a70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a72:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003a74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d005      	beq.n	8003a88 <PCD_EP_ISR_Handler+0x51a>
 8003a7c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003a80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d206      	bcs.n	8003a96 <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003a88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f009 f932 	bl	800ccf8 <HAL_PCD_DataOutStageCallback>
 8003a94:	e005      	b.n	8003aa2 <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f003 f92f 	bl	8006d00 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003aa2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 8123 	beq.w	8003cf6 <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 8003ab0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003ab4:	1c5a      	adds	r2, r3, #1
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	881b      	ldrh	r3, [r3, #0]
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ade:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	441a      	add	r2, r3
 8003af0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003af4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003af8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003b00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b02:	78db      	ldrb	r3, [r3, #3]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	f040 80a2 	bne.w	8003c4e <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 8003b0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003b10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b12:	7b1b      	ldrb	r3, [r3, #12]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 8093 	beq.w	8003c40 <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003b1a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d046      	beq.n	8003bb4 <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b28:	785b      	ldrb	r3, [r3, #1]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d126      	bne.n	8003b7c <PCD_EP_ISR_Handler+0x60e>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	461a      	mov	r2, r3
 8003b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b42:	4413      	add	r3, r2
 8003b44:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	011a      	lsls	r2, r3, #4
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4e:	4413      	add	r3, r2
 8003b50:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003b54:	623b      	str	r3, [r7, #32]
 8003b56:	6a3b      	ldr	r3, [r7, #32]
 8003b58:	881b      	ldrh	r3, [r3, #0]
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	801a      	strh	r2, [r3, #0]
 8003b66:	6a3b      	ldr	r3, [r7, #32]
 8003b68:	881b      	ldrh	r3, [r3, #0]
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	801a      	strh	r2, [r3, #0]
 8003b7a:	e061      	b.n	8003c40 <PCD_EP_ISR_Handler+0x6d2>
 8003b7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b7e:	785b      	ldrb	r3, [r3, #1]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d15d      	bne.n	8003c40 <PCD_EP_ISR_Handler+0x6d2>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	461a      	mov	r2, r3
 8003b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b98:	4413      	add	r3, r2
 8003b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	011a      	lsls	r2, r3, #4
 8003ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ba4:	4413      	add	r3, r2
 8003ba6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003baa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bae:	2200      	movs	r2, #0
 8003bb0:	801a      	strh	r2, [r3, #0]
 8003bb2:	e045      	b.n	8003c40 <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bbc:	785b      	ldrb	r3, [r3, #1]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d126      	bne.n	8003c10 <PCD_EP_ISR_Handler+0x6a2>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bd6:	4413      	add	r3, r2
 8003bd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	011a      	lsls	r2, r3, #4
 8003be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003be2:	4413      	add	r3, r2
 8003be4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003be8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf8:	801a      	strh	r2, [r3, #0]
 8003bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bfc:	881b      	ldrh	r3, [r3, #0]
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c0c:	801a      	strh	r2, [r3, #0]
 8003c0e:	e017      	b.n	8003c40 <PCD_EP_ISR_Handler+0x6d2>
 8003c10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c12:	785b      	ldrb	r3, [r3, #1]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d113      	bne.n	8003c40 <PCD_EP_ISR_Handler+0x6d2>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	461a      	mov	r2, r3
 8003c24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c26:	4413      	add	r3, r2
 8003c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	011a      	lsls	r2, r3, #4
 8003c30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c32:	4413      	add	r3, r2
 8003c34:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003c38:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	4619      	mov	r1, r3
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f009 f871 	bl	800cd2e <HAL_PCD_DataInStageCallback>
 8003c4c:	e053      	b.n	8003cf6 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003c4e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d146      	bne.n	8003ce8 <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	461a      	mov	r2, r3
 8003c66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	4413      	add	r3, r2
 8003c6e:	3302      	adds	r3, #2
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6812      	ldr	r2, [r2, #0]
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c7c:	881b      	ldrh	r3, [r3, #0]
 8003c7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c82:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003c86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c88:	699a      	ldr	r2, [r3, #24]
 8003c8a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d907      	bls.n	8003ca2 <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 8003c92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c94:	699a      	ldr	r2, [r3, #24]
 8003c96:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003c9a:	1ad2      	subs	r2, r2, r3
 8003c9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c9e:	619a      	str	r2, [r3, #24]
 8003ca0:	e002      	b.n	8003ca8 <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 8003ca2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003ca8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d106      	bne.n	8003cbe <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003cb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f009 f839 	bl	800cd2e <HAL_PCD_DataInStageCallback>
 8003cbc:	e01b      	b.n	8003cf6 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003cbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cc0:	695a      	ldr	r2, [r3, #20]
 8003cc2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003cc6:	441a      	add	r2, r3
 8003cc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cca:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003ccc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cce:	69da      	ldr	r2, [r3, #28]
 8003cd0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003cd4:	441a      	add	r2, r3
 8003cd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cd8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f003 f80d 	bl	8006d00 <USB_EPStartXfer>
 8003ce6:	e006      	b.n	8003cf6 <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003ce8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003cec:	461a      	mov	r2, r3
 8003cee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 f91b 	bl	8003f2c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	b21b      	sxth	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f6ff ac38 	blt.w	8003578 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3758      	adds	r7, #88	@ 0x58
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b088      	sub	sp, #32
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	60f8      	str	r0, [r7, #12]
 8003d1a:	60b9      	str	r1, [r7, #8]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d20:	88fb      	ldrh	r3, [r7, #6]
 8003d22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d07e      	beq.n	8003e28 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	461a      	mov	r2, r3
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	4413      	add	r3, r2
 8003d3e:	3302      	adds	r3, #2
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	6812      	ldr	r2, [r2, #0]
 8003d46:	4413      	add	r3, r2
 8003d48:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d52:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	699a      	ldr	r2, [r3, #24]
 8003d58:	8b7b      	ldrh	r3, [r7, #26]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d306      	bcc.n	8003d6c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	699a      	ldr	r2, [r3, #24]
 8003d62:	8b7b      	ldrh	r3, [r7, #26]
 8003d64:	1ad2      	subs	r2, r2, r3
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	619a      	str	r2, [r3, #24]
 8003d6a:	e002      	b.n	8003d72 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d123      	bne.n	8003dc2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d94:	833b      	strh	r3, [r7, #24]
 8003d96:	8b3b      	ldrh	r3, [r7, #24]
 8003d98:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003d9c:	833b      	strh	r3, [r7, #24]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	461a      	mov	r2, r3
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	441a      	add	r2, r3
 8003dac:	8b3b      	ldrh	r3, [r7, #24]
 8003dae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003db2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003db6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003dc2:	88fb      	ldrh	r3, [r7, #6]
 8003dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d01f      	beq.n	8003e0c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4413      	add	r3, r2
 8003dda:	881b      	ldrh	r3, [r3, #0]
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003de2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003de6:	82fb      	strh	r3, [r7, #22]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	461a      	mov	r2, r3
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	441a      	add	r2, r3
 8003df6:	8afb      	ldrh	r3, [r7, #22]
 8003df8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003dfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e04:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003e0c:	8b7b      	ldrh	r3, [r7, #26]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 8087 	beq.w	8003f22 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6818      	ldr	r0, [r3, #0]
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	6959      	ldr	r1, [r3, #20]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	891a      	ldrh	r2, [r3, #8]
 8003e20:	8b7b      	ldrh	r3, [r7, #26]
 8003e22:	f004 fca1 	bl	8008768 <USB_ReadPMA>
 8003e26:	e07c      	b.n	8003f22 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	461a      	mov	r2, r3
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	4413      	add	r3, r2
 8003e3c:	3306      	adds	r3, #6
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	6812      	ldr	r2, [r2, #0]
 8003e44:	4413      	add	r3, r2
 8003e46:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e4a:	881b      	ldrh	r3, [r3, #0]
 8003e4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e50:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	699a      	ldr	r2, [r3, #24]
 8003e56:	8b7b      	ldrh	r3, [r7, #26]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d306      	bcc.n	8003e6a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	699a      	ldr	r2, [r3, #24]
 8003e60:	8b7b      	ldrh	r3, [r7, #26]
 8003e62:	1ad2      	subs	r2, r2, r3
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	619a      	str	r2, [r3, #24]
 8003e68:	e002      	b.n	8003e70 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d123      	bne.n	8003ec0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	881b      	ldrh	r3, [r3, #0]
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e92:	83fb      	strh	r3, [r7, #30]
 8003e94:	8bfb      	ldrh	r3, [r7, #30]
 8003e96:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003e9a:	83fb      	strh	r3, [r7, #30]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	441a      	add	r2, r3
 8003eaa:	8bfb      	ldrh	r3, [r7, #30]
 8003eac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003eb0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003eb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003eb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003ec0:	88fb      	ldrh	r3, [r7, #6]
 8003ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d11f      	bne.n	8003f0a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4413      	add	r3, r2
 8003ed8:	881b      	ldrh	r3, [r3, #0]
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ee0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ee4:	83bb      	strh	r3, [r7, #28]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	461a      	mov	r2, r3
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	441a      	add	r2, r3
 8003ef4:	8bbb      	ldrh	r3, [r7, #28]
 8003ef6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003efa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003efe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f02:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003f0a:	8b7b      	ldrh	r3, [r7, #26]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d008      	beq.n	8003f22 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6818      	ldr	r0, [r3, #0]
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	6959      	ldr	r1, [r3, #20]
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	895a      	ldrh	r2, [r3, #10]
 8003f1c:	8b7b      	ldrh	r3, [r7, #26]
 8003f1e:	f004 fc23 	bl	8008768 <USB_ReadPMA>
    }
  }

  return count;
 8003f22:	8b7b      	ldrh	r3, [r7, #26]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3720      	adds	r7, #32
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b0a4      	sub	sp, #144	@ 0x90
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	4613      	mov	r3, r2
 8003f38:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003f3a:	88fb      	ldrh	r3, [r7, #6]
 8003f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 81dd 	beq.w	8004300 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	461a      	mov	r2, r3
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	4413      	add	r3, r2
 8003f5a:	3302      	adds	r3, #2
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	6812      	ldr	r2, [r2, #0]
 8003f62:	4413      	add	r3, r2
 8003f64:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f6e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	699a      	ldr	r2, [r3, #24]
 8003f76:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d907      	bls.n	8003f8e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	699a      	ldr	r2, [r3, #24]
 8003f82:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003f86:	1ad2      	subs	r2, r2, r3
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	619a      	str	r2, [r3, #24]
 8003f8c:	e002      	b.n	8003f94 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	2200      	movs	r2, #0
 8003f92:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f040 80b9 	bne.w	8004110 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	785b      	ldrb	r3, [r3, #1]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d126      	bne.n	8003ff4 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fba:	4413      	add	r3, r2
 8003fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	011a      	lsls	r2, r3, #4
 8003fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fd0:	881b      	ldrh	r3, [r3, #0]
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fdc:	801a      	strh	r2, [r3, #0]
 8003fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe0:	881b      	ldrh	r3, [r3, #0]
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fe8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff0:	801a      	strh	r2, [r3, #0]
 8003ff2:	e01a      	b.n	800402a <HAL_PCD_EP_DB_Transmit+0xfe>
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	785b      	ldrb	r3, [r3, #1]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d116      	bne.n	800402a <HAL_PCD_EP_DB_Transmit+0xfe>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	637b      	str	r3, [r7, #52]	@ 0x34
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800400a:	b29b      	uxth	r3, r3
 800400c:	461a      	mov	r2, r3
 800400e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004010:	4413      	add	r3, r2
 8004012:	637b      	str	r3, [r7, #52]	@ 0x34
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	011a      	lsls	r2, r3, #4
 800401a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800401c:	4413      	add	r3, r2
 800401e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004022:	633b      	str	r3, [r7, #48]	@ 0x30
 8004024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004026:	2200      	movs	r2, #0
 8004028:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	785b      	ldrb	r3, [r3, #1]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d126      	bne.n	8004086 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	61fb      	str	r3, [r7, #28]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004046:	b29b      	uxth	r3, r3
 8004048:	461a      	mov	r2, r3
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	4413      	add	r3, r2
 800404e:	61fb      	str	r3, [r7, #28]
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	011a      	lsls	r2, r3, #4
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	4413      	add	r3, r2
 800405a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800405e:	61bb      	str	r3, [r7, #24]
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	881b      	ldrh	r3, [r3, #0]
 8004064:	b29b      	uxth	r3, r3
 8004066:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800406a:	b29a      	uxth	r2, r3
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	801a      	strh	r2, [r3, #0]
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	881b      	ldrh	r3, [r3, #0]
 8004074:	b29b      	uxth	r3, r3
 8004076:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800407a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800407e:	b29a      	uxth	r2, r3
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	801a      	strh	r2, [r3, #0]
 8004084:	e017      	b.n	80040b6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	785b      	ldrb	r3, [r3, #1]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d113      	bne.n	80040b6 <HAL_PCD_EP_DB_Transmit+0x18a>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004096:	b29b      	uxth	r3, r3
 8004098:	461a      	mov	r2, r3
 800409a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409c:	4413      	add	r3, r2
 800409e:	627b      	str	r3, [r7, #36]	@ 0x24
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	011a      	lsls	r2, r3, #4
 80040a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a8:	4413      	add	r3, r2
 80040aa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80040ae:	623b      	str	r3, [r7, #32]
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	2200      	movs	r2, #0
 80040b4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	4619      	mov	r1, r3
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f008 fe36 	bl	800cd2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80040c2:	88fb      	ldrh	r3, [r7, #6]
 80040c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f000 82fc 	beq.w	80046c6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	461a      	mov	r2, r3
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4413      	add	r3, r2
 80040dc:	881b      	ldrh	r3, [r3, #0]
 80040de:	b29b      	uxth	r3, r3
 80040e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040e8:	82fb      	strh	r3, [r7, #22]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	461a      	mov	r2, r3
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	441a      	add	r2, r3
 80040f8:	8afb      	ldrh	r3, [r7, #22]
 80040fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004102:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004106:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800410a:	b29b      	uxth	r3, r3
 800410c:	8013      	strh	r3, [r2, #0]
 800410e:	e2da      	b.n	80046c6 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004110:	88fb      	ldrh	r3, [r7, #6]
 8004112:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d021      	beq.n	800415e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	461a      	mov	r2, r3
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4413      	add	r3, r2
 8004128:	881b      	ldrh	r3, [r3, #0]
 800412a:	b29b      	uxth	r3, r3
 800412c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004130:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004134:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	461a      	mov	r2, r3
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	441a      	add	r2, r3
 8004146:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800414a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800414e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004152:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004156:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800415a:	b29b      	uxth	r3, r3
 800415c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004164:	2b01      	cmp	r3, #1
 8004166:	f040 82ae 	bne.w	80046c6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	695a      	ldr	r2, [r3, #20]
 800416e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004172:	441a      	add	r2, r3
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	69da      	ldr	r2, [r3, #28]
 800417c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004180:	441a      	add	r2, r3
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	6a1a      	ldr	r2, [r3, #32]
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	429a      	cmp	r2, r3
 8004190:	d30b      	bcc.n	80041aa <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	6a1a      	ldr	r2, [r3, #32]
 800419e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041a2:	1ad2      	subs	r2, r2, r3
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	621a      	str	r2, [r3, #32]
 80041a8:	e017      	b.n	80041da <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d108      	bne.n	80041c4 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80041b2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80041b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80041c2:	e00a      	b.n	80041da <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	2200      	movs	r2, #0
 80041d8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	785b      	ldrb	r3, [r3, #1]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d165      	bne.n	80042ae <HAL_PCD_EP_DB_Transmit+0x382>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	461a      	mov	r2, r3
 80041f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041f6:	4413      	add	r3, r2
 80041f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	011a      	lsls	r2, r3, #4
 8004200:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004202:	4413      	add	r3, r2
 8004204:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004208:	63bb      	str	r3, [r7, #56]	@ 0x38
 800420a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	b29b      	uxth	r3, r3
 8004210:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004214:	b29a      	uxth	r2, r3
 8004216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004218:	801a      	strh	r2, [r3, #0]
 800421a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800421e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004220:	d91d      	bls.n	800425e <HAL_PCD_EP_DB_Transmit+0x332>
 8004222:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004226:	095b      	lsrs	r3, r3, #5
 8004228:	64bb      	str	r3, [r7, #72]	@ 0x48
 800422a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800422e:	f003 031f 	and.w	r3, r3, #31
 8004232:	2b00      	cmp	r3, #0
 8004234:	d102      	bne.n	800423c <HAL_PCD_EP_DB_Transmit+0x310>
 8004236:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004238:	3b01      	subs	r3, #1
 800423a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800423c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800423e:	881b      	ldrh	r3, [r3, #0]
 8004240:	b29a      	uxth	r2, r3
 8004242:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004244:	b29b      	uxth	r3, r3
 8004246:	029b      	lsls	r3, r3, #10
 8004248:	b29b      	uxth	r3, r3
 800424a:	4313      	orrs	r3, r2
 800424c:	b29b      	uxth	r3, r3
 800424e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004252:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004256:	b29a      	uxth	r2, r3
 8004258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800425a:	801a      	strh	r2, [r3, #0]
 800425c:	e044      	b.n	80042e8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800425e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10a      	bne.n	800427c <HAL_PCD_EP_DB_Transmit+0x350>
 8004266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004268:	881b      	ldrh	r3, [r3, #0]
 800426a:	b29b      	uxth	r3, r3
 800426c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004270:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004274:	b29a      	uxth	r2, r3
 8004276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004278:	801a      	strh	r2, [r3, #0]
 800427a:	e035      	b.n	80042e8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800427c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004280:	085b      	lsrs	r3, r3, #1
 8004282:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004284:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b00      	cmp	r3, #0
 800428e:	d002      	beq.n	8004296 <HAL_PCD_EP_DB_Transmit+0x36a>
 8004290:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004292:	3301      	adds	r3, #1
 8004294:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004298:	881b      	ldrh	r3, [r3, #0]
 800429a:	b29a      	uxth	r2, r3
 800429c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800429e:	b29b      	uxth	r3, r3
 80042a0:	029b      	lsls	r3, r3, #10
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	4313      	orrs	r3, r2
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042aa:	801a      	strh	r2, [r3, #0]
 80042ac:	e01c      	b.n	80042e8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	785b      	ldrb	r3, [r3, #1]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d118      	bne.n	80042e8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	461a      	mov	r2, r3
 80042c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042ca:	4413      	add	r3, r2
 80042cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	011a      	lsls	r2, r3, #4
 80042d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042d6:	4413      	add	r3, r2
 80042d8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80042dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80042de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042e6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6818      	ldr	r0, [r3, #0]
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	6959      	ldr	r1, [r3, #20]
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	891a      	ldrh	r2, [r3, #8]
 80042f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	f004 f9f0 	bl	80086de <USB_WritePMA>
 80042fe:	e1e2      	b.n	80046c6 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004308:	b29b      	uxth	r3, r3
 800430a:	461a      	mov	r2, r3
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	4413      	add	r3, r2
 8004314:	3306      	adds	r3, #6
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	6812      	ldr	r2, [r2, #0]
 800431c:	4413      	add	r3, r2
 800431e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004322:	881b      	ldrh	r3, [r3, #0]
 8004324:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004328:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	699a      	ldr	r2, [r3, #24]
 8004330:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004334:	429a      	cmp	r2, r3
 8004336:	d307      	bcc.n	8004348 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	699a      	ldr	r2, [r3, #24]
 800433c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004340:	1ad2      	subs	r2, r2, r3
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	619a      	str	r2, [r3, #24]
 8004346:	e002      	b.n	800434e <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	2200      	movs	r2, #0
 800434c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	2b00      	cmp	r3, #0
 8004354:	f040 80c0 	bne.w	80044d8 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	785b      	ldrb	r3, [r3, #1]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d126      	bne.n	80043ae <HAL_PCD_EP_DB_Transmit+0x482>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800436e:	b29b      	uxth	r3, r3
 8004370:	461a      	mov	r2, r3
 8004372:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004374:	4413      	add	r3, r2
 8004376:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	011a      	lsls	r2, r3, #4
 800437e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004380:	4413      	add	r3, r2
 8004382:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004386:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004388:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800438a:	881b      	ldrh	r3, [r3, #0]
 800438c:	b29b      	uxth	r3, r3
 800438e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004392:	b29a      	uxth	r2, r3
 8004394:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004396:	801a      	strh	r2, [r3, #0]
 8004398:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800439a:	881b      	ldrh	r3, [r3, #0]
 800439c:	b29b      	uxth	r3, r3
 800439e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043aa:	801a      	strh	r2, [r3, #0]
 80043ac:	e01a      	b.n	80043e4 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	785b      	ldrb	r3, [r3, #1]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d116      	bne.n	80043e4 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	667b      	str	r3, [r7, #100]	@ 0x64
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	461a      	mov	r2, r3
 80043c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043ca:	4413      	add	r3, r2
 80043cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	011a      	lsls	r2, r3, #4
 80043d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043d6:	4413      	add	r3, r2
 80043d8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80043dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80043de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043e0:	2200      	movs	r2, #0
 80043e2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	677b      	str	r3, [r7, #116]	@ 0x74
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	785b      	ldrb	r3, [r3, #1]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d12b      	bne.n	800444a <HAL_PCD_EP_DB_Transmit+0x51e>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004400:	b29b      	uxth	r3, r3
 8004402:	461a      	mov	r2, r3
 8004404:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004406:	4413      	add	r3, r2
 8004408:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	011a      	lsls	r2, r3, #4
 8004410:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004412:	4413      	add	r3, r2
 8004414:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004418:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800441c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004420:	881b      	ldrh	r3, [r3, #0]
 8004422:	b29b      	uxth	r3, r3
 8004424:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004428:	b29a      	uxth	r2, r3
 800442a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800442e:	801a      	strh	r2, [r3, #0]
 8004430:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004434:	881b      	ldrh	r3, [r3, #0]
 8004436:	b29b      	uxth	r3, r3
 8004438:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800443c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004440:	b29a      	uxth	r2, r3
 8004442:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004446:	801a      	strh	r2, [r3, #0]
 8004448:	e017      	b.n	800447a <HAL_PCD_EP_DB_Transmit+0x54e>
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	785b      	ldrb	r3, [r3, #1]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d113      	bne.n	800447a <HAL_PCD_EP_DB_Transmit+0x54e>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800445a:	b29b      	uxth	r3, r3
 800445c:	461a      	mov	r2, r3
 800445e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004460:	4413      	add	r3, r2
 8004462:	677b      	str	r3, [r7, #116]	@ 0x74
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	011a      	lsls	r2, r3, #4
 800446a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800446c:	4413      	add	r3, r2
 800446e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004472:	673b      	str	r3, [r7, #112]	@ 0x70
 8004474:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004476:	2200      	movs	r2, #0
 8004478:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	4619      	mov	r1, r3
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f008 fc54 	bl	800cd2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004486:	88fb      	ldrh	r3, [r7, #6]
 8004488:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800448c:	2b00      	cmp	r3, #0
 800448e:	f040 811a 	bne.w	80046c6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	461a      	mov	r2, r3
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4413      	add	r3, r2
 80044a0:	881b      	ldrh	r3, [r3, #0]
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ac:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	461a      	mov	r2, r3
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	441a      	add	r2, r3
 80044be:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80044c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80044ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	8013      	strh	r3, [r2, #0]
 80044d6:	e0f6      	b.n	80046c6 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80044d8:	88fb      	ldrh	r3, [r7, #6]
 80044da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d121      	bne.n	8004526 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	461a      	mov	r2, r3
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4413      	add	r3, r2
 80044f0:	881b      	ldrh	r3, [r3, #0]
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044fc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	461a      	mov	r2, r3
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	441a      	add	r2, r3
 800450e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004512:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004516:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800451a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800451e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004522:	b29b      	uxth	r3, r3
 8004524:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800452c:	2b01      	cmp	r3, #1
 800452e:	f040 80ca 	bne.w	80046c6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	695a      	ldr	r2, [r3, #20]
 8004536:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800453a:	441a      	add	r2, r3
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	69da      	ldr	r2, [r3, #28]
 8004544:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004548:	441a      	add	r2, r3
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	6a1a      	ldr	r2, [r3, #32]
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	429a      	cmp	r2, r3
 8004558:	d30b      	bcc.n	8004572 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	6a1a      	ldr	r2, [r3, #32]
 8004566:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800456a:	1ad2      	subs	r2, r2, r3
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	621a      	str	r2, [r3, #32]
 8004570:	e017      	b.n	80045a2 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d108      	bne.n	800458c <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800457a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800457e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800458a:	e00a      	b.n	80045a2 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2200      	movs	r2, #0
 8004598:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	785b      	ldrb	r3, [r3, #1]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d165      	bne.n	800467c <HAL_PCD_EP_DB_Transmit+0x750>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045be:	b29b      	uxth	r3, r3
 80045c0:	461a      	mov	r2, r3
 80045c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045c4:	4413      	add	r3, r2
 80045c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	011a      	lsls	r2, r3, #4
 80045ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045d0:	4413      	add	r3, r2
 80045d2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80045d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80045d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80045da:	881b      	ldrh	r3, [r3, #0]
 80045dc:	b29b      	uxth	r3, r3
 80045de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80045e6:	801a      	strh	r2, [r3, #0]
 80045e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80045ee:	d91d      	bls.n	800462c <HAL_PCD_EP_DB_Transmit+0x700>
 80045f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045f4:	095b      	lsrs	r3, r3, #5
 80045f6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045fc:	f003 031f 	and.w	r3, r3, #31
 8004600:	2b00      	cmp	r3, #0
 8004602:	d102      	bne.n	800460a <HAL_PCD_EP_DB_Transmit+0x6de>
 8004604:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004606:	3b01      	subs	r3, #1
 8004608:	66bb      	str	r3, [r7, #104]	@ 0x68
 800460a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800460c:	881b      	ldrh	r3, [r3, #0]
 800460e:	b29a      	uxth	r2, r3
 8004610:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004612:	b29b      	uxth	r3, r3
 8004614:	029b      	lsls	r3, r3, #10
 8004616:	b29b      	uxth	r3, r3
 8004618:	4313      	orrs	r3, r2
 800461a:	b29b      	uxth	r3, r3
 800461c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004620:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004624:	b29a      	uxth	r2, r3
 8004626:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004628:	801a      	strh	r2, [r3, #0]
 800462a:	e041      	b.n	80046b0 <HAL_PCD_EP_DB_Transmit+0x784>
 800462c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10a      	bne.n	800464a <HAL_PCD_EP_DB_Transmit+0x71e>
 8004634:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004636:	881b      	ldrh	r3, [r3, #0]
 8004638:	b29b      	uxth	r3, r3
 800463a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800463e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004642:	b29a      	uxth	r2, r3
 8004644:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004646:	801a      	strh	r2, [r3, #0]
 8004648:	e032      	b.n	80046b0 <HAL_PCD_EP_DB_Transmit+0x784>
 800464a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800464e:	085b      	lsrs	r3, r3, #1
 8004650:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004652:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b00      	cmp	r3, #0
 800465c:	d002      	beq.n	8004664 <HAL_PCD_EP_DB_Transmit+0x738>
 800465e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004660:	3301      	adds	r3, #1
 8004662:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004664:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004666:	881b      	ldrh	r3, [r3, #0]
 8004668:	b29a      	uxth	r2, r3
 800466a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800466c:	b29b      	uxth	r3, r3
 800466e:	029b      	lsls	r3, r3, #10
 8004670:	b29b      	uxth	r3, r3
 8004672:	4313      	orrs	r3, r2
 8004674:	b29a      	uxth	r2, r3
 8004676:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004678:	801a      	strh	r2, [r3, #0]
 800467a:	e019      	b.n	80046b0 <HAL_PCD_EP_DB_Transmit+0x784>
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	785b      	ldrb	r3, [r3, #1]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d115      	bne.n	80046b0 <HAL_PCD_EP_DB_Transmit+0x784>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800468c:	b29b      	uxth	r3, r3
 800468e:	461a      	mov	r2, r3
 8004690:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004692:	4413      	add	r3, r2
 8004694:	657b      	str	r3, [r7, #84]	@ 0x54
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	011a      	lsls	r2, r3, #4
 800469c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800469e:	4413      	add	r3, r2
 80046a0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80046a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80046a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046ae:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6818      	ldr	r0, [r3, #0]
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	6959      	ldr	r1, [r3, #20]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	895a      	ldrh	r2, [r3, #10]
 80046bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	f004 f80c 	bl	80086de <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	461a      	mov	r2, r3
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4413      	add	r3, r2
 80046d4:	881b      	ldrh	r3, [r3, #0]
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046e0:	82bb      	strh	r3, [r7, #20]
 80046e2:	8abb      	ldrh	r3, [r7, #20]
 80046e4:	f083 0310 	eor.w	r3, r3, #16
 80046e8:	82bb      	strh	r3, [r7, #20]
 80046ea:	8abb      	ldrh	r3, [r7, #20]
 80046ec:	f083 0320 	eor.w	r3, r3, #32
 80046f0:	82bb      	strh	r3, [r7, #20]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	461a      	mov	r2, r3
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	441a      	add	r2, r3
 8004700:	8abb      	ldrh	r3, [r7, #20]
 8004702:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004706:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800470a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800470e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004712:	b29b      	uxth	r3, r3
 8004714:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3790      	adds	r7, #144	@ 0x90
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004720:	b480      	push	{r7}
 8004722:	b087      	sub	sp, #28
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	607b      	str	r3, [r7, #4]
 800472a:	460b      	mov	r3, r1
 800472c:	817b      	strh	r3, [r7, #10]
 800472e:	4613      	mov	r3, r2
 8004730:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004732:	897b      	ldrh	r3, [r7, #10]
 8004734:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004738:	b29b      	uxth	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00b      	beq.n	8004756 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800473e:	897b      	ldrh	r3, [r7, #10]
 8004740:	f003 0307 	and.w	r3, r3, #7
 8004744:	1c5a      	adds	r2, r3, #1
 8004746:	4613      	mov	r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	4413      	add	r3, r2
 800474c:	00db      	lsls	r3, r3, #3
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	4413      	add	r3, r2
 8004752:	617b      	str	r3, [r7, #20]
 8004754:	e009      	b.n	800476a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004756:	897a      	ldrh	r2, [r7, #10]
 8004758:	4613      	mov	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	00db      	lsls	r3, r3, #3
 8004760:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	4413      	add	r3, r2
 8004768:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800476a:	893b      	ldrh	r3, [r7, #8]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d107      	bne.n	8004780 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	2200      	movs	r2, #0
 8004774:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	b29a      	uxth	r2, r3
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	80da      	strh	r2, [r3, #6]
 800477e:	e00b      	b.n	8004798 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	2201      	movs	r2, #1
 8004784:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	b29a      	uxth	r2, r3
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	0c1b      	lsrs	r3, r3, #16
 8004792:	b29a      	uxth	r2, r3
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	371c      	adds	r7, #28
 800479e:	46bd      	mov	sp, r7
 80047a0:	bc80      	pop	{r7}
 80047a2:	4770      	bx	lr

080047a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d101      	bne.n	80047b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e272      	b.n	8004c9c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f000 8087 	beq.w	80048d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80047c4:	4b92      	ldr	r3, [pc, #584]	@ (8004a10 <HAL_RCC_OscConfig+0x26c>)
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f003 030c 	and.w	r3, r3, #12
 80047cc:	2b04      	cmp	r3, #4
 80047ce:	d00c      	beq.n	80047ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80047d0:	4b8f      	ldr	r3, [pc, #572]	@ (8004a10 <HAL_RCC_OscConfig+0x26c>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f003 030c 	and.w	r3, r3, #12
 80047d8:	2b08      	cmp	r3, #8
 80047da:	d112      	bne.n	8004802 <HAL_RCC_OscConfig+0x5e>
 80047dc:	4b8c      	ldr	r3, [pc, #560]	@ (8004a10 <HAL_RCC_OscConfig+0x26c>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047e8:	d10b      	bne.n	8004802 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047ea:	4b89      	ldr	r3, [pc, #548]	@ (8004a10 <HAL_RCC_OscConfig+0x26c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d06c      	beq.n	80048d0 <HAL_RCC_OscConfig+0x12c>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d168      	bne.n	80048d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e24c      	b.n	8004c9c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800480a:	d106      	bne.n	800481a <HAL_RCC_OscConfig+0x76>
 800480c:	4b80      	ldr	r3, [pc, #512]	@ (8004a10 <HAL_RCC_OscConfig+0x26c>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a7f      	ldr	r2, [pc, #508]	@ (8004a10 <HAL_RCC_OscConfig+0x26c>)
 8004812:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004816:	6013      	str	r3, [r2, #0]
 8004818:	e02e      	b.n	8004878 <HAL_RCC_OscConfig+0xd4>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10c      	bne.n	800483c <HAL_RCC_OscConfig+0x98>
 8004822:	4b7b      	ldr	r3, [pc, #492]	@ (8004a10 <HAL_RCC_OscConfig+0x26c>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a7a      	ldr	r2, [pc, #488]	@ (8004a10 <HAL_RCC_OscConfig+0x26c>)
 8004828:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800482c:	6013      	str	r3, [r2, #0]
 800482e:	4b78      	ldr	r3, [pc, #480]	@ (8004a10 <HAL_RCC_OscConfig+0x26c>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a77      	ldr	r2, [pc, #476]	@ (8004a10 <HAL_RCC_OscConfig+0x26c>)
 8004834:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004838:	6013      	str	r3, [r2, #0]
 800483a:	e01d      	b.n	8004878 <HAL_RCC_OscConfig+0xd4>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004844:	d10c      	bne.n	8004860 <HAL_RCC_OscConfig+0xbc>
 8004846:	4b72      	ldr	r3, [pc, #456]	@ (8004a10 <HAL_RCC_OscConfig+0x26c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a71      	ldr	r2, [pc, #452]	@ (8004a10 <HAL_RCC_OscConfig+0x26c>)
 800484c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004850:	6013      	str	r3, [r2, #0]
 8004852:	4b6f      	ldr	r3, [pc, #444]	@ (8004a10 <HAL_RCC_OscConfig+0x26c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a6e      	ldr	r2, [pc, #440]	@ (8004a10 <HAL_RCC_OscConfig+0x26c>)
 8004858:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	e00b      	b.n	8004878 <HAL_RCC_OscConfig+0xd4>
 8004860:	4b6b      	ldr	r3, [pc, #428]	@ (8004a10 <HAL_RCC_OscConfig+0x26c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a6a      	ldr	r2, [pc, #424]	@ (8004a10 <HAL_RCC_OscConfig+0x26c>)
 8004866:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800486a:	6013      	str	r3, [r2, #0]
 800486c:	4b68      	ldr	r3, [pc, #416]	@ (8004a10 <HAL_RCC_OscConfig+0x26c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a67      	ldr	r2, [pc, #412]	@ (8004a10 <HAL_RCC_OscConfig+0x26c>)
 8004872:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004876:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d013      	beq.n	80048a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004880:	f7fc faf0 	bl	8000e64 <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004886:	e008      	b.n	800489a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004888:	f7fc faec 	bl	8000e64 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b64      	cmp	r3, #100	@ 0x64
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e200      	b.n	8004c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800489a:	4b5d      	ldr	r3, [pc, #372]	@ (8004a10 <HAL_RCC_OscConfig+0x26c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d0f0      	beq.n	8004888 <HAL_RCC_OscConfig+0xe4>
 80048a6:	e014      	b.n	80048d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a8:	f7fc fadc 	bl	8000e64 <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048b0:	f7fc fad8 	bl	8000e64 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b64      	cmp	r3, #100	@ 0x64
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e1ec      	b.n	8004c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048c2:	4b53      	ldr	r3, [pc, #332]	@ (8004a10 <HAL_RCC_OscConfig+0x26c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1f0      	bne.n	80048b0 <HAL_RCC_OscConfig+0x10c>
 80048ce:	e000      	b.n	80048d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d063      	beq.n	80049a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80048de:	4b4c      	ldr	r3, [pc, #304]	@ (8004a10 <HAL_RCC_OscConfig+0x26c>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f003 030c 	and.w	r3, r3, #12
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00b      	beq.n	8004902 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80048ea:	4b49      	ldr	r3, [pc, #292]	@ (8004a10 <HAL_RCC_OscConfig+0x26c>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f003 030c 	and.w	r3, r3, #12
 80048f2:	2b08      	cmp	r3, #8
 80048f4:	d11c      	bne.n	8004930 <HAL_RCC_OscConfig+0x18c>
 80048f6:	4b46      	ldr	r3, [pc, #280]	@ (8004a10 <HAL_RCC_OscConfig+0x26c>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d116      	bne.n	8004930 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004902:	4b43      	ldr	r3, [pc, #268]	@ (8004a10 <HAL_RCC_OscConfig+0x26c>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d005      	beq.n	800491a <HAL_RCC_OscConfig+0x176>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d001      	beq.n	800491a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e1c0      	b.n	8004c9c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800491a:	4b3d      	ldr	r3, [pc, #244]	@ (8004a10 <HAL_RCC_OscConfig+0x26c>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	00db      	lsls	r3, r3, #3
 8004928:	4939      	ldr	r1, [pc, #228]	@ (8004a10 <HAL_RCC_OscConfig+0x26c>)
 800492a:	4313      	orrs	r3, r2
 800492c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800492e:	e03a      	b.n	80049a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d020      	beq.n	800497a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004938:	4b36      	ldr	r3, [pc, #216]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 800493a:	2201      	movs	r2, #1
 800493c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800493e:	f7fc fa91 	bl	8000e64 <HAL_GetTick>
 8004942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004944:	e008      	b.n	8004958 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004946:	f7fc fa8d 	bl	8000e64 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d901      	bls.n	8004958 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e1a1      	b.n	8004c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004958:	4b2d      	ldr	r3, [pc, #180]	@ (8004a10 <HAL_RCC_OscConfig+0x26c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d0f0      	beq.n	8004946 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004964:	4b2a      	ldr	r3, [pc, #168]	@ (8004a10 <HAL_RCC_OscConfig+0x26c>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	00db      	lsls	r3, r3, #3
 8004972:	4927      	ldr	r1, [pc, #156]	@ (8004a10 <HAL_RCC_OscConfig+0x26c>)
 8004974:	4313      	orrs	r3, r2
 8004976:	600b      	str	r3, [r1, #0]
 8004978:	e015      	b.n	80049a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800497a:	4b26      	ldr	r3, [pc, #152]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 800497c:	2200      	movs	r2, #0
 800497e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004980:	f7fc fa70 	bl	8000e64 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004988:	f7fc fa6c 	bl	8000e64 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e180      	b.n	8004c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800499a:	4b1d      	ldr	r3, [pc, #116]	@ (8004a10 <HAL_RCC_OscConfig+0x26c>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1f0      	bne.n	8004988 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0308 	and.w	r3, r3, #8
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d03a      	beq.n	8004a28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d019      	beq.n	80049ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049ba:	4b17      	ldr	r3, [pc, #92]	@ (8004a18 <HAL_RCC_OscConfig+0x274>)
 80049bc:	2201      	movs	r2, #1
 80049be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049c0:	f7fc fa50 	bl	8000e64 <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049c6:	e008      	b.n	80049da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049c8:	f7fc fa4c 	bl	8000e64 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e160      	b.n	8004c9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049da:	4b0d      	ldr	r3, [pc, #52]	@ (8004a10 <HAL_RCC_OscConfig+0x26c>)
 80049dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d0f0      	beq.n	80049c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80049e6:	2001      	movs	r0, #1
 80049e8:	f000 fafe 	bl	8004fe8 <RCC_Delay>
 80049ec:	e01c      	b.n	8004a28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004a18 <HAL_RCC_OscConfig+0x274>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049f4:	f7fc fa36 	bl	8000e64 <HAL_GetTick>
 80049f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049fa:	e00f      	b.n	8004a1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049fc:	f7fc fa32 	bl	8000e64 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d908      	bls.n	8004a1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e146      	b.n	8004c9c <HAL_RCC_OscConfig+0x4f8>
 8004a0e:	bf00      	nop
 8004a10:	40021000 	.word	0x40021000
 8004a14:	42420000 	.word	0x42420000
 8004a18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a1c:	4b92      	ldr	r3, [pc, #584]	@ (8004c68 <HAL_RCC_OscConfig+0x4c4>)
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1e9      	bne.n	80049fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f000 80a6 	beq.w	8004b82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a36:	2300      	movs	r3, #0
 8004a38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a3a:	4b8b      	ldr	r3, [pc, #556]	@ (8004c68 <HAL_RCC_OscConfig+0x4c4>)
 8004a3c:	69db      	ldr	r3, [r3, #28]
 8004a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10d      	bne.n	8004a62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a46:	4b88      	ldr	r3, [pc, #544]	@ (8004c68 <HAL_RCC_OscConfig+0x4c4>)
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	4a87      	ldr	r2, [pc, #540]	@ (8004c68 <HAL_RCC_OscConfig+0x4c4>)
 8004a4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a50:	61d3      	str	r3, [r2, #28]
 8004a52:	4b85      	ldr	r3, [pc, #532]	@ (8004c68 <HAL_RCC_OscConfig+0x4c4>)
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a5a:	60bb      	str	r3, [r7, #8]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a62:	4b82      	ldr	r3, [pc, #520]	@ (8004c6c <HAL_RCC_OscConfig+0x4c8>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d118      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a6e:	4b7f      	ldr	r3, [pc, #508]	@ (8004c6c <HAL_RCC_OscConfig+0x4c8>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a7e      	ldr	r2, [pc, #504]	@ (8004c6c <HAL_RCC_OscConfig+0x4c8>)
 8004a74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a7a:	f7fc f9f3 	bl	8000e64 <HAL_GetTick>
 8004a7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a80:	e008      	b.n	8004a94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a82:	f7fc f9ef 	bl	8000e64 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	2b64      	cmp	r3, #100	@ 0x64
 8004a8e:	d901      	bls.n	8004a94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e103      	b.n	8004c9c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a94:	4b75      	ldr	r3, [pc, #468]	@ (8004c6c <HAL_RCC_OscConfig+0x4c8>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d0f0      	beq.n	8004a82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d106      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x312>
 8004aa8:	4b6f      	ldr	r3, [pc, #444]	@ (8004c68 <HAL_RCC_OscConfig+0x4c4>)
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	4a6e      	ldr	r2, [pc, #440]	@ (8004c68 <HAL_RCC_OscConfig+0x4c4>)
 8004aae:	f043 0301 	orr.w	r3, r3, #1
 8004ab2:	6213      	str	r3, [r2, #32]
 8004ab4:	e02d      	b.n	8004b12 <HAL_RCC_OscConfig+0x36e>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10c      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x334>
 8004abe:	4b6a      	ldr	r3, [pc, #424]	@ (8004c68 <HAL_RCC_OscConfig+0x4c4>)
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	4a69      	ldr	r2, [pc, #420]	@ (8004c68 <HAL_RCC_OscConfig+0x4c4>)
 8004ac4:	f023 0301 	bic.w	r3, r3, #1
 8004ac8:	6213      	str	r3, [r2, #32]
 8004aca:	4b67      	ldr	r3, [pc, #412]	@ (8004c68 <HAL_RCC_OscConfig+0x4c4>)
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	4a66      	ldr	r2, [pc, #408]	@ (8004c68 <HAL_RCC_OscConfig+0x4c4>)
 8004ad0:	f023 0304 	bic.w	r3, r3, #4
 8004ad4:	6213      	str	r3, [r2, #32]
 8004ad6:	e01c      	b.n	8004b12 <HAL_RCC_OscConfig+0x36e>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	2b05      	cmp	r3, #5
 8004ade:	d10c      	bne.n	8004afa <HAL_RCC_OscConfig+0x356>
 8004ae0:	4b61      	ldr	r3, [pc, #388]	@ (8004c68 <HAL_RCC_OscConfig+0x4c4>)
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	4a60      	ldr	r2, [pc, #384]	@ (8004c68 <HAL_RCC_OscConfig+0x4c4>)
 8004ae6:	f043 0304 	orr.w	r3, r3, #4
 8004aea:	6213      	str	r3, [r2, #32]
 8004aec:	4b5e      	ldr	r3, [pc, #376]	@ (8004c68 <HAL_RCC_OscConfig+0x4c4>)
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	4a5d      	ldr	r2, [pc, #372]	@ (8004c68 <HAL_RCC_OscConfig+0x4c4>)
 8004af2:	f043 0301 	orr.w	r3, r3, #1
 8004af6:	6213      	str	r3, [r2, #32]
 8004af8:	e00b      	b.n	8004b12 <HAL_RCC_OscConfig+0x36e>
 8004afa:	4b5b      	ldr	r3, [pc, #364]	@ (8004c68 <HAL_RCC_OscConfig+0x4c4>)
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	4a5a      	ldr	r2, [pc, #360]	@ (8004c68 <HAL_RCC_OscConfig+0x4c4>)
 8004b00:	f023 0301 	bic.w	r3, r3, #1
 8004b04:	6213      	str	r3, [r2, #32]
 8004b06:	4b58      	ldr	r3, [pc, #352]	@ (8004c68 <HAL_RCC_OscConfig+0x4c4>)
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	4a57      	ldr	r2, [pc, #348]	@ (8004c68 <HAL_RCC_OscConfig+0x4c4>)
 8004b0c:	f023 0304 	bic.w	r3, r3, #4
 8004b10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d015      	beq.n	8004b46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b1a:	f7fc f9a3 	bl	8000e64 <HAL_GetTick>
 8004b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b20:	e00a      	b.n	8004b38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b22:	f7fc f99f 	bl	8000e64 <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d901      	bls.n	8004b38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e0b1      	b.n	8004c9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b38:	4b4b      	ldr	r3, [pc, #300]	@ (8004c68 <HAL_RCC_OscConfig+0x4c4>)
 8004b3a:	6a1b      	ldr	r3, [r3, #32]
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d0ee      	beq.n	8004b22 <HAL_RCC_OscConfig+0x37e>
 8004b44:	e014      	b.n	8004b70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b46:	f7fc f98d 	bl	8000e64 <HAL_GetTick>
 8004b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b4c:	e00a      	b.n	8004b64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b4e:	f7fc f989 	bl	8000e64 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d901      	bls.n	8004b64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e09b      	b.n	8004c9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b64:	4b40      	ldr	r3, [pc, #256]	@ (8004c68 <HAL_RCC_OscConfig+0x4c4>)
 8004b66:	6a1b      	ldr	r3, [r3, #32]
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1ee      	bne.n	8004b4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b70:	7dfb      	ldrb	r3, [r7, #23]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d105      	bne.n	8004b82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b76:	4b3c      	ldr	r3, [pc, #240]	@ (8004c68 <HAL_RCC_OscConfig+0x4c4>)
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	4a3b      	ldr	r2, [pc, #236]	@ (8004c68 <HAL_RCC_OscConfig+0x4c4>)
 8004b7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f000 8087 	beq.w	8004c9a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b8c:	4b36      	ldr	r3, [pc, #216]	@ (8004c68 <HAL_RCC_OscConfig+0x4c4>)
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f003 030c 	and.w	r3, r3, #12
 8004b94:	2b08      	cmp	r3, #8
 8004b96:	d061      	beq.n	8004c5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	69db      	ldr	r3, [r3, #28]
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d146      	bne.n	8004c2e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ba0:	4b33      	ldr	r3, [pc, #204]	@ (8004c70 <HAL_RCC_OscConfig+0x4cc>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba6:	f7fc f95d 	bl	8000e64 <HAL_GetTick>
 8004baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bac:	e008      	b.n	8004bc0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bae:	f7fc f959 	bl	8000e64 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d901      	bls.n	8004bc0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e06d      	b.n	8004c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bc0:	4b29      	ldr	r3, [pc, #164]	@ (8004c68 <HAL_RCC_OscConfig+0x4c4>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1f0      	bne.n	8004bae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bd4:	d108      	bne.n	8004be8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004bd6:	4b24      	ldr	r3, [pc, #144]	@ (8004c68 <HAL_RCC_OscConfig+0x4c4>)
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	4921      	ldr	r1, [pc, #132]	@ (8004c68 <HAL_RCC_OscConfig+0x4c4>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004be8:	4b1f      	ldr	r3, [pc, #124]	@ (8004c68 <HAL_RCC_OscConfig+0x4c4>)
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a19      	ldr	r1, [r3, #32]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf8:	430b      	orrs	r3, r1
 8004bfa:	491b      	ldr	r1, [pc, #108]	@ (8004c68 <HAL_RCC_OscConfig+0x4c4>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c00:	4b1b      	ldr	r3, [pc, #108]	@ (8004c70 <HAL_RCC_OscConfig+0x4cc>)
 8004c02:	2201      	movs	r2, #1
 8004c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c06:	f7fc f92d 	bl	8000e64 <HAL_GetTick>
 8004c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c0c:	e008      	b.n	8004c20 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c0e:	f7fc f929 	bl	8000e64 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d901      	bls.n	8004c20 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e03d      	b.n	8004c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c20:	4b11      	ldr	r3, [pc, #68]	@ (8004c68 <HAL_RCC_OscConfig+0x4c4>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d0f0      	beq.n	8004c0e <HAL_RCC_OscConfig+0x46a>
 8004c2c:	e035      	b.n	8004c9a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c2e:	4b10      	ldr	r3, [pc, #64]	@ (8004c70 <HAL_RCC_OscConfig+0x4cc>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c34:	f7fc f916 	bl	8000e64 <HAL_GetTick>
 8004c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c3a:	e008      	b.n	8004c4e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c3c:	f7fc f912 	bl	8000e64 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e026      	b.n	8004c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c4e:	4b06      	ldr	r3, [pc, #24]	@ (8004c68 <HAL_RCC_OscConfig+0x4c4>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1f0      	bne.n	8004c3c <HAL_RCC_OscConfig+0x498>
 8004c5a:	e01e      	b.n	8004c9a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	69db      	ldr	r3, [r3, #28]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d107      	bne.n	8004c74 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e019      	b.n	8004c9c <HAL_RCC_OscConfig+0x4f8>
 8004c68:	40021000 	.word	0x40021000
 8004c6c:	40007000 	.word	0x40007000
 8004c70:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004c74:	4b0b      	ldr	r3, [pc, #44]	@ (8004ca4 <HAL_RCC_OscConfig+0x500>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d106      	bne.n	8004c96 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d001      	beq.n	8004c9a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e000      	b.n	8004c9c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3718      	adds	r7, #24
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	40021000 	.word	0x40021000

08004ca8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d101      	bne.n	8004cbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e0d0      	b.n	8004e5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cbc:	4b6a      	ldr	r3, [pc, #424]	@ (8004e68 <HAL_RCC_ClockConfig+0x1c0>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0307 	and.w	r3, r3, #7
 8004cc4:	683a      	ldr	r2, [r7, #0]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d910      	bls.n	8004cec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cca:	4b67      	ldr	r3, [pc, #412]	@ (8004e68 <HAL_RCC_ClockConfig+0x1c0>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f023 0207 	bic.w	r2, r3, #7
 8004cd2:	4965      	ldr	r1, [pc, #404]	@ (8004e68 <HAL_RCC_ClockConfig+0x1c0>)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cda:	4b63      	ldr	r3, [pc, #396]	@ (8004e68 <HAL_RCC_ClockConfig+0x1c0>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0307 	and.w	r3, r3, #7
 8004ce2:	683a      	ldr	r2, [r7, #0]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d001      	beq.n	8004cec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e0b8      	b.n	8004e5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d020      	beq.n	8004d3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0304 	and.w	r3, r3, #4
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d005      	beq.n	8004d10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d04:	4b59      	ldr	r3, [pc, #356]	@ (8004e6c <HAL_RCC_ClockConfig+0x1c4>)
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	4a58      	ldr	r2, [pc, #352]	@ (8004e6c <HAL_RCC_ClockConfig+0x1c4>)
 8004d0a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004d0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0308 	and.w	r3, r3, #8
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d005      	beq.n	8004d28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d1c:	4b53      	ldr	r3, [pc, #332]	@ (8004e6c <HAL_RCC_ClockConfig+0x1c4>)
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	4a52      	ldr	r2, [pc, #328]	@ (8004e6c <HAL_RCC_ClockConfig+0x1c4>)
 8004d22:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004d26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d28:	4b50      	ldr	r3, [pc, #320]	@ (8004e6c <HAL_RCC_ClockConfig+0x1c4>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	494d      	ldr	r1, [pc, #308]	@ (8004e6c <HAL_RCC_ClockConfig+0x1c4>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d040      	beq.n	8004dc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d107      	bne.n	8004d5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d4e:	4b47      	ldr	r3, [pc, #284]	@ (8004e6c <HAL_RCC_ClockConfig+0x1c4>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d115      	bne.n	8004d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e07f      	b.n	8004e5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d107      	bne.n	8004d76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d66:	4b41      	ldr	r3, [pc, #260]	@ (8004e6c <HAL_RCC_ClockConfig+0x1c4>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d109      	bne.n	8004d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e073      	b.n	8004e5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d76:	4b3d      	ldr	r3, [pc, #244]	@ (8004e6c <HAL_RCC_ClockConfig+0x1c4>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e06b      	b.n	8004e5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d86:	4b39      	ldr	r3, [pc, #228]	@ (8004e6c <HAL_RCC_ClockConfig+0x1c4>)
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f023 0203 	bic.w	r2, r3, #3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	4936      	ldr	r1, [pc, #216]	@ (8004e6c <HAL_RCC_ClockConfig+0x1c4>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d98:	f7fc f864 	bl	8000e64 <HAL_GetTick>
 8004d9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d9e:	e00a      	b.n	8004db6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004da0:	f7fc f860 	bl	8000e64 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e053      	b.n	8004e5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004db6:	4b2d      	ldr	r3, [pc, #180]	@ (8004e6c <HAL_RCC_ClockConfig+0x1c4>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f003 020c 	and.w	r2, r3, #12
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d1eb      	bne.n	8004da0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004dc8:	4b27      	ldr	r3, [pc, #156]	@ (8004e68 <HAL_RCC_ClockConfig+0x1c0>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0307 	and.w	r3, r3, #7
 8004dd0:	683a      	ldr	r2, [r7, #0]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d210      	bcs.n	8004df8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dd6:	4b24      	ldr	r3, [pc, #144]	@ (8004e68 <HAL_RCC_ClockConfig+0x1c0>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f023 0207 	bic.w	r2, r3, #7
 8004dde:	4922      	ldr	r1, [pc, #136]	@ (8004e68 <HAL_RCC_ClockConfig+0x1c0>)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004de6:	4b20      	ldr	r3, [pc, #128]	@ (8004e68 <HAL_RCC_ClockConfig+0x1c0>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0307 	and.w	r3, r3, #7
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d001      	beq.n	8004df8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e032      	b.n	8004e5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d008      	beq.n	8004e16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e04:	4b19      	ldr	r3, [pc, #100]	@ (8004e6c <HAL_RCC_ClockConfig+0x1c4>)
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	4916      	ldr	r1, [pc, #88]	@ (8004e6c <HAL_RCC_ClockConfig+0x1c4>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0308 	and.w	r3, r3, #8
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d009      	beq.n	8004e36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e22:	4b12      	ldr	r3, [pc, #72]	@ (8004e6c <HAL_RCC_ClockConfig+0x1c4>)
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	00db      	lsls	r3, r3, #3
 8004e30:	490e      	ldr	r1, [pc, #56]	@ (8004e6c <HAL_RCC_ClockConfig+0x1c4>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e36:	f000 f821 	bl	8004e7c <HAL_RCC_GetSysClockFreq>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004e6c <HAL_RCC_ClockConfig+0x1c4>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	091b      	lsrs	r3, r3, #4
 8004e42:	f003 030f 	and.w	r3, r3, #15
 8004e46:	490a      	ldr	r1, [pc, #40]	@ (8004e70 <HAL_RCC_ClockConfig+0x1c8>)
 8004e48:	5ccb      	ldrb	r3, [r1, r3]
 8004e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e4e:	4a09      	ldr	r2, [pc, #36]	@ (8004e74 <HAL_RCC_ClockConfig+0x1cc>)
 8004e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004e52:	4b09      	ldr	r3, [pc, #36]	@ (8004e78 <HAL_RCC_ClockConfig+0x1d0>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7fb fef0 	bl	8000c3c <HAL_InitTick>

  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	40022000 	.word	0x40022000
 8004e6c:	40021000 	.word	0x40021000
 8004e70:	0800d2e8 	.word	0x0800d2e8
 8004e74:	20000008 	.word	0x20000008
 8004e78:	2000000c 	.word	0x2000000c

08004e7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b087      	sub	sp, #28
 8004e80:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e82:	2300      	movs	r3, #0
 8004e84:	60fb      	str	r3, [r7, #12]
 8004e86:	2300      	movs	r3, #0
 8004e88:	60bb      	str	r3, [r7, #8]
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	617b      	str	r3, [r7, #20]
 8004e8e:	2300      	movs	r3, #0
 8004e90:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004e92:	2300      	movs	r3, #0
 8004e94:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004e96:	4b1e      	ldr	r3, [pc, #120]	@ (8004f10 <HAL_RCC_GetSysClockFreq+0x94>)
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f003 030c 	and.w	r3, r3, #12
 8004ea2:	2b04      	cmp	r3, #4
 8004ea4:	d002      	beq.n	8004eac <HAL_RCC_GetSysClockFreq+0x30>
 8004ea6:	2b08      	cmp	r3, #8
 8004ea8:	d003      	beq.n	8004eb2 <HAL_RCC_GetSysClockFreq+0x36>
 8004eaa:	e027      	b.n	8004efc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004eac:	4b19      	ldr	r3, [pc, #100]	@ (8004f14 <HAL_RCC_GetSysClockFreq+0x98>)
 8004eae:	613b      	str	r3, [r7, #16]
      break;
 8004eb0:	e027      	b.n	8004f02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	0c9b      	lsrs	r3, r3, #18
 8004eb6:	f003 030f 	and.w	r3, r3, #15
 8004eba:	4a17      	ldr	r2, [pc, #92]	@ (8004f18 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004ebc:	5cd3      	ldrb	r3, [r2, r3]
 8004ebe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d010      	beq.n	8004eec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004eca:	4b11      	ldr	r3, [pc, #68]	@ (8004f10 <HAL_RCC_GetSysClockFreq+0x94>)
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	0c5b      	lsrs	r3, r3, #17
 8004ed0:	f003 0301 	and.w	r3, r3, #1
 8004ed4:	4a11      	ldr	r2, [pc, #68]	@ (8004f1c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004ed6:	5cd3      	ldrb	r3, [r2, r3]
 8004ed8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a0d      	ldr	r2, [pc, #52]	@ (8004f14 <HAL_RCC_GetSysClockFreq+0x98>)
 8004ede:	fb03 f202 	mul.w	r2, r3, r2
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee8:	617b      	str	r3, [r7, #20]
 8004eea:	e004      	b.n	8004ef6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a0c      	ldr	r2, [pc, #48]	@ (8004f20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004ef0:	fb02 f303 	mul.w	r3, r2, r3
 8004ef4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	613b      	str	r3, [r7, #16]
      break;
 8004efa:	e002      	b.n	8004f02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004efc:	4b05      	ldr	r3, [pc, #20]	@ (8004f14 <HAL_RCC_GetSysClockFreq+0x98>)
 8004efe:	613b      	str	r3, [r7, #16]
      break;
 8004f00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f02:	693b      	ldr	r3, [r7, #16]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	371c      	adds	r7, #28
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bc80      	pop	{r7}
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	40021000 	.word	0x40021000
 8004f14:	007a1200 	.word	0x007a1200
 8004f18:	0800d300 	.word	0x0800d300
 8004f1c:	0800d310 	.word	0x0800d310
 8004f20:	003d0900 	.word	0x003d0900

08004f24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f24:	b480      	push	{r7}
 8004f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f28:	4b02      	ldr	r3, [pc, #8]	@ (8004f34 <HAL_RCC_GetHCLKFreq+0x10>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bc80      	pop	{r7}
 8004f32:	4770      	bx	lr
 8004f34:	20000008 	.word	0x20000008

08004f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f3c:	f7ff fff2 	bl	8004f24 <HAL_RCC_GetHCLKFreq>
 8004f40:	4602      	mov	r2, r0
 8004f42:	4b05      	ldr	r3, [pc, #20]	@ (8004f58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	0a1b      	lsrs	r3, r3, #8
 8004f48:	f003 0307 	and.w	r3, r3, #7
 8004f4c:	4903      	ldr	r1, [pc, #12]	@ (8004f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f4e:	5ccb      	ldrb	r3, [r1, r3]
 8004f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	40021000 	.word	0x40021000
 8004f5c:	0800d2f8 	.word	0x0800d2f8

08004f60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f64:	f7ff ffde 	bl	8004f24 <HAL_RCC_GetHCLKFreq>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	4b05      	ldr	r3, [pc, #20]	@ (8004f80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	0adb      	lsrs	r3, r3, #11
 8004f70:	f003 0307 	and.w	r3, r3, #7
 8004f74:	4903      	ldr	r1, [pc, #12]	@ (8004f84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f76:	5ccb      	ldrb	r3, [r1, r3]
 8004f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	40021000 	.word	0x40021000
 8004f84:	0800d2f8 	.word	0x0800d2f8

08004f88 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	220f      	movs	r2, #15
 8004f96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004f98:	4b11      	ldr	r3, [pc, #68]	@ (8004fe0 <HAL_RCC_GetClockConfig+0x58>)
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f003 0203 	and.w	r2, r3, #3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8004fe0 <HAL_RCC_GetClockConfig+0x58>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8004fe0 <HAL_RCC_GetClockConfig+0x58>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004fbc:	4b08      	ldr	r3, [pc, #32]	@ (8004fe0 <HAL_RCC_GetClockConfig+0x58>)
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	08db      	lsrs	r3, r3, #3
 8004fc2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004fca:	4b06      	ldr	r3, [pc, #24]	@ (8004fe4 <HAL_RCC_GetClockConfig+0x5c>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0207 	and.w	r2, r3, #7
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004fd6:	bf00      	nop
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bc80      	pop	{r7}
 8004fde:	4770      	bx	lr
 8004fe0:	40021000 	.word	0x40021000
 8004fe4:	40022000 	.word	0x40022000

08004fe8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800501c <RCC_Delay+0x34>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a0a      	ldr	r2, [pc, #40]	@ (8005020 <RCC_Delay+0x38>)
 8004ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8004ffa:	0a5b      	lsrs	r3, r3, #9
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	fb02 f303 	mul.w	r3, r2, r3
 8005002:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005004:	bf00      	nop
  }
  while (Delay --);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	1e5a      	subs	r2, r3, #1
 800500a:	60fa      	str	r2, [r7, #12]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1f9      	bne.n	8005004 <RCC_Delay+0x1c>
}
 8005010:	bf00      	nop
 8005012:	bf00      	nop
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	bc80      	pop	{r7}
 800501a:	4770      	bx	lr
 800501c:	20000008 	.word	0x20000008
 8005020:	10624dd3 	.word	0x10624dd3

08005024 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800502c:	2300      	movs	r3, #0
 800502e:	613b      	str	r3, [r7, #16]
 8005030:	2300      	movs	r3, #0
 8005032:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b00      	cmp	r3, #0
 800503e:	d07d      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005040:	2300      	movs	r3, #0
 8005042:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005044:	4b4f      	ldr	r3, [pc, #316]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005046:	69db      	ldr	r3, [r3, #28]
 8005048:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10d      	bne.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005050:	4b4c      	ldr	r3, [pc, #304]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005052:	69db      	ldr	r3, [r3, #28]
 8005054:	4a4b      	ldr	r2, [pc, #300]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005056:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800505a:	61d3      	str	r3, [r2, #28]
 800505c:	4b49      	ldr	r3, [pc, #292]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800505e:	69db      	ldr	r3, [r3, #28]
 8005060:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005064:	60bb      	str	r3, [r7, #8]
 8005066:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005068:	2301      	movs	r3, #1
 800506a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800506c:	4b46      	ldr	r3, [pc, #280]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005074:	2b00      	cmp	r3, #0
 8005076:	d118      	bne.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005078:	4b43      	ldr	r3, [pc, #268]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a42      	ldr	r2, [pc, #264]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800507e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005082:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005084:	f7fb feee 	bl	8000e64 <HAL_GetTick>
 8005088:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800508a:	e008      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800508c:	f7fb feea 	bl	8000e64 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b64      	cmp	r3, #100	@ 0x64
 8005098:	d901      	bls.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e06d      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800509e:	4b3a      	ldr	r3, [pc, #232]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d0f0      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050aa:	4b36      	ldr	r3, [pc, #216]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050b2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d02e      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d027      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050c8:	4b2e      	ldr	r3, [pc, #184]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050d0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050d2:	4b2e      	ldr	r3, [pc, #184]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80050d4:	2201      	movs	r2, #1
 80050d6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050d8:	4b2c      	ldr	r3, [pc, #176]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80050da:	2200      	movs	r2, #0
 80050dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80050de:	4a29      	ldr	r2, [pc, #164]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d014      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ee:	f7fb feb9 	bl	8000e64 <HAL_GetTick>
 80050f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050f4:	e00a      	b.n	800510c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050f6:	f7fb feb5 	bl	8000e64 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005104:	4293      	cmp	r3, r2
 8005106:	d901      	bls.n	800510c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e036      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800510c:	4b1d      	ldr	r3, [pc, #116]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d0ee      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005118:	4b1a      	ldr	r3, [pc, #104]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	4917      	ldr	r1, [pc, #92]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005126:	4313      	orrs	r3, r2
 8005128:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800512a:	7dfb      	ldrb	r3, [r7, #23]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d105      	bne.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005130:	4b14      	ldr	r3, [pc, #80]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005132:	69db      	ldr	r3, [r3, #28]
 8005134:	4a13      	ldr	r2, [pc, #76]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005136:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800513a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b00      	cmp	r3, #0
 8005146:	d008      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005148:	4b0e      	ldr	r3, [pc, #56]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	490b      	ldr	r1, [pc, #44]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005156:	4313      	orrs	r3, r2
 8005158:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0310 	and.w	r3, r3, #16
 8005162:	2b00      	cmp	r3, #0
 8005164:	d008      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005166:	4b07      	ldr	r3, [pc, #28]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	4904      	ldr	r1, [pc, #16]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005174:	4313      	orrs	r3, r2
 8005176:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3718      	adds	r7, #24
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	40021000 	.word	0x40021000
 8005188:	40007000 	.word	0x40007000
 800518c:	42420440 	.word	0x42420440

08005190 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b088      	sub	sp, #32
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005198:	2300      	movs	r3, #0
 800519a:	617b      	str	r3, [r7, #20]
 800519c:	2300      	movs	r3, #0
 800519e:	61fb      	str	r3, [r7, #28]
 80051a0:	2300      	movs	r3, #0
 80051a2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	60fb      	str	r3, [r7, #12]
 80051a8:	2300      	movs	r3, #0
 80051aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b10      	cmp	r3, #16
 80051b0:	d00a      	beq.n	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2b10      	cmp	r3, #16
 80051b6:	f200 808a 	bhi.w	80052ce <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d045      	beq.n	800524c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d075      	beq.n	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80051c6:	e082      	b.n	80052ce <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80051c8:	4b46      	ldr	r3, [pc, #280]	@ (80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80051ce:	4b45      	ldr	r3, [pc, #276]	@ (80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d07b      	beq.n	80052d2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	0c9b      	lsrs	r3, r3, #18
 80051de:	f003 030f 	and.w	r3, r3, #15
 80051e2:	4a41      	ldr	r2, [pc, #260]	@ (80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80051e4:	5cd3      	ldrb	r3, [r2, r3]
 80051e6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d015      	beq.n	800521e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80051f2:	4b3c      	ldr	r3, [pc, #240]	@ (80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	0c5b      	lsrs	r3, r3, #17
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	4a3b      	ldr	r2, [pc, #236]	@ (80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80051fe:	5cd3      	ldrb	r3, [r2, r3]
 8005200:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00d      	beq.n	8005228 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800520c:	4a38      	ldr	r2, [pc, #224]	@ (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	fbb2 f2f3 	udiv	r2, r2, r3
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	fb02 f303 	mul.w	r3, r2, r3
 800521a:	61fb      	str	r3, [r7, #28]
 800521c:	e004      	b.n	8005228 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	4a34      	ldr	r2, [pc, #208]	@ (80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005222:	fb02 f303 	mul.w	r3, r2, r3
 8005226:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005228:	4b2e      	ldr	r3, [pc, #184]	@ (80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005230:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005234:	d102      	bne.n	800523c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	61bb      	str	r3, [r7, #24]
      break;
 800523a:	e04a      	b.n	80052d2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	005b      	lsls	r3, r3, #1
 8005240:	4a2d      	ldr	r2, [pc, #180]	@ (80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005242:	fba2 2303 	umull	r2, r3, r2, r3
 8005246:	085b      	lsrs	r3, r3, #1
 8005248:	61bb      	str	r3, [r7, #24]
      break;
 800524a:	e042      	b.n	80052d2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800524c:	4b25      	ldr	r3, [pc, #148]	@ (80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800524e:	6a1b      	ldr	r3, [r3, #32]
 8005250:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005258:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800525c:	d108      	bne.n	8005270 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f003 0302 	and.w	r3, r3, #2
 8005264:	2b00      	cmp	r3, #0
 8005266:	d003      	beq.n	8005270 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005268:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800526c:	61bb      	str	r3, [r7, #24]
 800526e:	e01f      	b.n	80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005276:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800527a:	d109      	bne.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800527c:	4b19      	ldr	r3, [pc, #100]	@ (80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800527e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b00      	cmp	r3, #0
 8005286:	d003      	beq.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005288:	f649 4340 	movw	r3, #40000	@ 0x9c40
 800528c:	61bb      	str	r3, [r7, #24]
 800528e:	e00f      	b.n	80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005296:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800529a:	d11c      	bne.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800529c:	4b11      	ldr	r3, [pc, #68]	@ (80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d016      	beq.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80052a8:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80052ac:	61bb      	str	r3, [r7, #24]
      break;
 80052ae:	e012      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80052b0:	e011      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80052b2:	f7ff fe55 	bl	8004f60 <HAL_RCC_GetPCLK2Freq>
 80052b6:	4602      	mov	r2, r0
 80052b8:	4b0a      	ldr	r3, [pc, #40]	@ (80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	0b9b      	lsrs	r3, r3, #14
 80052be:	f003 0303 	and.w	r3, r3, #3
 80052c2:	3301      	adds	r3, #1
 80052c4:	005b      	lsls	r3, r3, #1
 80052c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ca:	61bb      	str	r3, [r7, #24]
      break;
 80052cc:	e004      	b.n	80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80052ce:	bf00      	nop
 80052d0:	e002      	b.n	80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80052d2:	bf00      	nop
 80052d4:	e000      	b.n	80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80052d6:	bf00      	nop
    }
  }
  return (frequency);
 80052d8:	69bb      	ldr	r3, [r7, #24]
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3720      	adds	r7, #32
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	40021000 	.word	0x40021000
 80052e8:	0800d314 	.word	0x0800d314
 80052ec:	0800d324 	.word	0x0800d324
 80052f0:	007a1200 	.word	0x007a1200
 80052f4:	003d0900 	.word	0x003d0900
 80052f8:	aaaaaaab 	.word	0xaaaaaaab

080052fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e041      	b.n	8005392 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d106      	bne.n	8005328 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f7fb fbde 	bl	8000ae4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	3304      	adds	r3, #4
 8005338:	4619      	mov	r1, r3
 800533a:	4610      	mov	r0, r2
 800533c:	f000 fb86 	bl	8005a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3708      	adds	r7, #8
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
	...

0800539c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d001      	beq.n	80053b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e03a      	b.n	800542a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2202      	movs	r2, #2
 80053b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68da      	ldr	r2, [r3, #12]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0201 	orr.w	r2, r2, #1
 80053ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a18      	ldr	r2, [pc, #96]	@ (8005434 <HAL_TIM_Base_Start_IT+0x98>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d00e      	beq.n	80053f4 <HAL_TIM_Base_Start_IT+0x58>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053de:	d009      	beq.n	80053f4 <HAL_TIM_Base_Start_IT+0x58>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a14      	ldr	r2, [pc, #80]	@ (8005438 <HAL_TIM_Base_Start_IT+0x9c>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d004      	beq.n	80053f4 <HAL_TIM_Base_Start_IT+0x58>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a13      	ldr	r2, [pc, #76]	@ (800543c <HAL_TIM_Base_Start_IT+0xa0>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d111      	bne.n	8005418 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f003 0307 	and.w	r3, r3, #7
 80053fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2b06      	cmp	r3, #6
 8005404:	d010      	beq.n	8005428 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f042 0201 	orr.w	r2, r2, #1
 8005414:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005416:	e007      	b.n	8005428 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f042 0201 	orr.w	r2, r2, #1
 8005426:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3714      	adds	r7, #20
 800542e:	46bd      	mov	sp, r7
 8005430:	bc80      	pop	{r7}
 8005432:	4770      	bx	lr
 8005434:	40012c00 	.word	0x40012c00
 8005438:	40000400 	.word	0x40000400
 800543c:	40000800 	.word	0x40000800

08005440 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e041      	b.n	80054d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d106      	bne.n	800546c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7fb fb74 	bl	8000b54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2202      	movs	r2, #2
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	3304      	adds	r3, #4
 800547c:	4619      	mov	r1, r3
 800547e:	4610      	mov	r0, r2
 8005480:	f000 fae4 	bl	8005a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3708      	adds	r7, #8
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054de:	b580      	push	{r7, lr}
 80054e0:	b082      	sub	sp, #8
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	f003 0302 	and.w	r3, r3, #2
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d122      	bne.n	800553a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d11b      	bne.n	800553a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f06f 0202 	mvn.w	r2, #2
 800550a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	f003 0303 	and.w	r3, r3, #3
 800551c:	2b00      	cmp	r3, #0
 800551e:	d003      	beq.n	8005528 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 fa77 	bl	8005a14 <HAL_TIM_IC_CaptureCallback>
 8005526:	e005      	b.n	8005534 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 fa6a 	bl	8005a02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 fa79 	bl	8005a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	f003 0304 	and.w	r3, r3, #4
 8005544:	2b04      	cmp	r3, #4
 8005546:	d122      	bne.n	800558e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	f003 0304 	and.w	r3, r3, #4
 8005552:	2b04      	cmp	r3, #4
 8005554:	d11b      	bne.n	800558e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f06f 0204 	mvn.w	r2, #4
 800555e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2202      	movs	r2, #2
 8005564:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005570:	2b00      	cmp	r3, #0
 8005572:	d003      	beq.n	800557c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 fa4d 	bl	8005a14 <HAL_TIM_IC_CaptureCallback>
 800557a:	e005      	b.n	8005588 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 fa40 	bl	8005a02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 fa4f 	bl	8005a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	f003 0308 	and.w	r3, r3, #8
 8005598:	2b08      	cmp	r3, #8
 800559a:	d122      	bne.n	80055e2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	f003 0308 	and.w	r3, r3, #8
 80055a6:	2b08      	cmp	r3, #8
 80055a8:	d11b      	bne.n	80055e2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f06f 0208 	mvn.w	r2, #8
 80055b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2204      	movs	r2, #4
 80055b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	69db      	ldr	r3, [r3, #28]
 80055c0:	f003 0303 	and.w	r3, r3, #3
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d003      	beq.n	80055d0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 fa23 	bl	8005a14 <HAL_TIM_IC_CaptureCallback>
 80055ce:	e005      	b.n	80055dc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 fa16 	bl	8005a02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fa25 	bl	8005a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	f003 0310 	and.w	r3, r3, #16
 80055ec:	2b10      	cmp	r3, #16
 80055ee:	d122      	bne.n	8005636 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	f003 0310 	and.w	r3, r3, #16
 80055fa:	2b10      	cmp	r3, #16
 80055fc:	d11b      	bne.n	8005636 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f06f 0210 	mvn.w	r2, #16
 8005606:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2208      	movs	r2, #8
 800560c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	69db      	ldr	r3, [r3, #28]
 8005614:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005618:	2b00      	cmp	r3, #0
 800561a:	d003      	beq.n	8005624 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f9f9 	bl	8005a14 <HAL_TIM_IC_CaptureCallback>
 8005622:	e005      	b.n	8005630 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 f9ec 	bl	8005a02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 f9fb 	bl	8005a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	f003 0301 	and.w	r3, r3, #1
 8005640:	2b01      	cmp	r3, #1
 8005642:	d10e      	bne.n	8005662 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b01      	cmp	r3, #1
 8005650:	d107      	bne.n	8005662 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f06f 0201 	mvn.w	r2, #1
 800565a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f7fb f921 	bl	80008a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800566c:	2b80      	cmp	r3, #128	@ 0x80
 800566e:	d10e      	bne.n	800568e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800567a:	2b80      	cmp	r3, #128	@ 0x80
 800567c:	d107      	bne.n	800568e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 fd17 	bl	80060bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005698:	2b40      	cmp	r3, #64	@ 0x40
 800569a:	d10e      	bne.n	80056ba <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056a6:	2b40      	cmp	r3, #64	@ 0x40
 80056a8:	d107      	bne.n	80056ba <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80056b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 f9bf 	bl	8005a38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	f003 0320 	and.w	r3, r3, #32
 80056c4:	2b20      	cmp	r3, #32
 80056c6:	d10e      	bne.n	80056e6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	f003 0320 	and.w	r3, r3, #32
 80056d2:	2b20      	cmp	r3, #32
 80056d4:	d107      	bne.n	80056e6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f06f 0220 	mvn.w	r2, #32
 80056de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 fce2 	bl	80060aa <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056e6:	bf00      	nop
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
	...

080056f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b086      	sub	sp, #24
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056fc:	2300      	movs	r3, #0
 80056fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005706:	2b01      	cmp	r3, #1
 8005708:	d101      	bne.n	800570e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800570a:	2302      	movs	r3, #2
 800570c:	e0ae      	b.n	800586c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b0c      	cmp	r3, #12
 800571a:	f200 809f 	bhi.w	800585c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800571e:	a201      	add	r2, pc, #4	@ (adr r2, 8005724 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005724:	08005759 	.word	0x08005759
 8005728:	0800585d 	.word	0x0800585d
 800572c:	0800585d 	.word	0x0800585d
 8005730:	0800585d 	.word	0x0800585d
 8005734:	08005799 	.word	0x08005799
 8005738:	0800585d 	.word	0x0800585d
 800573c:	0800585d 	.word	0x0800585d
 8005740:	0800585d 	.word	0x0800585d
 8005744:	080057db 	.word	0x080057db
 8005748:	0800585d 	.word	0x0800585d
 800574c:	0800585d 	.word	0x0800585d
 8005750:	0800585d 	.word	0x0800585d
 8005754:	0800581b 	.word	0x0800581b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68b9      	ldr	r1, [r7, #8]
 800575e:	4618      	mov	r0, r3
 8005760:	f000 f9d6 	bl	8005b10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	699a      	ldr	r2, [r3, #24]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f042 0208 	orr.w	r2, r2, #8
 8005772:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	699a      	ldr	r2, [r3, #24]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f022 0204 	bic.w	r2, r2, #4
 8005782:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6999      	ldr	r1, [r3, #24]
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	691a      	ldr	r2, [r3, #16]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	430a      	orrs	r2, r1
 8005794:	619a      	str	r2, [r3, #24]
      break;
 8005796:	e064      	b.n	8005862 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68b9      	ldr	r1, [r7, #8]
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 fa1c 	bl	8005bdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	699a      	ldr	r2, [r3, #24]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	699a      	ldr	r2, [r3, #24]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6999      	ldr	r1, [r3, #24]
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	021a      	lsls	r2, r3, #8
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	430a      	orrs	r2, r1
 80057d6:	619a      	str	r2, [r3, #24]
      break;
 80057d8:	e043      	b.n	8005862 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68b9      	ldr	r1, [r7, #8]
 80057e0:	4618      	mov	r0, r3
 80057e2:	f000 fa65 	bl	8005cb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	69da      	ldr	r2, [r3, #28]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f042 0208 	orr.w	r2, r2, #8
 80057f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	69da      	ldr	r2, [r3, #28]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f022 0204 	bic.w	r2, r2, #4
 8005804:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	69d9      	ldr	r1, [r3, #28]
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	691a      	ldr	r2, [r3, #16]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	430a      	orrs	r2, r1
 8005816:	61da      	str	r2, [r3, #28]
      break;
 8005818:	e023      	b.n	8005862 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68b9      	ldr	r1, [r7, #8]
 8005820:	4618      	mov	r0, r3
 8005822:	f000 faaf 	bl	8005d84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	69da      	ldr	r2, [r3, #28]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005834:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	69da      	ldr	r2, [r3, #28]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005844:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	69d9      	ldr	r1, [r3, #28]
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	021a      	lsls	r2, r3, #8
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	430a      	orrs	r2, r1
 8005858:	61da      	str	r2, [r3, #28]
      break;
 800585a:	e002      	b.n	8005862 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	75fb      	strb	r3, [r7, #23]
      break;
 8005860:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800586a:	7dfb      	ldrb	r3, [r7, #23]
}
 800586c:	4618      	mov	r0, r3
 800586e:	3718      	adds	r7, #24
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800587e:	2300      	movs	r3, #0
 8005880:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005888:	2b01      	cmp	r3, #1
 800588a:	d101      	bne.n	8005890 <HAL_TIM_ConfigClockSource+0x1c>
 800588c:	2302      	movs	r3, #2
 800588e:	e0b4      	b.n	80059fa <HAL_TIM_ConfigClockSource+0x186>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2202      	movs	r2, #2
 800589c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80058ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68ba      	ldr	r2, [r7, #8]
 80058be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058c8:	d03e      	beq.n	8005948 <HAL_TIM_ConfigClockSource+0xd4>
 80058ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058ce:	f200 8087 	bhi.w	80059e0 <HAL_TIM_ConfigClockSource+0x16c>
 80058d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058d6:	f000 8086 	beq.w	80059e6 <HAL_TIM_ConfigClockSource+0x172>
 80058da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058de:	d87f      	bhi.n	80059e0 <HAL_TIM_ConfigClockSource+0x16c>
 80058e0:	2b70      	cmp	r3, #112	@ 0x70
 80058e2:	d01a      	beq.n	800591a <HAL_TIM_ConfigClockSource+0xa6>
 80058e4:	2b70      	cmp	r3, #112	@ 0x70
 80058e6:	d87b      	bhi.n	80059e0 <HAL_TIM_ConfigClockSource+0x16c>
 80058e8:	2b60      	cmp	r3, #96	@ 0x60
 80058ea:	d050      	beq.n	800598e <HAL_TIM_ConfigClockSource+0x11a>
 80058ec:	2b60      	cmp	r3, #96	@ 0x60
 80058ee:	d877      	bhi.n	80059e0 <HAL_TIM_ConfigClockSource+0x16c>
 80058f0:	2b50      	cmp	r3, #80	@ 0x50
 80058f2:	d03c      	beq.n	800596e <HAL_TIM_ConfigClockSource+0xfa>
 80058f4:	2b50      	cmp	r3, #80	@ 0x50
 80058f6:	d873      	bhi.n	80059e0 <HAL_TIM_ConfigClockSource+0x16c>
 80058f8:	2b40      	cmp	r3, #64	@ 0x40
 80058fa:	d058      	beq.n	80059ae <HAL_TIM_ConfigClockSource+0x13a>
 80058fc:	2b40      	cmp	r3, #64	@ 0x40
 80058fe:	d86f      	bhi.n	80059e0 <HAL_TIM_ConfigClockSource+0x16c>
 8005900:	2b30      	cmp	r3, #48	@ 0x30
 8005902:	d064      	beq.n	80059ce <HAL_TIM_ConfigClockSource+0x15a>
 8005904:	2b30      	cmp	r3, #48	@ 0x30
 8005906:	d86b      	bhi.n	80059e0 <HAL_TIM_ConfigClockSource+0x16c>
 8005908:	2b20      	cmp	r3, #32
 800590a:	d060      	beq.n	80059ce <HAL_TIM_ConfigClockSource+0x15a>
 800590c:	2b20      	cmp	r3, #32
 800590e:	d867      	bhi.n	80059e0 <HAL_TIM_ConfigClockSource+0x16c>
 8005910:	2b00      	cmp	r3, #0
 8005912:	d05c      	beq.n	80059ce <HAL_TIM_ConfigClockSource+0x15a>
 8005914:	2b10      	cmp	r3, #16
 8005916:	d05a      	beq.n	80059ce <HAL_TIM_ConfigClockSource+0x15a>
 8005918:	e062      	b.n	80059e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800592a:	f000 faf0 	bl	8005f0e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800593c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	609a      	str	r2, [r3, #8]
      break;
 8005946:	e04f      	b.n	80059e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005958:	f000 fad9 	bl	8005f0e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689a      	ldr	r2, [r3, #8]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800596a:	609a      	str	r2, [r3, #8]
      break;
 800596c:	e03c      	b.n	80059e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800597a:	461a      	mov	r2, r3
 800597c:	f000 fa50 	bl	8005e20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2150      	movs	r1, #80	@ 0x50
 8005986:	4618      	mov	r0, r3
 8005988:	f000 faa7 	bl	8005eda <TIM_ITRx_SetConfig>
      break;
 800598c:	e02c      	b.n	80059e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800599a:	461a      	mov	r2, r3
 800599c:	f000 fa6e 	bl	8005e7c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2160      	movs	r1, #96	@ 0x60
 80059a6:	4618      	mov	r0, r3
 80059a8:	f000 fa97 	bl	8005eda <TIM_ITRx_SetConfig>
      break;
 80059ac:	e01c      	b.n	80059e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ba:	461a      	mov	r2, r3
 80059bc:	f000 fa30 	bl	8005e20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2140      	movs	r1, #64	@ 0x40
 80059c6:	4618      	mov	r0, r3
 80059c8:	f000 fa87 	bl	8005eda <TIM_ITRx_SetConfig>
      break;
 80059cc:	e00c      	b.n	80059e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4619      	mov	r1, r3
 80059d8:	4610      	mov	r0, r2
 80059da:	f000 fa7e 	bl	8005eda <TIM_ITRx_SetConfig>
      break;
 80059de:	e003      	b.n	80059e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	73fb      	strb	r3, [r7, #15]
      break;
 80059e4:	e000      	b.n	80059e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80059e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b083      	sub	sp, #12
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a0a:	bf00      	nop
 8005a0c:	370c      	adds	r7, #12
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bc80      	pop	{r7}
 8005a12:	4770      	bx	lr

08005a14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bc80      	pop	{r7}
 8005a24:	4770      	bx	lr

08005a26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a26:	b480      	push	{r7}
 8005a28:	b083      	sub	sp, #12
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a2e:	bf00      	nop
 8005a30:	370c      	adds	r7, #12
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bc80      	pop	{r7}
 8005a36:	4770      	bx	lr

08005a38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a40:	bf00      	nop
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bc80      	pop	{r7}
 8005a48:	4770      	bx	lr
	...

08005a4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a29      	ldr	r2, [pc, #164]	@ (8005b04 <TIM_Base_SetConfig+0xb8>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d00b      	beq.n	8005a7c <TIM_Base_SetConfig+0x30>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a6a:	d007      	beq.n	8005a7c <TIM_Base_SetConfig+0x30>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a26      	ldr	r2, [pc, #152]	@ (8005b08 <TIM_Base_SetConfig+0xbc>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d003      	beq.n	8005a7c <TIM_Base_SetConfig+0x30>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a25      	ldr	r2, [pc, #148]	@ (8005b0c <TIM_Base_SetConfig+0xc0>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d108      	bne.n	8005a8e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a1c      	ldr	r2, [pc, #112]	@ (8005b04 <TIM_Base_SetConfig+0xb8>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d00b      	beq.n	8005aae <TIM_Base_SetConfig+0x62>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a9c:	d007      	beq.n	8005aae <TIM_Base_SetConfig+0x62>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a19      	ldr	r2, [pc, #100]	@ (8005b08 <TIM_Base_SetConfig+0xbc>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d003      	beq.n	8005aae <TIM_Base_SetConfig+0x62>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a18      	ldr	r2, [pc, #96]	@ (8005b0c <TIM_Base_SetConfig+0xc0>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d108      	bne.n	8005ac0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ab4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	689a      	ldr	r2, [r3, #8]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a07      	ldr	r2, [pc, #28]	@ (8005b04 <TIM_Base_SetConfig+0xb8>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d103      	bne.n	8005af4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	691a      	ldr	r2, [r3, #16]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	615a      	str	r2, [r3, #20]
}
 8005afa:	bf00      	nop
 8005afc:	3714      	adds	r7, #20
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bc80      	pop	{r7}
 8005b02:	4770      	bx	lr
 8005b04:	40012c00 	.word	0x40012c00
 8005b08:	40000400 	.word	0x40000400
 8005b0c:	40000800 	.word	0x40000800

08005b10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b087      	sub	sp, #28
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	f023 0201 	bic.w	r2, r3, #1
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f023 0303 	bic.w	r3, r3, #3
 8005b46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f023 0302 	bic.w	r3, r3, #2
 8005b58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a1c      	ldr	r2, [pc, #112]	@ (8005bd8 <TIM_OC1_SetConfig+0xc8>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d10c      	bne.n	8005b86 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	f023 0308 	bic.w	r3, r3, #8
 8005b72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	f023 0304 	bic.w	r3, r3, #4
 8005b84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a13      	ldr	r2, [pc, #76]	@ (8005bd8 <TIM_OC1_SetConfig+0xc8>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d111      	bne.n	8005bb2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	699b      	ldr	r3, [r3, #24]
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	685a      	ldr	r2, [r3, #4]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	697a      	ldr	r2, [r7, #20]
 8005bca:	621a      	str	r2, [r3, #32]
}
 8005bcc:	bf00      	nop
 8005bce:	371c      	adds	r7, #28
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bc80      	pop	{r7}
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	40012c00 	.word	0x40012c00

08005bdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b087      	sub	sp, #28
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a1b      	ldr	r3, [r3, #32]
 8005bf0:	f023 0210 	bic.w	r2, r3, #16
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	021b      	lsls	r3, r3, #8
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	f023 0320 	bic.w	r3, r3, #32
 8005c26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	011b      	lsls	r3, r3, #4
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a1d      	ldr	r2, [pc, #116]	@ (8005cac <TIM_OC2_SetConfig+0xd0>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d10d      	bne.n	8005c58 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	011b      	lsls	r3, r3, #4
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a14      	ldr	r2, [pc, #80]	@ (8005cac <TIM_OC2_SetConfig+0xd0>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d113      	bne.n	8005c88 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	695b      	ldr	r3, [r3, #20]
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	693a      	ldr	r2, [r7, #16]
 8005c8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	685a      	ldr	r2, [r3, #4]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	621a      	str	r2, [r3, #32]
}
 8005ca2:	bf00      	nop
 8005ca4:	371c      	adds	r7, #28
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bc80      	pop	{r7}
 8005caa:	4770      	bx	lr
 8005cac:	40012c00 	.word	0x40012c00

08005cb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b087      	sub	sp, #28
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a1b      	ldr	r3, [r3, #32]
 8005cc4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f023 0303 	bic.w	r3, r3, #3
 8005ce6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005cf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	021b      	lsls	r3, r3, #8
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a1d      	ldr	r2, [pc, #116]	@ (8005d80 <TIM_OC3_SetConfig+0xd0>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d10d      	bne.n	8005d2a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	021b      	lsls	r3, r3, #8
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a14      	ldr	r2, [pc, #80]	@ (8005d80 <TIM_OC3_SetConfig+0xd0>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d113      	bne.n	8005d5a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	011b      	lsls	r3, r3, #4
 8005d48:	693a      	ldr	r2, [r7, #16]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	011b      	lsls	r3, r3, #4
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	693a      	ldr	r2, [r7, #16]
 8005d5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	685a      	ldr	r2, [r3, #4]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	621a      	str	r2, [r3, #32]
}
 8005d74:	bf00      	nop
 8005d76:	371c      	adds	r7, #28
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bc80      	pop	{r7}
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	40012c00 	.word	0x40012c00

08005d84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b087      	sub	sp, #28
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a1b      	ldr	r3, [r3, #32]
 8005d98:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	69db      	ldr	r3, [r3, #28]
 8005daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	021b      	lsls	r3, r3, #8
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005dce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	031b      	lsls	r3, r3, #12
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a0f      	ldr	r2, [pc, #60]	@ (8005e1c <TIM_OC4_SetConfig+0x98>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d109      	bne.n	8005df8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005dea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	695b      	ldr	r3, [r3, #20]
 8005df0:	019b      	lsls	r3, r3, #6
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	685a      	ldr	r2, [r3, #4]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	621a      	str	r2, [r3, #32]
}
 8005e12:	bf00      	nop
 8005e14:	371c      	adds	r7, #28
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bc80      	pop	{r7}
 8005e1a:	4770      	bx	lr
 8005e1c:	40012c00 	.word	0x40012c00

08005e20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b087      	sub	sp, #28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6a1b      	ldr	r3, [r3, #32]
 8005e30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	f023 0201 	bic.w	r2, r3, #1
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	699b      	ldr	r3, [r3, #24]
 8005e42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	011b      	lsls	r3, r3, #4
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f023 030a 	bic.w	r3, r3, #10
 8005e5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	621a      	str	r2, [r3, #32]
}
 8005e72:	bf00      	nop
 8005e74:	371c      	adds	r7, #28
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bc80      	pop	{r7}
 8005e7a:	4770      	bx	lr

08005e7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b087      	sub	sp, #28
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	f023 0210 	bic.w	r2, r3, #16
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ea6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	031b      	lsls	r3, r3, #12
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005eb8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	011b      	lsls	r3, r3, #4
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	621a      	str	r2, [r3, #32]
}
 8005ed0:	bf00      	nop
 8005ed2:	371c      	adds	r7, #28
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bc80      	pop	{r7}
 8005ed8:	4770      	bx	lr

08005eda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005eda:	b480      	push	{r7}
 8005edc:	b085      	sub	sp, #20
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
 8005ee2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ef0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ef2:	683a      	ldr	r2, [r7, #0]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	f043 0307 	orr.w	r3, r3, #7
 8005efc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	609a      	str	r2, [r3, #8]
}
 8005f04:	bf00      	nop
 8005f06:	3714      	adds	r7, #20
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bc80      	pop	{r7}
 8005f0c:	4770      	bx	lr

08005f0e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f0e:	b480      	push	{r7}
 8005f10:	b087      	sub	sp, #28
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	60f8      	str	r0, [r7, #12]
 8005f16:	60b9      	str	r1, [r7, #8]
 8005f18:	607a      	str	r2, [r7, #4]
 8005f1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f28:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	021a      	lsls	r2, r3, #8
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	431a      	orrs	r2, r3
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	609a      	str	r2, [r3, #8]
}
 8005f42:	bf00      	nop
 8005f44:	371c      	adds	r7, #28
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bc80      	pop	{r7}
 8005f4a:	4770      	bx	lr

08005f4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d101      	bne.n	8005f64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f60:	2302      	movs	r3, #2
 8005f62:	e046      	b.n	8005ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2202      	movs	r2, #2
 8005f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a16      	ldr	r2, [pc, #88]	@ (8005ffc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d00e      	beq.n	8005fc6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fb0:	d009      	beq.n	8005fc6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a12      	ldr	r2, [pc, #72]	@ (8006000 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d004      	beq.n	8005fc6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a10      	ldr	r2, [pc, #64]	@ (8006004 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d10c      	bne.n	8005fe0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3714      	adds	r7, #20
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bc80      	pop	{r7}
 8005ffa:	4770      	bx	lr
 8005ffc:	40012c00 	.word	0x40012c00
 8006000:	40000400 	.word	0x40000400
 8006004:	40000800 	.word	0x40000800

08006008 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006012:	2300      	movs	r3, #0
 8006014:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800601c:	2b01      	cmp	r3, #1
 800601e:	d101      	bne.n	8006024 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006020:	2302      	movs	r3, #2
 8006022:	e03d      	b.n	80060a0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	4313      	orrs	r3, r2
 8006038:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	4313      	orrs	r3, r2
 8006046:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	4313      	orrs	r3, r2
 8006054:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4313      	orrs	r3, r2
 8006062:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	4313      	orrs	r3, r2
 8006070:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	695b      	ldr	r3, [r3, #20]
 800607c:	4313      	orrs	r3, r2
 800607e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	69db      	ldr	r3, [r3, #28]
 800608a:	4313      	orrs	r3, r2
 800608c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3714      	adds	r7, #20
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bc80      	pop	{r7}
 80060a8:	4770      	bx	lr

080060aa <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060aa:	b480      	push	{r7}
 80060ac:	b083      	sub	sp, #12
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060b2:	bf00      	nop
 80060b4:	370c      	adds	r7, #12
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bc80      	pop	{r7}
 80060ba:	4770      	bx	lr

080060bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060c4:	bf00      	nop
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bc80      	pop	{r7}
 80060cc:	4770      	bx	lr

080060ce <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80060ce:	b084      	sub	sp, #16
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	f107 0014 	add.w	r0, r7, #20
 80060dc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	370c      	adds	r7, #12
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bc80      	pop	{r7}
 80060ea:	b004      	add	sp, #16
 80060ec:	4770      	bx	lr

080060ee <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b085      	sub	sp, #20
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80060fe:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006102:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	b29a      	uxth	r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3714      	adds	r7, #20
 8006114:	46bd      	mov	sp, r7
 8006116:	bc80      	pop	{r7}
 8006118:	4770      	bx	lr

0800611a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800611a:	b480      	push	{r7}
 800611c:	b085      	sub	sp, #20
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006122:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006126:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800612e:	b29a      	uxth	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	b29b      	uxth	r3, r3
 8006134:	43db      	mvns	r3, r3
 8006136:	b29b      	uxth	r3, r3
 8006138:	4013      	ands	r3, r2
 800613a:	b29a      	uxth	r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3714      	adds	r7, #20
 8006148:	46bd      	mov	sp, r7
 800614a:	bc80      	pop	{r7}
 800614c:	4770      	bx	lr

0800614e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800614e:	b480      	push	{r7}
 8006150:	b083      	sub	sp, #12
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
 8006156:	460b      	mov	r3, r1
 8006158:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800615a:	2300      	movs	r3, #0
}
 800615c:	4618      	mov	r0, r3
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	bc80      	pop	{r7}
 8006164:	4770      	bx	lr

08006166 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006166:	b084      	sub	sp, #16
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	f107 0014 	add.w	r0, r7, #20
 8006174:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	370c      	adds	r7, #12
 800619e:	46bd      	mov	sp, r7
 80061a0:	bc80      	pop	{r7}
 80061a2:	b004      	add	sp, #16
 80061a4:	4770      	bx	lr
	...

080061a8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b09d      	sub	sp, #116	@ 0x74
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80061b2:	2300      	movs	r3, #0
 80061b4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4413      	add	r3, r2
 80061c2:	881b      	ldrh	r3, [r3, #0]
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80061ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061ce:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	78db      	ldrb	r3, [r3, #3]
 80061d6:	2b03      	cmp	r3, #3
 80061d8:	d81f      	bhi.n	800621a <USB_ActivateEndpoint+0x72>
 80061da:	a201      	add	r2, pc, #4	@ (adr r2, 80061e0 <USB_ActivateEndpoint+0x38>)
 80061dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e0:	080061f1 	.word	0x080061f1
 80061e4:	0800620d 	.word	0x0800620d
 80061e8:	08006223 	.word	0x08006223
 80061ec:	080061ff 	.word	0x080061ff
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80061f0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80061f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80061f8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80061fc:	e012      	b.n	8006224 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80061fe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006202:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006206:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800620a:	e00b      	b.n	8006224 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800620c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006210:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006214:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006218:	e004      	b.n	8006224 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8006220:	e000      	b.n	8006224 <USB_ActivateEndpoint+0x7c>
      break;
 8006222:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	441a      	add	r2, r3
 800622e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006232:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006236:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800623a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800623e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006242:	b29b      	uxth	r3, r3
 8006244:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	4413      	add	r3, r2
 8006250:	881b      	ldrh	r3, [r3, #0]
 8006252:	b29b      	uxth	r3, r3
 8006254:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006258:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800625c:	b29b      	uxth	r3, r3
 800625e:	683a      	ldr	r2, [r7, #0]
 8006260:	7812      	ldrb	r2, [r2, #0]
 8006262:	4313      	orrs	r3, r2
 8006264:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	441a      	add	r2, r3
 8006272:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006276:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800627a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800627e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006282:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006286:	b29b      	uxth	r3, r3
 8006288:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	7b1b      	ldrb	r3, [r3, #12]
 800628e:	2b00      	cmp	r3, #0
 8006290:	f040 8178 	bne.w	8006584 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	785b      	ldrb	r3, [r3, #1]
 8006298:	2b00      	cmp	r3, #0
 800629a:	f000 8084 	beq.w	80063a6 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	61bb      	str	r3, [r7, #24]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	461a      	mov	r2, r3
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	4413      	add	r3, r2
 80062b0:	61bb      	str	r3, [r7, #24]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	011a      	lsls	r2, r3, #4
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	4413      	add	r3, r2
 80062bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80062c0:	617b      	str	r3, [r7, #20]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	88db      	ldrh	r3, [r3, #6]
 80062c6:	085b      	lsrs	r3, r3, #1
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	005b      	lsls	r3, r3, #1
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	4413      	add	r3, r2
 80062dc:	881b      	ldrh	r3, [r3, #0]
 80062de:	827b      	strh	r3, [r7, #18]
 80062e0:	8a7b      	ldrh	r3, [r7, #18]
 80062e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d01b      	beq.n	8006322 <USB_ActivateEndpoint+0x17a>
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	4413      	add	r3, r2
 80062f4:	881b      	ldrh	r3, [r3, #0]
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006300:	823b      	strh	r3, [r7, #16]
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	441a      	add	r2, r3
 800630c:	8a3b      	ldrh	r3, [r7, #16]
 800630e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006312:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006316:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800631a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800631e:	b29b      	uxth	r3, r3
 8006320:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	78db      	ldrb	r3, [r3, #3]
 8006326:	2b01      	cmp	r3, #1
 8006328:	d020      	beq.n	800636c <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	4413      	add	r3, r2
 8006334:	881b      	ldrh	r3, [r3, #0]
 8006336:	b29b      	uxth	r3, r3
 8006338:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800633c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006340:	81bb      	strh	r3, [r7, #12]
 8006342:	89bb      	ldrh	r3, [r7, #12]
 8006344:	f083 0320 	eor.w	r3, r3, #32
 8006348:	81bb      	strh	r3, [r7, #12]
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	441a      	add	r2, r3
 8006354:	89bb      	ldrh	r3, [r7, #12]
 8006356:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800635a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800635e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006362:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006366:	b29b      	uxth	r3, r3
 8006368:	8013      	strh	r3, [r2, #0]
 800636a:	e2d5      	b.n	8006918 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	4413      	add	r3, r2
 8006376:	881b      	ldrh	r3, [r3, #0]
 8006378:	b29b      	uxth	r3, r3
 800637a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800637e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006382:	81fb      	strh	r3, [r7, #14]
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	441a      	add	r2, r3
 800638e:	89fb      	ldrh	r3, [r7, #14]
 8006390:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006394:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006398:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800639c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	8013      	strh	r3, [r2, #0]
 80063a4:	e2b8      	b.n	8006918 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	461a      	mov	r2, r3
 80063b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b6:	4413      	add	r3, r2
 80063b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	011a      	lsls	r2, r3, #4
 80063c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80063c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	88db      	ldrh	r3, [r3, #6]
 80063ce:	085b      	lsrs	r3, r3, #1
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	005b      	lsls	r3, r3, #1
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063d8:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	461a      	mov	r2, r3
 80063e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ea:	4413      	add	r3, r2
 80063ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	011a      	lsls	r2, r3, #4
 80063f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063f6:	4413      	add	r3, r2
 80063f8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80063fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80063fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006400:	881b      	ldrh	r3, [r3, #0]
 8006402:	b29b      	uxth	r3, r3
 8006404:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006408:	b29a      	uxth	r2, r3
 800640a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640c:	801a      	strh	r2, [r3, #0]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	2b3e      	cmp	r3, #62	@ 0x3e
 8006414:	d91d      	bls.n	8006452 <USB_ActivateEndpoint+0x2aa>
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	095b      	lsrs	r3, r3, #5
 800641c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	f003 031f 	and.w	r3, r3, #31
 8006426:	2b00      	cmp	r3, #0
 8006428:	d102      	bne.n	8006430 <USB_ActivateEndpoint+0x288>
 800642a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800642c:	3b01      	subs	r3, #1
 800642e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006432:	881b      	ldrh	r3, [r3, #0]
 8006434:	b29a      	uxth	r2, r3
 8006436:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006438:	b29b      	uxth	r3, r3
 800643a:	029b      	lsls	r3, r3, #10
 800643c:	b29b      	uxth	r3, r3
 800643e:	4313      	orrs	r3, r2
 8006440:	b29b      	uxth	r3, r3
 8006442:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006446:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800644a:	b29a      	uxth	r2, r3
 800644c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644e:	801a      	strh	r2, [r3, #0]
 8006450:	e026      	b.n	80064a0 <USB_ActivateEndpoint+0x2f8>
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10a      	bne.n	8006470 <USB_ActivateEndpoint+0x2c8>
 800645a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645c:	881b      	ldrh	r3, [r3, #0]
 800645e:	b29b      	uxth	r3, r3
 8006460:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006464:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006468:	b29a      	uxth	r2, r3
 800646a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646c:	801a      	strh	r2, [r3, #0]
 800646e:	e017      	b.n	80064a0 <USB_ActivateEndpoint+0x2f8>
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	085b      	lsrs	r3, r3, #1
 8006476:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	f003 0301 	and.w	r3, r3, #1
 8006480:	2b00      	cmp	r3, #0
 8006482:	d002      	beq.n	800648a <USB_ActivateEndpoint+0x2e2>
 8006484:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006486:	3301      	adds	r3, #1
 8006488:	66bb      	str	r3, [r7, #104]	@ 0x68
 800648a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648c:	881b      	ldrh	r3, [r3, #0]
 800648e:	b29a      	uxth	r2, r3
 8006490:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006492:	b29b      	uxth	r3, r3
 8006494:	029b      	lsls	r3, r3, #10
 8006496:	b29b      	uxth	r3, r3
 8006498:	4313      	orrs	r3, r2
 800649a:	b29a      	uxth	r2, r3
 800649c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4413      	add	r3, r2
 80064aa:	881b      	ldrh	r3, [r3, #0]
 80064ac:	847b      	strh	r3, [r7, #34]	@ 0x22
 80064ae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80064b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d01b      	beq.n	80064f0 <USB_ActivateEndpoint+0x348>
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	4413      	add	r3, r2
 80064c2:	881b      	ldrh	r3, [r3, #0]
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ce:	843b      	strh	r3, [r7, #32]
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	441a      	add	r2, r3
 80064da:	8c3b      	ldrh	r3, [r7, #32]
 80064dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80064e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d124      	bne.n	8006542 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	881b      	ldrh	r3, [r3, #0]
 8006504:	b29b      	uxth	r3, r3
 8006506:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800650a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800650e:	83bb      	strh	r3, [r7, #28]
 8006510:	8bbb      	ldrh	r3, [r7, #28]
 8006512:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006516:	83bb      	strh	r3, [r7, #28]
 8006518:	8bbb      	ldrh	r3, [r7, #28]
 800651a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800651e:	83bb      	strh	r3, [r7, #28]
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	441a      	add	r2, r3
 800652a:	8bbb      	ldrh	r3, [r7, #28]
 800652c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006530:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006534:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006538:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800653c:	b29b      	uxth	r3, r3
 800653e:	8013      	strh	r3, [r2, #0]
 8006540:	e1ea      	b.n	8006918 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	881b      	ldrh	r3, [r3, #0]
 800654e:	b29b      	uxth	r3, r3
 8006550:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006554:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006558:	83fb      	strh	r3, [r7, #30]
 800655a:	8bfb      	ldrh	r3, [r7, #30]
 800655c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006560:	83fb      	strh	r3, [r7, #30]
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	441a      	add	r2, r3
 800656c:	8bfb      	ldrh	r3, [r7, #30]
 800656e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006572:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006576:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800657a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800657e:	b29b      	uxth	r3, r3
 8006580:	8013      	strh	r3, [r2, #0]
 8006582:	e1c9      	b.n	8006918 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	78db      	ldrb	r3, [r3, #3]
 8006588:	2b02      	cmp	r3, #2
 800658a:	d11e      	bne.n	80065ca <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	4413      	add	r3, r2
 8006596:	881b      	ldrh	r3, [r3, #0]
 8006598:	b29b      	uxth	r3, r3
 800659a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800659e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065a2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	441a      	add	r2, r3
 80065b0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80065b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065bc:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80065c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	8013      	strh	r3, [r2, #0]
 80065c8:	e01d      	b.n	8006606 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	881b      	ldrh	r3, [r3, #0]
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80065dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065e0:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	441a      	add	r2, r3
 80065ee:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80065f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006602:	b29b      	uxth	r3, r3
 8006604:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006610:	b29b      	uxth	r3, r3
 8006612:	461a      	mov	r2, r3
 8006614:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006616:	4413      	add	r3, r2
 8006618:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	011a      	lsls	r2, r3, #4
 8006620:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006622:	4413      	add	r3, r2
 8006624:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006628:	65bb      	str	r3, [r7, #88]	@ 0x58
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	891b      	ldrh	r3, [r3, #8]
 800662e:	085b      	lsrs	r3, r3, #1
 8006630:	b29b      	uxth	r3, r3
 8006632:	005b      	lsls	r3, r3, #1
 8006634:	b29a      	uxth	r2, r3
 8006636:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006638:	801a      	strh	r2, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	657b      	str	r3, [r7, #84]	@ 0x54
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006644:	b29b      	uxth	r3, r3
 8006646:	461a      	mov	r2, r3
 8006648:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800664a:	4413      	add	r3, r2
 800664c:	657b      	str	r3, [r7, #84]	@ 0x54
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	011a      	lsls	r2, r3, #4
 8006654:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006656:	4413      	add	r3, r2
 8006658:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800665c:	653b      	str	r3, [r7, #80]	@ 0x50
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	895b      	ldrh	r3, [r3, #10]
 8006662:	085b      	lsrs	r3, r3, #1
 8006664:	b29b      	uxth	r3, r3
 8006666:	005b      	lsls	r3, r3, #1
 8006668:	b29a      	uxth	r2, r3
 800666a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800666c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	785b      	ldrb	r3, [r3, #1]
 8006672:	2b00      	cmp	r3, #0
 8006674:	f040 8093 	bne.w	800679e <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	4413      	add	r3, r2
 8006682:	881b      	ldrh	r3, [r3, #0]
 8006684:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006688:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800668c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d01b      	beq.n	80066cc <USB_ActivateEndpoint+0x524>
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	4413      	add	r3, r2
 800669e:	881b      	ldrh	r3, [r3, #0]
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066aa:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	441a      	add	r2, r3
 80066b6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80066b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80066c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4413      	add	r3, r2
 80066d6:	881b      	ldrh	r3, [r3, #0]
 80066d8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80066da:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80066dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d01b      	beq.n	800671c <USB_ActivateEndpoint+0x574>
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	4413      	add	r3, r2
 80066ee:	881b      	ldrh	r3, [r3, #0]
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066fa:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	441a      	add	r2, r3
 8006706:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006708:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800670c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006710:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006714:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006718:	b29b      	uxth	r3, r3
 800671a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	4413      	add	r3, r2
 8006726:	881b      	ldrh	r3, [r3, #0]
 8006728:	b29b      	uxth	r3, r3
 800672a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800672e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006732:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006734:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006736:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800673a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800673c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800673e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006742:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	441a      	add	r2, r3
 800674e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006750:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006754:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006758:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800675c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006760:	b29b      	uxth	r3, r3
 8006762:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4413      	add	r3, r2
 800676e:	881b      	ldrh	r3, [r3, #0]
 8006770:	b29b      	uxth	r3, r3
 8006772:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006776:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800677a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	441a      	add	r2, r3
 8006786:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006788:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800678c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006790:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006798:	b29b      	uxth	r3, r3
 800679a:	8013      	strh	r3, [r2, #0]
 800679c:	e0bc      	b.n	8006918 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4413      	add	r3, r2
 80067a8:	881b      	ldrh	r3, [r3, #0]
 80067aa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80067ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80067b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d01d      	beq.n	80067f6 <USB_ActivateEndpoint+0x64e>
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	4413      	add	r3, r2
 80067c4:	881b      	ldrh	r3, [r3, #0]
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067d0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	441a      	add	r2, r3
 80067de:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80067e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80067ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	4413      	add	r3, r2
 8006800:	881b      	ldrh	r3, [r3, #0]
 8006802:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006806:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800680a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800680e:	2b00      	cmp	r3, #0
 8006810:	d01d      	beq.n	800684e <USB_ActivateEndpoint+0x6a6>
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	4413      	add	r3, r2
 800681c:	881b      	ldrh	r3, [r3, #0]
 800681e:	b29b      	uxth	r3, r3
 8006820:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006824:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006828:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	441a      	add	r2, r3
 8006836:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800683a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800683e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006842:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006846:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800684a:	b29b      	uxth	r3, r3
 800684c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	78db      	ldrb	r3, [r3, #3]
 8006852:	2b01      	cmp	r3, #1
 8006854:	d024      	beq.n	80068a0 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	4413      	add	r3, r2
 8006860:	881b      	ldrh	r3, [r3, #0]
 8006862:	b29b      	uxth	r3, r3
 8006864:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006868:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800686c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006870:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006874:	f083 0320 	eor.w	r3, r3, #32
 8006878:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	441a      	add	r2, r3
 8006886:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800688a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800688e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006892:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006896:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800689a:	b29b      	uxth	r3, r3
 800689c:	8013      	strh	r3, [r2, #0]
 800689e:	e01d      	b.n	80068dc <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4413      	add	r3, r2
 80068aa:	881b      	ldrh	r3, [r3, #0]
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068b6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	441a      	add	r2, r3
 80068c4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80068c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068d8:	b29b      	uxth	r3, r3
 80068da:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	4413      	add	r3, r2
 80068e6:	881b      	ldrh	r3, [r3, #0]
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068f2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	441a      	add	r2, r3
 8006900:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006904:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006908:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800690c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006910:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006914:	b29b      	uxth	r3, r3
 8006916:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006918:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800691c:	4618      	mov	r0, r3
 800691e:	3774      	adds	r7, #116	@ 0x74
 8006920:	46bd      	mov	sp, r7
 8006922:	bc80      	pop	{r7}
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop

08006928 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006928:	b480      	push	{r7}
 800692a:	b08d      	sub	sp, #52	@ 0x34
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	7b1b      	ldrb	r3, [r3, #12]
 8006936:	2b00      	cmp	r3, #0
 8006938:	f040 808e 	bne.w	8006a58 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	785b      	ldrb	r3, [r3, #1]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d044      	beq.n	80069ce <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4413      	add	r3, r2
 800694e:	881b      	ldrh	r3, [r3, #0]
 8006950:	81bb      	strh	r3, [r7, #12]
 8006952:	89bb      	ldrh	r3, [r7, #12]
 8006954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006958:	2b00      	cmp	r3, #0
 800695a:	d01b      	beq.n	8006994 <USB_DeactivateEndpoint+0x6c>
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	4413      	add	r3, r2
 8006966:	881b      	ldrh	r3, [r3, #0]
 8006968:	b29b      	uxth	r3, r3
 800696a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800696e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006972:	817b      	strh	r3, [r7, #10]
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	441a      	add	r2, r3
 800697e:	897b      	ldrh	r3, [r7, #10]
 8006980:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006984:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006988:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800698c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006990:	b29b      	uxth	r3, r3
 8006992:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	4413      	add	r3, r2
 800699e:	881b      	ldrh	r3, [r3, #0]
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069aa:	813b      	strh	r3, [r7, #8]
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	441a      	add	r2, r3
 80069b6:	893b      	ldrh	r3, [r7, #8]
 80069b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	8013      	strh	r3, [r2, #0]
 80069cc:	e192      	b.n	8006cf4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	4413      	add	r3, r2
 80069d8:	881b      	ldrh	r3, [r3, #0]
 80069da:	827b      	strh	r3, [r7, #18]
 80069dc:	8a7b      	ldrh	r3, [r7, #18]
 80069de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d01b      	beq.n	8006a1e <USB_DeactivateEndpoint+0xf6>
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4413      	add	r3, r2
 80069f0:	881b      	ldrh	r3, [r3, #0]
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069fc:	823b      	strh	r3, [r7, #16]
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	441a      	add	r2, r3
 8006a08:	8a3b      	ldrh	r3, [r7, #16]
 8006a0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a12:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006a16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	881b      	ldrh	r3, [r3, #0]
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a34:	81fb      	strh	r3, [r7, #14]
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	441a      	add	r2, r3
 8006a40:	89fb      	ldrh	r3, [r7, #14]
 8006a42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	8013      	strh	r3, [r2, #0]
 8006a56:	e14d      	b.n	8006cf4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	785b      	ldrb	r3, [r3, #1]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f040 80a5 	bne.w	8006bac <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	4413      	add	r3, r2
 8006a6c:	881b      	ldrh	r3, [r3, #0]
 8006a6e:	843b      	strh	r3, [r7, #32]
 8006a70:	8c3b      	ldrh	r3, [r7, #32]
 8006a72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d01b      	beq.n	8006ab2 <USB_DeactivateEndpoint+0x18a>
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	4413      	add	r3, r2
 8006a84:	881b      	ldrh	r3, [r3, #0]
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a90:	83fb      	strh	r3, [r7, #30]
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	441a      	add	r2, r3
 8006a9c:	8bfb      	ldrh	r3, [r7, #30]
 8006a9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006aa2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006aa6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006aaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	4413      	add	r3, r2
 8006abc:	881b      	ldrh	r3, [r3, #0]
 8006abe:	83bb      	strh	r3, [r7, #28]
 8006ac0:	8bbb      	ldrh	r3, [r7, #28]
 8006ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d01b      	beq.n	8006b02 <USB_DeactivateEndpoint+0x1da>
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	4413      	add	r3, r2
 8006ad4:	881b      	ldrh	r3, [r3, #0]
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006adc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ae0:	837b      	strh	r3, [r7, #26]
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	441a      	add	r2, r3
 8006aec:	8b7b      	ldrh	r3, [r7, #26]
 8006aee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006af2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006af6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006afa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	4413      	add	r3, r2
 8006b0c:	881b      	ldrh	r3, [r3, #0]
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b18:	833b      	strh	r3, [r7, #24]
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	441a      	add	r2, r3
 8006b24:	8b3b      	ldrh	r3, [r7, #24]
 8006b26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b32:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4413      	add	r3, r2
 8006b44:	881b      	ldrh	r3, [r3, #0]
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b50:	82fb      	strh	r3, [r7, #22]
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	441a      	add	r2, r3
 8006b5c:	8afb      	ldrh	r3, [r7, #22]
 8006b5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	881b      	ldrh	r3, [r3, #0]
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b88:	82bb      	strh	r3, [r7, #20]
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	441a      	add	r2, r3
 8006b94:	8abb      	ldrh	r3, [r7, #20]
 8006b96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ba2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	8013      	strh	r3, [r2, #0]
 8006baa:	e0a3      	b.n	8006cf4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	4413      	add	r3, r2
 8006bb6:	881b      	ldrh	r3, [r3, #0]
 8006bb8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006bba:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006bbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d01b      	beq.n	8006bfc <USB_DeactivateEndpoint+0x2d4>
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	4413      	add	r3, r2
 8006bce:	881b      	ldrh	r3, [r3, #0]
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bda:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	441a      	add	r2, r3
 8006be6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006be8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bf0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006bf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4413      	add	r3, r2
 8006c06:	881b      	ldrh	r3, [r3, #0]
 8006c08:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006c0a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d01b      	beq.n	8006c4c <USB_DeactivateEndpoint+0x324>
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	4413      	add	r3, r2
 8006c1e:	881b      	ldrh	r3, [r3, #0]
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c2a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	441a      	add	r2, r3
 8006c36:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006c38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c44:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	4413      	add	r3, r2
 8006c56:	881b      	ldrh	r3, [r3, #0]
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c62:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	441a      	add	r2, r3
 8006c6e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006c70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006c7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4413      	add	r3, r2
 8006c8e:	881b      	ldrh	r3, [r3, #0]
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c9a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	441a      	add	r2, r3
 8006ca6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006ca8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4413      	add	r3, r2
 8006cc6:	881b      	ldrh	r3, [r3, #0]
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006cce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cd2:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	441a      	add	r2, r3
 8006cde:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006ce0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ce4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ce8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3734      	adds	r7, #52	@ 0x34
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bc80      	pop	{r7}
 8006cfe:	4770      	bx	lr

08006d00 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b0c2      	sub	sp, #264	@ 0x108
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d0e:	6018      	str	r0, [r3, #0]
 8006d10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d18:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	785b      	ldrb	r3, [r3, #1]
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	f040 86b7 	bne.w	8007a9a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006d2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	699a      	ldr	r2, [r3, #24]
 8006d38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d908      	bls.n	8006d5a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006d48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006d58:	e007      	b.n	8006d6a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006d5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006d6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	7b1b      	ldrb	r3, [r3, #12]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d13a      	bne.n	8006df0 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006d7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	6959      	ldr	r1, [r3, #20]
 8006d86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	88da      	ldrh	r2, [r3, #6]
 8006d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006d9c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006da0:	6800      	ldr	r0, [r0, #0]
 8006da2:	f001 fc9c 	bl	80086de <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006da6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006daa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	613b      	str	r3, [r7, #16]
 8006db2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006db6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	613b      	str	r3, [r7, #16]
 8006dca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	011a      	lsls	r2, r3, #4
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	4413      	add	r3, r2
 8006ddc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006de0:	60fb      	str	r3, [r7, #12]
 8006de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	801a      	strh	r2, [r3, #0]
 8006dec:	f000 be1f 	b.w	8007a2e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006df0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006df4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	78db      	ldrb	r3, [r3, #3]
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	f040 8462 	bne.w	80076c6 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006e02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	6a1a      	ldr	r2, [r3, #32]
 8006e0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	f240 83df 	bls.w	80075de <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006e20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	881b      	ldrh	r3, [r3, #0]
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e46:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006e4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	441a      	add	r2, r3
 8006e64:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006e68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e70:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006e74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006e7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	6a1a      	ldr	r2, [r3, #32]
 8006e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e8c:	1ad2      	subs	r2, r2, r3
 8006e8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006e9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ea8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	4413      	add	r3, r2
 8006eb4:	881b      	ldrh	r3, [r3, #0]
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	f000 81c7 	beq.w	8007250 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ec2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ec6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ed2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	785b      	ldrb	r3, [r3, #1]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d177      	bne.n	8006fce <USB_EPStartXfer+0x2ce>
 8006ede:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ee2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006eea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	461a      	mov	r2, r3
 8006efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006efe:	4413      	add	r3, r2
 8006f00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	011a      	lsls	r2, r3, #4
 8006f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f12:	4413      	add	r3, r2
 8006f14:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006f18:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1c:	881b      	ldrh	r3, [r3, #0]
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f28:	801a      	strh	r2, [r3, #0]
 8006f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f2e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f30:	d921      	bls.n	8006f76 <USB_EPStartXfer+0x276>
 8006f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f36:	095b      	lsrs	r3, r3, #5
 8006f38:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f40:	f003 031f 	and.w	r3, r3, #31
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d104      	bne.n	8006f52 <USB_EPStartXfer+0x252>
 8006f48:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f54:	881b      	ldrh	r3, [r3, #0]
 8006f56:	b29a      	uxth	r2, r3
 8006f58:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	029b      	lsls	r3, r3, #10
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	4313      	orrs	r3, r2
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f72:	801a      	strh	r2, [r3, #0]
 8006f74:	e050      	b.n	8007018 <USB_EPStartXfer+0x318>
 8006f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10a      	bne.n	8006f94 <USB_EPStartXfer+0x294>
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f80:	881b      	ldrh	r3, [r3, #0]
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f90:	801a      	strh	r2, [r3, #0]
 8006f92:	e041      	b.n	8007018 <USB_EPStartXfer+0x318>
 8006f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f98:	085b      	lsrs	r3, r3, #1
 8006f9a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fa2:	f003 0301 	and.w	r3, r3, #1
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d004      	beq.n	8006fb4 <USB_EPStartXfer+0x2b4>
 8006faa:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006fae:	3301      	adds	r3, #1
 8006fb0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb6:	881b      	ldrh	r3, [r3, #0]
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	029b      	lsls	r3, r3, #10
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	b29a      	uxth	r2, r3
 8006fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fca:	801a      	strh	r2, [r3, #0]
 8006fcc:	e024      	b.n	8007018 <USB_EPStartXfer+0x318>
 8006fce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	785b      	ldrb	r3, [r3, #1]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d11c      	bne.n	8007018 <USB_EPStartXfer+0x318>
 8006fde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fe2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	461a      	mov	r2, r3
 8006ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff2:	4413      	add	r3, r2
 8006ff4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ff6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ffa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	011a      	lsls	r2, r3, #4
 8007004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007006:	4413      	add	r3, r2
 8007008:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800700c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800700e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007012:	b29a      	uxth	r2, r3
 8007014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007016:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007018:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800701c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	895b      	ldrh	r3, [r3, #10]
 8007024:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007028:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800702c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	6959      	ldr	r1, [r3, #20]
 8007034:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007038:	b29b      	uxth	r3, r3
 800703a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800703e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007042:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007046:	6800      	ldr	r0, [r0, #0]
 8007048:	f001 fb49 	bl	80086de <USB_WritePMA>
            ep->xfer_buff += len;
 800704c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007050:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	695a      	ldr	r2, [r3, #20]
 8007058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800705c:	441a      	add	r2, r3
 800705e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007062:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800706a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800706e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	6a1a      	ldr	r2, [r3, #32]
 8007076:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800707a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	429a      	cmp	r2, r3
 8007084:	d90f      	bls.n	80070a6 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007086:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800708a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	6a1a      	ldr	r2, [r3, #32]
 8007092:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007096:	1ad2      	subs	r2, r2, r3
 8007098:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800709c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	621a      	str	r2, [r3, #32]
 80070a4:	e00e      	b.n	80070c4 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80070a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	6a1b      	ldr	r3, [r3, #32]
 80070b2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80070b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2200      	movs	r2, #0
 80070c2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80070c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	785b      	ldrb	r3, [r3, #1]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d177      	bne.n	80071c4 <USB_EPStartXfer+0x4c4>
 80070d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	61bb      	str	r3, [r7, #24]
 80070e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	461a      	mov	r2, r3
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	4413      	add	r3, r2
 80070f6:	61bb      	str	r3, [r7, #24]
 80070f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	011a      	lsls	r2, r3, #4
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	4413      	add	r3, r2
 800710a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800710e:	617b      	str	r3, [r7, #20]
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	881b      	ldrh	r3, [r3, #0]
 8007114:	b29b      	uxth	r3, r3
 8007116:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800711a:	b29a      	uxth	r2, r3
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	801a      	strh	r2, [r3, #0]
 8007120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007124:	2b3e      	cmp	r3, #62	@ 0x3e
 8007126:	d921      	bls.n	800716c <USB_EPStartXfer+0x46c>
 8007128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800712c:	095b      	lsrs	r3, r3, #5
 800712e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007132:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007136:	f003 031f 	and.w	r3, r3, #31
 800713a:	2b00      	cmp	r3, #0
 800713c:	d104      	bne.n	8007148 <USB_EPStartXfer+0x448>
 800713e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007142:	3b01      	subs	r3, #1
 8007144:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	881b      	ldrh	r3, [r3, #0]
 800714c:	b29a      	uxth	r2, r3
 800714e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007152:	b29b      	uxth	r3, r3
 8007154:	029b      	lsls	r3, r3, #10
 8007156:	b29b      	uxth	r3, r3
 8007158:	4313      	orrs	r3, r2
 800715a:	b29b      	uxth	r3, r3
 800715c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007160:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007164:	b29a      	uxth	r2, r3
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	801a      	strh	r2, [r3, #0]
 800716a:	e056      	b.n	800721a <USB_EPStartXfer+0x51a>
 800716c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007170:	2b00      	cmp	r3, #0
 8007172:	d10a      	bne.n	800718a <USB_EPStartXfer+0x48a>
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	881b      	ldrh	r3, [r3, #0]
 8007178:	b29b      	uxth	r3, r3
 800717a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800717e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007182:	b29a      	uxth	r2, r3
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	801a      	strh	r2, [r3, #0]
 8007188:	e047      	b.n	800721a <USB_EPStartXfer+0x51a>
 800718a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800718e:	085b      	lsrs	r3, r3, #1
 8007190:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007194:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007198:	f003 0301 	and.w	r3, r3, #1
 800719c:	2b00      	cmp	r3, #0
 800719e:	d004      	beq.n	80071aa <USB_EPStartXfer+0x4aa>
 80071a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071a4:	3301      	adds	r3, #1
 80071a6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	881b      	ldrh	r3, [r3, #0]
 80071ae:	b29a      	uxth	r2, r3
 80071b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	029b      	lsls	r3, r3, #10
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	4313      	orrs	r3, r2
 80071bc:	b29a      	uxth	r2, r3
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	801a      	strh	r2, [r3, #0]
 80071c2:	e02a      	b.n	800721a <USB_EPStartXfer+0x51a>
 80071c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	785b      	ldrb	r3, [r3, #1]
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d122      	bne.n	800721a <USB_EPStartXfer+0x51a>
 80071d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	623b      	str	r3, [r7, #32]
 80071e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	461a      	mov	r2, r3
 80071f2:	6a3b      	ldr	r3, [r7, #32]
 80071f4:	4413      	add	r3, r2
 80071f6:	623b      	str	r3, [r7, #32]
 80071f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	011a      	lsls	r2, r3, #4
 8007206:	6a3b      	ldr	r3, [r7, #32]
 8007208:	4413      	add	r3, r2
 800720a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800720e:	61fb      	str	r3, [r7, #28]
 8007210:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007214:	b29a      	uxth	r2, r3
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800721a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800721e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	891b      	ldrh	r3, [r3, #8]
 8007226:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800722a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800722e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	6959      	ldr	r1, [r3, #20]
 8007236:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800723a:	b29b      	uxth	r3, r3
 800723c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007240:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007244:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007248:	6800      	ldr	r0, [r0, #0]
 800724a:	f001 fa48 	bl	80086de <USB_WritePMA>
 800724e:	e3ee      	b.n	8007a2e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007250:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007254:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	785b      	ldrb	r3, [r3, #1]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d177      	bne.n	8007350 <USB_EPStartXfer+0x650>
 8007260:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007264:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800726c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007270:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800727a:	b29b      	uxth	r3, r3
 800727c:	461a      	mov	r2, r3
 800727e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007280:	4413      	add	r3, r2
 8007282:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007288:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	011a      	lsls	r2, r3, #4
 8007292:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007294:	4413      	add	r3, r2
 8007296:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800729a:	647b      	str	r3, [r7, #68]	@ 0x44
 800729c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800729e:	881b      	ldrh	r3, [r3, #0]
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072a6:	b29a      	uxth	r2, r3
 80072a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072aa:	801a      	strh	r2, [r3, #0]
 80072ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072b0:	2b3e      	cmp	r3, #62	@ 0x3e
 80072b2:	d921      	bls.n	80072f8 <USB_EPStartXfer+0x5f8>
 80072b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072b8:	095b      	lsrs	r3, r3, #5
 80072ba:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80072be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072c2:	f003 031f 	and.w	r3, r3, #31
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d104      	bne.n	80072d4 <USB_EPStartXfer+0x5d4>
 80072ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80072ce:	3b01      	subs	r3, #1
 80072d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80072d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072d6:	881b      	ldrh	r3, [r3, #0]
 80072d8:	b29a      	uxth	r2, r3
 80072da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80072de:	b29b      	uxth	r3, r3
 80072e0:	029b      	lsls	r3, r3, #10
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	4313      	orrs	r3, r2
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072f0:	b29a      	uxth	r2, r3
 80072f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072f4:	801a      	strh	r2, [r3, #0]
 80072f6:	e056      	b.n	80073a6 <USB_EPStartXfer+0x6a6>
 80072f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10a      	bne.n	8007316 <USB_EPStartXfer+0x616>
 8007300:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007302:	881b      	ldrh	r3, [r3, #0]
 8007304:	b29b      	uxth	r3, r3
 8007306:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800730a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800730e:	b29a      	uxth	r2, r3
 8007310:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007312:	801a      	strh	r2, [r3, #0]
 8007314:	e047      	b.n	80073a6 <USB_EPStartXfer+0x6a6>
 8007316:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800731a:	085b      	lsrs	r3, r3, #1
 800731c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007324:	f003 0301 	and.w	r3, r3, #1
 8007328:	2b00      	cmp	r3, #0
 800732a:	d004      	beq.n	8007336 <USB_EPStartXfer+0x636>
 800732c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007330:	3301      	adds	r3, #1
 8007332:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007336:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007338:	881b      	ldrh	r3, [r3, #0]
 800733a:	b29a      	uxth	r2, r3
 800733c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007340:	b29b      	uxth	r3, r3
 8007342:	029b      	lsls	r3, r3, #10
 8007344:	b29b      	uxth	r3, r3
 8007346:	4313      	orrs	r3, r2
 8007348:	b29a      	uxth	r2, r3
 800734a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800734c:	801a      	strh	r2, [r3, #0]
 800734e:	e02a      	b.n	80073a6 <USB_EPStartXfer+0x6a6>
 8007350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007354:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	785b      	ldrb	r3, [r3, #1]
 800735c:	2b01      	cmp	r3, #1
 800735e:	d122      	bne.n	80073a6 <USB_EPStartXfer+0x6a6>
 8007360:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007364:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	653b      	str	r3, [r7, #80]	@ 0x50
 800736c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007370:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800737a:	b29b      	uxth	r3, r3
 800737c:	461a      	mov	r2, r3
 800737e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007380:	4413      	add	r3, r2
 8007382:	653b      	str	r3, [r7, #80]	@ 0x50
 8007384:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007388:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	011a      	lsls	r2, r3, #4
 8007392:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007394:	4413      	add	r3, r2
 8007396:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800739a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800739c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073a0:	b29a      	uxth	r2, r3
 80073a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80073a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	891b      	ldrh	r3, [r3, #8]
 80073b2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	6959      	ldr	r1, [r3, #20]
 80073c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80073cc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80073d0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80073d4:	6800      	ldr	r0, [r0, #0]
 80073d6:	f001 f982 	bl	80086de <USB_WritePMA>
            ep->xfer_buff += len;
 80073da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	695a      	ldr	r2, [r3, #20]
 80073e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ea:	441a      	add	r2, r3
 80073ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80073f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	6a1a      	ldr	r2, [r3, #32]
 8007404:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007408:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	429a      	cmp	r2, r3
 8007412:	d90f      	bls.n	8007434 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007418:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	6a1a      	ldr	r2, [r3, #32]
 8007420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007424:	1ad2      	subs	r2, r2, r3
 8007426:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800742a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	621a      	str	r2, [r3, #32]
 8007432:	e00e      	b.n	8007452 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007434:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007438:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	6a1b      	ldr	r3, [r3, #32]
 8007440:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007444:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007448:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2200      	movs	r2, #0
 8007450:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007452:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007456:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	643b      	str	r3, [r7, #64]	@ 0x40
 800745e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007462:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	785b      	ldrb	r3, [r3, #1]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d177      	bne.n	800755e <USB_EPStartXfer+0x85e>
 800746e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007472:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	63bb      	str	r3, [r7, #56]	@ 0x38
 800747a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800747e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007488:	b29b      	uxth	r3, r3
 800748a:	461a      	mov	r2, r3
 800748c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800748e:	4413      	add	r3, r2
 8007490:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007492:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007496:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	011a      	lsls	r2, r3, #4
 80074a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074a2:	4413      	add	r3, r2
 80074a4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80074a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80074aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074ac:	881b      	ldrh	r3, [r3, #0]
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074b4:	b29a      	uxth	r2, r3
 80074b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074b8:	801a      	strh	r2, [r3, #0]
 80074ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074be:	2b3e      	cmp	r3, #62	@ 0x3e
 80074c0:	d921      	bls.n	8007506 <USB_EPStartXfer+0x806>
 80074c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074c6:	095b      	lsrs	r3, r3, #5
 80074c8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80074cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074d0:	f003 031f 	and.w	r3, r3, #31
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d104      	bne.n	80074e2 <USB_EPStartXfer+0x7e2>
 80074d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074dc:	3b01      	subs	r3, #1
 80074de:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80074e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074e4:	881b      	ldrh	r3, [r3, #0]
 80074e6:	b29a      	uxth	r2, r3
 80074e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	029b      	lsls	r3, r3, #10
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	4313      	orrs	r3, r2
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074fe:	b29a      	uxth	r2, r3
 8007500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007502:	801a      	strh	r2, [r3, #0]
 8007504:	e050      	b.n	80075a8 <USB_EPStartXfer+0x8a8>
 8007506:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800750a:	2b00      	cmp	r3, #0
 800750c:	d10a      	bne.n	8007524 <USB_EPStartXfer+0x824>
 800750e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007510:	881b      	ldrh	r3, [r3, #0]
 8007512:	b29b      	uxth	r3, r3
 8007514:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007518:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800751c:	b29a      	uxth	r2, r3
 800751e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007520:	801a      	strh	r2, [r3, #0]
 8007522:	e041      	b.n	80075a8 <USB_EPStartXfer+0x8a8>
 8007524:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007528:	085b      	lsrs	r3, r3, #1
 800752a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800752e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007532:	f003 0301 	and.w	r3, r3, #1
 8007536:	2b00      	cmp	r3, #0
 8007538:	d004      	beq.n	8007544 <USB_EPStartXfer+0x844>
 800753a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800753e:	3301      	adds	r3, #1
 8007540:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007546:	881b      	ldrh	r3, [r3, #0]
 8007548:	b29a      	uxth	r2, r3
 800754a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800754e:	b29b      	uxth	r3, r3
 8007550:	029b      	lsls	r3, r3, #10
 8007552:	b29b      	uxth	r3, r3
 8007554:	4313      	orrs	r3, r2
 8007556:	b29a      	uxth	r2, r3
 8007558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800755a:	801a      	strh	r2, [r3, #0]
 800755c:	e024      	b.n	80075a8 <USB_EPStartXfer+0x8a8>
 800755e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007562:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	785b      	ldrb	r3, [r3, #1]
 800756a:	2b01      	cmp	r3, #1
 800756c:	d11c      	bne.n	80075a8 <USB_EPStartXfer+0x8a8>
 800756e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007572:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800757c:	b29b      	uxth	r3, r3
 800757e:	461a      	mov	r2, r3
 8007580:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007582:	4413      	add	r3, r2
 8007584:	643b      	str	r3, [r7, #64]	@ 0x40
 8007586:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800758a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	011a      	lsls	r2, r3, #4
 8007594:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007596:	4413      	add	r3, r2
 8007598:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800759c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800759e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075a2:	b29a      	uxth	r2, r3
 80075a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075a6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80075a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	895b      	ldrh	r3, [r3, #10]
 80075b4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	6959      	ldr	r1, [r3, #20]
 80075c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80075ce:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80075d2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80075d6:	6800      	ldr	r0, [r0, #0]
 80075d8:	f001 f881 	bl	80086de <USB_WritePMA>
 80075dc:	e227      	b.n	8007a2e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80075de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	6a1b      	ldr	r3, [r3, #32]
 80075ea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80075ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	4413      	add	r3, r2
 8007608:	881b      	ldrh	r3, [r3, #0]
 800760a:	b29b      	uxth	r3, r3
 800760c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007610:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007614:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007618:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800761c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007626:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	441a      	add	r2, r3
 8007632:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007636:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800763a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800763e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007642:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007646:	b29b      	uxth	r3, r3
 8007648:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800764a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800764e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007656:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800765a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007664:	b29b      	uxth	r3, r3
 8007666:	461a      	mov	r2, r3
 8007668:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800766a:	4413      	add	r3, r2
 800766c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800766e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007672:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	011a      	lsls	r2, r3, #4
 800767c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800767e:	4413      	add	r3, r2
 8007680:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007684:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007686:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800768a:	b29a      	uxth	r2, r3
 800768c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800768e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007690:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007694:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	891b      	ldrh	r3, [r3, #8]
 800769c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	6959      	ldr	r1, [r3, #20]
 80076ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80076b6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80076ba:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80076be:	6800      	ldr	r0, [r0, #0]
 80076c0:	f001 f80d 	bl	80086de <USB_WritePMA>
 80076c4:	e1b3      	b.n	8007a2e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80076c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	6a1a      	ldr	r2, [r3, #32]
 80076d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076d6:	1ad2      	subs	r2, r2, r3
 80076d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80076e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	4413      	add	r3, r2
 80076fe:	881b      	ldrh	r3, [r3, #0]
 8007700:	b29b      	uxth	r3, r3
 8007702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007706:	2b00      	cmp	r3, #0
 8007708:	f000 80c6 	beq.w	8007898 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800770c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007710:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	673b      	str	r3, [r7, #112]	@ 0x70
 8007718:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800771c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	785b      	ldrb	r3, [r3, #1]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d177      	bne.n	8007818 <USB_EPStartXfer+0xb18>
 8007728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800772c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007734:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007738:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007742:	b29b      	uxth	r3, r3
 8007744:	461a      	mov	r2, r3
 8007746:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007748:	4413      	add	r3, r2
 800774a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800774c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007750:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	011a      	lsls	r2, r3, #4
 800775a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800775c:	4413      	add	r3, r2
 800775e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007762:	667b      	str	r3, [r7, #100]	@ 0x64
 8007764:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007766:	881b      	ldrh	r3, [r3, #0]
 8007768:	b29b      	uxth	r3, r3
 800776a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800776e:	b29a      	uxth	r2, r3
 8007770:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007772:	801a      	strh	r2, [r3, #0]
 8007774:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007778:	2b3e      	cmp	r3, #62	@ 0x3e
 800777a:	d921      	bls.n	80077c0 <USB_EPStartXfer+0xac0>
 800777c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007780:	095b      	lsrs	r3, r3, #5
 8007782:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007786:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800778a:	f003 031f 	and.w	r3, r3, #31
 800778e:	2b00      	cmp	r3, #0
 8007790:	d104      	bne.n	800779c <USB_EPStartXfer+0xa9c>
 8007792:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007796:	3b01      	subs	r3, #1
 8007798:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800779c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800779e:	881b      	ldrh	r3, [r3, #0]
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	029b      	lsls	r3, r3, #10
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	4313      	orrs	r3, r2
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077b8:	b29a      	uxth	r2, r3
 80077ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077bc:	801a      	strh	r2, [r3, #0]
 80077be:	e050      	b.n	8007862 <USB_EPStartXfer+0xb62>
 80077c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d10a      	bne.n	80077de <USB_EPStartXfer+0xade>
 80077c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077ca:	881b      	ldrh	r3, [r3, #0]
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077da:	801a      	strh	r2, [r3, #0]
 80077dc:	e041      	b.n	8007862 <USB_EPStartXfer+0xb62>
 80077de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077e2:	085b      	lsrs	r3, r3, #1
 80077e4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80077e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077ec:	f003 0301 	and.w	r3, r3, #1
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d004      	beq.n	80077fe <USB_EPStartXfer+0xafe>
 80077f4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80077f8:	3301      	adds	r3, #1
 80077fa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80077fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007800:	881b      	ldrh	r3, [r3, #0]
 8007802:	b29a      	uxth	r2, r3
 8007804:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007808:	b29b      	uxth	r3, r3
 800780a:	029b      	lsls	r3, r3, #10
 800780c:	b29b      	uxth	r3, r3
 800780e:	4313      	orrs	r3, r2
 8007810:	b29a      	uxth	r2, r3
 8007812:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007814:	801a      	strh	r2, [r3, #0]
 8007816:	e024      	b.n	8007862 <USB_EPStartXfer+0xb62>
 8007818:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800781c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	785b      	ldrb	r3, [r3, #1]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d11c      	bne.n	8007862 <USB_EPStartXfer+0xb62>
 8007828:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800782c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007836:	b29b      	uxth	r3, r3
 8007838:	461a      	mov	r2, r3
 800783a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800783c:	4413      	add	r3, r2
 800783e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007840:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007844:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	011a      	lsls	r2, r3, #4
 800784e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007850:	4413      	add	r3, r2
 8007852:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007856:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800785c:	b29a      	uxth	r2, r3
 800785e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007860:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007862:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007866:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	895b      	ldrh	r3, [r3, #10]
 800786e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007876:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	6959      	ldr	r1, [r3, #20]
 800787e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007882:	b29b      	uxth	r3, r3
 8007884:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007888:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800788c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007890:	6800      	ldr	r0, [r0, #0]
 8007892:	f000 ff24 	bl	80086de <USB_WritePMA>
 8007896:	e0ca      	b.n	8007a2e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007898:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800789c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	785b      	ldrb	r3, [r3, #1]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d177      	bne.n	8007998 <USB_EPStartXfer+0xc98>
 80078a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80078b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	461a      	mov	r2, r3
 80078c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80078c8:	4413      	add	r3, r2
 80078ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80078cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	011a      	lsls	r2, r3, #4
 80078da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80078dc:	4413      	add	r3, r2
 80078de:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80078e2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80078e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80078e6:	881b      	ldrh	r3, [r3, #0]
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078ee:	b29a      	uxth	r2, r3
 80078f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80078f2:	801a      	strh	r2, [r3, #0]
 80078f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80078fa:	d921      	bls.n	8007940 <USB_EPStartXfer+0xc40>
 80078fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007900:	095b      	lsrs	r3, r3, #5
 8007902:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007906:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800790a:	f003 031f 	and.w	r3, r3, #31
 800790e:	2b00      	cmp	r3, #0
 8007910:	d104      	bne.n	800791c <USB_EPStartXfer+0xc1c>
 8007912:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007916:	3b01      	subs	r3, #1
 8007918:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800791c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800791e:	881b      	ldrh	r3, [r3, #0]
 8007920:	b29a      	uxth	r2, r3
 8007922:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007926:	b29b      	uxth	r3, r3
 8007928:	029b      	lsls	r3, r3, #10
 800792a:	b29b      	uxth	r3, r3
 800792c:	4313      	orrs	r3, r2
 800792e:	b29b      	uxth	r3, r3
 8007930:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007934:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007938:	b29a      	uxth	r2, r3
 800793a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800793c:	801a      	strh	r2, [r3, #0]
 800793e:	e05c      	b.n	80079fa <USB_EPStartXfer+0xcfa>
 8007940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007944:	2b00      	cmp	r3, #0
 8007946:	d10a      	bne.n	800795e <USB_EPStartXfer+0xc5e>
 8007948:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800794a:	881b      	ldrh	r3, [r3, #0]
 800794c:	b29b      	uxth	r3, r3
 800794e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007952:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007956:	b29a      	uxth	r2, r3
 8007958:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800795a:	801a      	strh	r2, [r3, #0]
 800795c:	e04d      	b.n	80079fa <USB_EPStartXfer+0xcfa>
 800795e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007962:	085b      	lsrs	r3, r3, #1
 8007964:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007968:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800796c:	f003 0301 	and.w	r3, r3, #1
 8007970:	2b00      	cmp	r3, #0
 8007972:	d004      	beq.n	800797e <USB_EPStartXfer+0xc7e>
 8007974:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007978:	3301      	adds	r3, #1
 800797a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800797e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007980:	881b      	ldrh	r3, [r3, #0]
 8007982:	b29a      	uxth	r2, r3
 8007984:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007988:	b29b      	uxth	r3, r3
 800798a:	029b      	lsls	r3, r3, #10
 800798c:	b29b      	uxth	r3, r3
 800798e:	4313      	orrs	r3, r2
 8007990:	b29a      	uxth	r2, r3
 8007992:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007994:	801a      	strh	r2, [r3, #0]
 8007996:	e030      	b.n	80079fa <USB_EPStartXfer+0xcfa>
 8007998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800799c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	785b      	ldrb	r3, [r3, #1]
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d128      	bne.n	80079fa <USB_EPStartXfer+0xcfa>
 80079a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80079b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	461a      	mov	r2, r3
 80079c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80079cc:	4413      	add	r3, r2
 80079ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80079d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	011a      	lsls	r2, r3, #4
 80079e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80079e4:	4413      	add	r3, r2
 80079e6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80079ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80079ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079f2:	b29a      	uxth	r2, r3
 80079f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80079f8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80079fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	891b      	ldrh	r3, [r3, #8]
 8007a06:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	6959      	ldr	r1, [r3, #20]
 8007a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007a20:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007a24:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007a28:	6800      	ldr	r0, [r0, #0]
 8007a2a:	f000 fe58 	bl	80086de <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007a2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	4413      	add	r3, r2
 8007a48:	881b      	ldrh	r3, [r3, #0]
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a54:	817b      	strh	r3, [r7, #10]
 8007a56:	897b      	ldrh	r3, [r7, #10]
 8007a58:	f083 0310 	eor.w	r3, r3, #16
 8007a5c:	817b      	strh	r3, [r7, #10]
 8007a5e:	897b      	ldrh	r3, [r7, #10]
 8007a60:	f083 0320 	eor.w	r3, r3, #32
 8007a64:	817b      	strh	r3, [r7, #10]
 8007a66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	441a      	add	r2, r3
 8007a80:	897b      	ldrh	r3, [r7, #10]
 8007a82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	8013      	strh	r3, [r2, #0]
 8007a96:	f000 bcde 	b.w	8008456 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007a9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	7b1b      	ldrb	r3, [r3, #12]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	f040 80bb 	bne.w	8007c22 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007aac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ab0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	699a      	ldr	r2, [r3, #24]
 8007ab8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007abc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	691b      	ldr	r3, [r3, #16]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d917      	bls.n	8007af8 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007ac8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007acc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007ad8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007adc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	699a      	ldr	r2, [r3, #24]
 8007ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ae8:	1ad2      	subs	r2, r2, r3
 8007aea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	619a      	str	r2, [r3, #24]
 8007af6:	e00e      	b.n	8007b16 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007af8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007afc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	699b      	ldr	r3, [r3, #24]
 8007b04:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007b08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2200      	movs	r2, #0
 8007b14:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007b16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	461a      	mov	r2, r3
 8007b36:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007b3a:	4413      	add	r3, r2
 8007b3c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	011a      	lsls	r2, r3, #4
 8007b4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007b52:	4413      	add	r3, r2
 8007b54:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007b58:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007b5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b60:	881b      	ldrh	r3, [r3, #0]
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b6e:	801a      	strh	r2, [r3, #0]
 8007b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b74:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b76:	d924      	bls.n	8007bc2 <USB_EPStartXfer+0xec2>
 8007b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b7c:	095b      	lsrs	r3, r3, #5
 8007b7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b86:	f003 031f 	and.w	r3, r3, #31
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d104      	bne.n	8007b98 <USB_EPStartXfer+0xe98>
 8007b8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007b92:	3b01      	subs	r3, #1
 8007b94:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007b98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b9c:	881b      	ldrh	r3, [r3, #0]
 8007b9e:	b29a      	uxth	r2, r3
 8007ba0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	029b      	lsls	r3, r3, #10
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	4313      	orrs	r3, r2
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007bbc:	801a      	strh	r2, [r3, #0]
 8007bbe:	f000 bc10 	b.w	80083e2 <USB_EPStartXfer+0x16e2>
 8007bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d10c      	bne.n	8007be4 <USB_EPStartXfer+0xee4>
 8007bca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007bce:	881b      	ldrh	r3, [r3, #0]
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bda:	b29a      	uxth	r2, r3
 8007bdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007be0:	801a      	strh	r2, [r3, #0]
 8007be2:	e3fe      	b.n	80083e2 <USB_EPStartXfer+0x16e2>
 8007be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007be8:	085b      	lsrs	r3, r3, #1
 8007bea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bf2:	f003 0301 	and.w	r3, r3, #1
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d004      	beq.n	8007c04 <USB_EPStartXfer+0xf04>
 8007bfa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007bfe:	3301      	adds	r3, #1
 8007c00:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007c04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c08:	881b      	ldrh	r3, [r3, #0]
 8007c0a:	b29a      	uxth	r2, r3
 8007c0c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	029b      	lsls	r3, r3, #10
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	4313      	orrs	r3, r2
 8007c18:	b29a      	uxth	r2, r3
 8007c1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c1e:	801a      	strh	r2, [r3, #0]
 8007c20:	e3df      	b.n	80083e2 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007c22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	78db      	ldrb	r3, [r3, #3]
 8007c2e:	2b02      	cmp	r3, #2
 8007c30:	f040 8218 	bne.w	8008064 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007c34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	785b      	ldrb	r3, [r3, #1]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f040 809d 	bne.w	8007d80 <USB_EPStartXfer+0x1080>
 8007c46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007c54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	461a      	mov	r2, r3
 8007c66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c6a:	4413      	add	r3, r2
 8007c6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007c70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	011a      	lsls	r2, r3, #4
 8007c7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c82:	4413      	add	r3, r2
 8007c84:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007c88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007c8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007c90:	881b      	ldrh	r3, [r3, #0]
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c98:	b29a      	uxth	r2, r3
 8007c9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007c9e:	801a      	strh	r2, [r3, #0]
 8007ca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ca4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	691b      	ldr	r3, [r3, #16]
 8007cac:	2b3e      	cmp	r3, #62	@ 0x3e
 8007cae:	d92b      	bls.n	8007d08 <USB_EPStartXfer+0x1008>
 8007cb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	691b      	ldr	r3, [r3, #16]
 8007cbc:	095b      	lsrs	r3, r3, #5
 8007cbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007cc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	f003 031f 	and.w	r3, r3, #31
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d104      	bne.n	8007ce0 <USB_EPStartXfer+0xfe0>
 8007cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cda:	3b01      	subs	r3, #1
 8007cdc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007ce0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007ce4:	881b      	ldrh	r3, [r3, #0]
 8007ce6:	b29a      	uxth	r2, r3
 8007ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	029b      	lsls	r3, r3, #10
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cfe:	b29a      	uxth	r2, r3
 8007d00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d04:	801a      	strh	r2, [r3, #0]
 8007d06:	e070      	b.n	8007dea <USB_EPStartXfer+0x10ea>
 8007d08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d10c      	bne.n	8007d32 <USB_EPStartXfer+0x1032>
 8007d18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d1c:	881b      	ldrh	r3, [r3, #0]
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d28:	b29a      	uxth	r2, r3
 8007d2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d2e:	801a      	strh	r2, [r3, #0]
 8007d30:	e05b      	b.n	8007dea <USB_EPStartXfer+0x10ea>
 8007d32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	085b      	lsrs	r3, r3, #1
 8007d40:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007d44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	691b      	ldr	r3, [r3, #16]
 8007d50:	f003 0301 	and.w	r3, r3, #1
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d004      	beq.n	8007d62 <USB_EPStartXfer+0x1062>
 8007d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007d62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d66:	881b      	ldrh	r3, [r3, #0]
 8007d68:	b29a      	uxth	r2, r3
 8007d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	029b      	lsls	r3, r3, #10
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	4313      	orrs	r3, r2
 8007d76:	b29a      	uxth	r2, r3
 8007d78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d7c:	801a      	strh	r2, [r3, #0]
 8007d7e:	e034      	b.n	8007dea <USB_EPStartXfer+0x10ea>
 8007d80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	785b      	ldrb	r3, [r3, #1]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d12c      	bne.n	8007dea <USB_EPStartXfer+0x10ea>
 8007d90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007d9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007da2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	461a      	mov	r2, r3
 8007db0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007db4:	4413      	add	r3, r2
 8007db6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007dba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	011a      	lsls	r2, r3, #4
 8007dc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007dcc:	4413      	add	r3, r2
 8007dce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007dd2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007dd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007de8:	801a      	strh	r2, [r3, #0]
 8007dea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007df8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	785b      	ldrb	r3, [r3, #1]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	f040 809d 	bne.w	8007f44 <USB_EPStartXfer+0x1244>
 8007e0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	461a      	mov	r2, r3
 8007e2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007e2e:	4413      	add	r3, r2
 8007e30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	011a      	lsls	r2, r3, #4
 8007e42:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007e46:	4413      	add	r3, r2
 8007e48:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007e4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007e50:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007e54:	881b      	ldrh	r3, [r3, #0]
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e5c:	b29a      	uxth	r2, r3
 8007e5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007e62:	801a      	strh	r2, [r3, #0]
 8007e64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	691b      	ldr	r3, [r3, #16]
 8007e70:	2b3e      	cmp	r3, #62	@ 0x3e
 8007e72:	d92b      	bls.n	8007ecc <USB_EPStartXfer+0x11cc>
 8007e74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	691b      	ldr	r3, [r3, #16]
 8007e80:	095b      	lsrs	r3, r3, #5
 8007e82:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007e86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	f003 031f 	and.w	r3, r3, #31
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d104      	bne.n	8007ea4 <USB_EPStartXfer+0x11a4>
 8007e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e9e:	3b01      	subs	r3, #1
 8007ea0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007ea4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ea8:	881b      	ldrh	r3, [r3, #0]
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	029b      	lsls	r3, r3, #10
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ebe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ec2:	b29a      	uxth	r2, r3
 8007ec4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ec8:	801a      	strh	r2, [r3, #0]
 8007eca:	e069      	b.n	8007fa0 <USB_EPStartXfer+0x12a0>
 8007ecc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ed0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	691b      	ldr	r3, [r3, #16]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d10c      	bne.n	8007ef6 <USB_EPStartXfer+0x11f6>
 8007edc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ee0:	881b      	ldrh	r3, [r3, #0]
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ee8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007eec:	b29a      	uxth	r2, r3
 8007eee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ef2:	801a      	strh	r2, [r3, #0]
 8007ef4:	e054      	b.n	8007fa0 <USB_EPStartXfer+0x12a0>
 8007ef6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007efa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	085b      	lsrs	r3, r3, #1
 8007f04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007f08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	691b      	ldr	r3, [r3, #16]
 8007f14:	f003 0301 	and.w	r3, r3, #1
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d004      	beq.n	8007f26 <USB_EPStartXfer+0x1226>
 8007f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f20:	3301      	adds	r3, #1
 8007f22:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007f26:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f2a:	881b      	ldrh	r3, [r3, #0]
 8007f2c:	b29a      	uxth	r2, r3
 8007f2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	029b      	lsls	r3, r3, #10
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	b29a      	uxth	r2, r3
 8007f3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f40:	801a      	strh	r2, [r3, #0]
 8007f42:	e02d      	b.n	8007fa0 <USB_EPStartXfer+0x12a0>
 8007f44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	785b      	ldrb	r3, [r3, #1]
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d125      	bne.n	8007fa0 <USB_EPStartXfer+0x12a0>
 8007f54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	461a      	mov	r2, r3
 8007f66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007f6a:	4413      	add	r3, r2
 8007f6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007f70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	011a      	lsls	r2, r3, #4
 8007f7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007f82:	4413      	add	r3, r2
 8007f84:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007f88:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007f8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	691b      	ldr	r3, [r3, #16]
 8007f98:	b29a      	uxth	r2, r3
 8007f9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007f9e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007fa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	69db      	ldr	r3, [r3, #28]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f000 8218 	beq.w	80083e2 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007fb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	4413      	add	r3, r2
 8007fcc:	881b      	ldrh	r3, [r3, #0]
 8007fce:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007fd2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007fd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d005      	beq.n	8007fea <USB_EPStartXfer+0x12ea>
 8007fde:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007fe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d10d      	bne.n	8008006 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007fea:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007fee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	f040 81f5 	bne.w	80083e2 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007ff8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007ffc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008000:	2b00      	cmp	r3, #0
 8008002:	f040 81ee 	bne.w	80083e2 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008006:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800800a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008014:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	4413      	add	r3, r2
 8008020:	881b      	ldrh	r3, [r3, #0]
 8008022:	b29b      	uxth	r3, r3
 8008024:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008028:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800802c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8008030:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008034:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800803e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	441a      	add	r2, r3
 800804a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800804e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008052:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008056:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800805a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800805e:	b29b      	uxth	r3, r3
 8008060:	8013      	strh	r3, [r2, #0]
 8008062:	e1be      	b.n	80083e2 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008064:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008068:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	78db      	ldrb	r3, [r3, #3]
 8008070:	2b01      	cmp	r3, #1
 8008072:	f040 81b4 	bne.w	80083de <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008076:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800807a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	699a      	ldr	r2, [r3, #24]
 8008082:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008086:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	429a      	cmp	r2, r3
 8008090:	d917      	bls.n	80080c2 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8008092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008096:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	691b      	ldr	r3, [r3, #16]
 800809e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80080a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	699a      	ldr	r2, [r3, #24]
 80080ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080b2:	1ad2      	subs	r2, r2, r3
 80080b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	619a      	str	r2, [r3, #24]
 80080c0:	e00e      	b.n	80080e0 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80080c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	699b      	ldr	r3, [r3, #24]
 80080ce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80080d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2200      	movs	r2, #0
 80080de:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80080e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	785b      	ldrb	r3, [r3, #1]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f040 8085 	bne.w	80081fc <USB_EPStartXfer+0x14fc>
 80080f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008104:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800810e:	b29b      	uxth	r3, r3
 8008110:	461a      	mov	r2, r3
 8008112:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008116:	4413      	add	r3, r2
 8008118:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800811c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008120:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	011a      	lsls	r2, r3, #4
 800812a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800812e:	4413      	add	r3, r2
 8008130:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008134:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008138:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800813c:	881b      	ldrh	r3, [r3, #0]
 800813e:	b29b      	uxth	r3, r3
 8008140:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008144:	b29a      	uxth	r2, r3
 8008146:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800814a:	801a      	strh	r2, [r3, #0]
 800814c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008150:	2b3e      	cmp	r3, #62	@ 0x3e
 8008152:	d923      	bls.n	800819c <USB_EPStartXfer+0x149c>
 8008154:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008158:	095b      	lsrs	r3, r3, #5
 800815a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800815e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008162:	f003 031f 	and.w	r3, r3, #31
 8008166:	2b00      	cmp	r3, #0
 8008168:	d104      	bne.n	8008174 <USB_EPStartXfer+0x1474>
 800816a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800816e:	3b01      	subs	r3, #1
 8008170:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008174:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008178:	881b      	ldrh	r3, [r3, #0]
 800817a:	b29a      	uxth	r2, r3
 800817c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008180:	b29b      	uxth	r3, r3
 8008182:	029b      	lsls	r3, r3, #10
 8008184:	b29b      	uxth	r3, r3
 8008186:	4313      	orrs	r3, r2
 8008188:	b29b      	uxth	r3, r3
 800818a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800818e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008192:	b29a      	uxth	r2, r3
 8008194:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008198:	801a      	strh	r2, [r3, #0]
 800819a:	e060      	b.n	800825e <USB_EPStartXfer+0x155e>
 800819c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d10c      	bne.n	80081be <USB_EPStartXfer+0x14be>
 80081a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80081a8:	881b      	ldrh	r3, [r3, #0]
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081b4:	b29a      	uxth	r2, r3
 80081b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80081ba:	801a      	strh	r2, [r3, #0]
 80081bc:	e04f      	b.n	800825e <USB_EPStartXfer+0x155e>
 80081be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081c2:	085b      	lsrs	r3, r3, #1
 80081c4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80081c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081cc:	f003 0301 	and.w	r3, r3, #1
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d004      	beq.n	80081de <USB_EPStartXfer+0x14de>
 80081d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081d8:	3301      	adds	r3, #1
 80081da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80081de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80081e2:	881b      	ldrh	r3, [r3, #0]
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	029b      	lsls	r3, r3, #10
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	4313      	orrs	r3, r2
 80081f2:	b29a      	uxth	r2, r3
 80081f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80081f8:	801a      	strh	r2, [r3, #0]
 80081fa:	e030      	b.n	800825e <USB_EPStartXfer+0x155e>
 80081fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008200:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	785b      	ldrb	r3, [r3, #1]
 8008208:	2b01      	cmp	r3, #1
 800820a:	d128      	bne.n	800825e <USB_EPStartXfer+0x155e>
 800820c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008210:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800821a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800821e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008228:	b29b      	uxth	r3, r3
 800822a:	461a      	mov	r2, r3
 800822c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008230:	4413      	add	r3, r2
 8008232:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008236:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800823a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	011a      	lsls	r2, r3, #4
 8008244:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008248:	4413      	add	r3, r2
 800824a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800824e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008252:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008256:	b29a      	uxth	r2, r3
 8008258:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800825c:	801a      	strh	r2, [r3, #0]
 800825e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008262:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800826c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008270:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	785b      	ldrb	r3, [r3, #1]
 8008278:	2b00      	cmp	r3, #0
 800827a:	f040 8085 	bne.w	8008388 <USB_EPStartXfer+0x1688>
 800827e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008282:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800828c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008290:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800829a:	b29b      	uxth	r3, r3
 800829c:	461a      	mov	r2, r3
 800829e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80082a2:	4413      	add	r3, r2
 80082a4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80082a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	011a      	lsls	r2, r3, #4
 80082b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80082ba:	4413      	add	r3, r2
 80082bc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80082c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80082c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80082c8:	881b      	ldrh	r3, [r3, #0]
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082d0:	b29a      	uxth	r2, r3
 80082d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80082d6:	801a      	strh	r2, [r3, #0]
 80082d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082dc:	2b3e      	cmp	r3, #62	@ 0x3e
 80082de:	d923      	bls.n	8008328 <USB_EPStartXfer+0x1628>
 80082e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082e4:	095b      	lsrs	r3, r3, #5
 80082e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80082ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082ee:	f003 031f 	and.w	r3, r3, #31
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d104      	bne.n	8008300 <USB_EPStartXfer+0x1600>
 80082f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80082fa:	3b01      	subs	r3, #1
 80082fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008300:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008304:	881b      	ldrh	r3, [r3, #0]
 8008306:	b29a      	uxth	r2, r3
 8008308:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800830c:	b29b      	uxth	r3, r3
 800830e:	029b      	lsls	r3, r3, #10
 8008310:	b29b      	uxth	r3, r3
 8008312:	4313      	orrs	r3, r2
 8008314:	b29b      	uxth	r3, r3
 8008316:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800831a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800831e:	b29a      	uxth	r2, r3
 8008320:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008324:	801a      	strh	r2, [r3, #0]
 8008326:	e05c      	b.n	80083e2 <USB_EPStartXfer+0x16e2>
 8008328:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800832c:	2b00      	cmp	r3, #0
 800832e:	d10c      	bne.n	800834a <USB_EPStartXfer+0x164a>
 8008330:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008334:	881b      	ldrh	r3, [r3, #0]
 8008336:	b29b      	uxth	r3, r3
 8008338:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800833c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008340:	b29a      	uxth	r2, r3
 8008342:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008346:	801a      	strh	r2, [r3, #0]
 8008348:	e04b      	b.n	80083e2 <USB_EPStartXfer+0x16e2>
 800834a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800834e:	085b      	lsrs	r3, r3, #1
 8008350:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008354:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008358:	f003 0301 	and.w	r3, r3, #1
 800835c:	2b00      	cmp	r3, #0
 800835e:	d004      	beq.n	800836a <USB_EPStartXfer+0x166a>
 8008360:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008364:	3301      	adds	r3, #1
 8008366:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800836a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800836e:	881b      	ldrh	r3, [r3, #0]
 8008370:	b29a      	uxth	r2, r3
 8008372:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008376:	b29b      	uxth	r3, r3
 8008378:	029b      	lsls	r3, r3, #10
 800837a:	b29b      	uxth	r3, r3
 800837c:	4313      	orrs	r3, r2
 800837e:	b29a      	uxth	r2, r3
 8008380:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008384:	801a      	strh	r2, [r3, #0]
 8008386:	e02c      	b.n	80083e2 <USB_EPStartXfer+0x16e2>
 8008388:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800838c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	785b      	ldrb	r3, [r3, #1]
 8008394:	2b01      	cmp	r3, #1
 8008396:	d124      	bne.n	80083e2 <USB_EPStartXfer+0x16e2>
 8008398:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800839c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	461a      	mov	r2, r3
 80083aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80083ae:	4413      	add	r3, r2
 80083b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80083b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	011a      	lsls	r2, r3, #4
 80083c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80083c6:	4413      	add	r3, r2
 80083c8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80083cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80083d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80083da:	801a      	strh	r2, [r3, #0]
 80083dc:	e001      	b.n	80083e2 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	e03a      	b.n	8008458 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80083e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	4413      	add	r3, r2
 80083fc:	881b      	ldrh	r3, [r3, #0]
 80083fe:	b29b      	uxth	r3, r3
 8008400:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008404:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008408:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800840c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008410:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008414:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008418:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800841c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008420:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008424:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008428:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008432:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	441a      	add	r2, r3
 800843e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008442:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008446:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800844a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800844e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008452:	b29b      	uxth	r3, r3
 8008454:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008456:	2300      	movs	r3, #0
}
 8008458:	4618      	mov	r0, r3
 800845a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}

08008462 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008462:	b480      	push	{r7}
 8008464:	b085      	sub	sp, #20
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
 800846a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	785b      	ldrb	r3, [r3, #1]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d020      	beq.n	80084b6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	4413      	add	r3, r2
 800847e:	881b      	ldrh	r3, [r3, #0]
 8008480:	b29b      	uxth	r3, r3
 8008482:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008486:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800848a:	81bb      	strh	r3, [r7, #12]
 800848c:	89bb      	ldrh	r3, [r7, #12]
 800848e:	f083 0310 	eor.w	r3, r3, #16
 8008492:	81bb      	strh	r3, [r7, #12]
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	441a      	add	r2, r3
 800849e:	89bb      	ldrh	r3, [r7, #12]
 80084a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	8013      	strh	r3, [r2, #0]
 80084b4:	e01f      	b.n	80084f6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	4413      	add	r3, r2
 80084c0:	881b      	ldrh	r3, [r3, #0]
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80084c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084cc:	81fb      	strh	r3, [r7, #14]
 80084ce:	89fb      	ldrh	r3, [r7, #14]
 80084d0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80084d4:	81fb      	strh	r3, [r7, #14]
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	441a      	add	r2, r3
 80084e0:	89fb      	ldrh	r3, [r7, #14]
 80084e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80084f6:	2300      	movs	r3, #0
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3714      	adds	r7, #20
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bc80      	pop	{r7}
 8008500:	4770      	bx	lr

08008502 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008502:	b480      	push	{r7}
 8008504:	b087      	sub	sp, #28
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
 800850a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	7b1b      	ldrb	r3, [r3, #12]
 8008510:	2b00      	cmp	r3, #0
 8008512:	f040 809d 	bne.w	8008650 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	785b      	ldrb	r3, [r3, #1]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d04c      	beq.n	80085b8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	4413      	add	r3, r2
 8008528:	881b      	ldrh	r3, [r3, #0]
 800852a:	823b      	strh	r3, [r7, #16]
 800852c:	8a3b      	ldrh	r3, [r7, #16]
 800852e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008532:	2b00      	cmp	r3, #0
 8008534:	d01b      	beq.n	800856e <USB_EPClearStall+0x6c>
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	4413      	add	r3, r2
 8008540:	881b      	ldrh	r3, [r3, #0]
 8008542:	b29b      	uxth	r3, r3
 8008544:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008548:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800854c:	81fb      	strh	r3, [r7, #14]
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	009b      	lsls	r3, r3, #2
 8008556:	441a      	add	r2, r3
 8008558:	89fb      	ldrh	r3, [r7, #14]
 800855a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800855e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008562:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008566:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800856a:	b29b      	uxth	r3, r3
 800856c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	78db      	ldrb	r3, [r3, #3]
 8008572:	2b01      	cmp	r3, #1
 8008574:	d06c      	beq.n	8008650 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	4413      	add	r3, r2
 8008580:	881b      	ldrh	r3, [r3, #0]
 8008582:	b29b      	uxth	r3, r3
 8008584:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008588:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800858c:	81bb      	strh	r3, [r7, #12]
 800858e:	89bb      	ldrh	r3, [r7, #12]
 8008590:	f083 0320 	eor.w	r3, r3, #32
 8008594:	81bb      	strh	r3, [r7, #12]
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	441a      	add	r2, r3
 80085a0:	89bb      	ldrh	r3, [r7, #12]
 80085a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	8013      	strh	r3, [r2, #0]
 80085b6:	e04b      	b.n	8008650 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	4413      	add	r3, r2
 80085c2:	881b      	ldrh	r3, [r3, #0]
 80085c4:	82fb      	strh	r3, [r7, #22]
 80085c6:	8afb      	ldrh	r3, [r7, #22]
 80085c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d01b      	beq.n	8008608 <USB_EPClearStall+0x106>
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	4413      	add	r3, r2
 80085da:	881b      	ldrh	r3, [r3, #0]
 80085dc:	b29b      	uxth	r3, r3
 80085de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085e6:	82bb      	strh	r3, [r7, #20]
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	441a      	add	r2, r3
 80085f2:	8abb      	ldrh	r3, [r7, #20]
 80085f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008600:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008604:	b29b      	uxth	r3, r3
 8008606:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	4413      	add	r3, r2
 8008612:	881b      	ldrh	r3, [r3, #0]
 8008614:	b29b      	uxth	r3, r3
 8008616:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800861a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800861e:	827b      	strh	r3, [r7, #18]
 8008620:	8a7b      	ldrh	r3, [r7, #18]
 8008622:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008626:	827b      	strh	r3, [r7, #18]
 8008628:	8a7b      	ldrh	r3, [r7, #18]
 800862a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800862e:	827b      	strh	r3, [r7, #18]
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	441a      	add	r2, r3
 800863a:	8a7b      	ldrh	r3, [r7, #18]
 800863c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008640:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008644:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008648:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800864c:	b29b      	uxth	r3, r3
 800864e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	371c      	adds	r7, #28
 8008656:	46bd      	mov	sp, r7
 8008658:	bc80      	pop	{r7}
 800865a:	4770      	bx	lr

0800865c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	460b      	mov	r3, r1
 8008666:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008668:	78fb      	ldrb	r3, [r7, #3]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d103      	bne.n	8008676 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2280      	movs	r2, #128	@ 0x80
 8008672:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008676:	2300      	movs	r3, #0
}
 8008678:	4618      	mov	r0, r3
 800867a:	370c      	adds	r7, #12
 800867c:	46bd      	mov	sp, r7
 800867e:	bc80      	pop	{r7}
 8008680:	4770      	bx	lr

08008682 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008682:	b480      	push	{r7}
 8008684:	b083      	sub	sp, #12
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800868a:	2300      	movs	r3, #0
}
 800868c:	4618      	mov	r0, r3
 800868e:	370c      	adds	r7, #12
 8008690:	46bd      	mov	sp, r7
 8008692:	bc80      	pop	{r7}
 8008694:	4770      	bx	lr

08008696 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008696:	b480      	push	{r7}
 8008698:	b083      	sub	sp, #12
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800869e:	2300      	movs	r3, #0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	370c      	adds	r7, #12
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bc80      	pop	{r7}
 80086a8:	4770      	bx	lr

080086aa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80086aa:	b480      	push	{r7}
 80086ac:	b085      	sub	sp, #20
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80086bc:	68fb      	ldr	r3, [r7, #12]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3714      	adds	r7, #20
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bc80      	pop	{r7}
 80086c6:	4770      	bx	lr

080086c8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80086d2:	2300      	movs	r3, #0
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	370c      	adds	r7, #12
 80086d8:	46bd      	mov	sp, r7
 80086da:	bc80      	pop	{r7}
 80086dc:	4770      	bx	lr

080086de <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80086de:	b480      	push	{r7}
 80086e0:	b08b      	sub	sp, #44	@ 0x2c
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	60f8      	str	r0, [r7, #12]
 80086e6:	60b9      	str	r1, [r7, #8]
 80086e8:	4611      	mov	r1, r2
 80086ea:	461a      	mov	r2, r3
 80086ec:	460b      	mov	r3, r1
 80086ee:	80fb      	strh	r3, [r7, #6]
 80086f0:	4613      	mov	r3, r2
 80086f2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80086f4:	88bb      	ldrh	r3, [r7, #4]
 80086f6:	3301      	adds	r3, #1
 80086f8:	085b      	lsrs	r3, r3, #1
 80086fa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008704:	88fb      	ldrh	r3, [r7, #6]
 8008706:	005a      	lsls	r2, r3, #1
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	4413      	add	r3, r2
 800870c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008710:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	627b      	str	r3, [r7, #36]	@ 0x24
 8008716:	e01e      	b.n	8008756 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	3301      	adds	r3, #1
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	021b      	lsls	r3, r3, #8
 8008726:	b21a      	sxth	r2, r3
 8008728:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800872c:	4313      	orrs	r3, r2
 800872e:	b21b      	sxth	r3, r3
 8008730:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008732:	6a3b      	ldr	r3, [r7, #32]
 8008734:	8a7a      	ldrh	r2, [r7, #18]
 8008736:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008738:	6a3b      	ldr	r3, [r7, #32]
 800873a:	3302      	adds	r3, #2
 800873c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800873e:	6a3b      	ldr	r3, [r7, #32]
 8008740:	3302      	adds	r3, #2
 8008742:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	3301      	adds	r3, #1
 8008748:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800874a:	69fb      	ldr	r3, [r7, #28]
 800874c:	3301      	adds	r3, #1
 800874e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008752:	3b01      	subs	r3, #1
 8008754:	627b      	str	r3, [r7, #36]	@ 0x24
 8008756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008758:	2b00      	cmp	r3, #0
 800875a:	d1dd      	bne.n	8008718 <USB_WritePMA+0x3a>
  }
}
 800875c:	bf00      	nop
 800875e:	bf00      	nop
 8008760:	372c      	adds	r7, #44	@ 0x2c
 8008762:	46bd      	mov	sp, r7
 8008764:	bc80      	pop	{r7}
 8008766:	4770      	bx	lr

08008768 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008768:	b480      	push	{r7}
 800876a:	b08b      	sub	sp, #44	@ 0x2c
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	4611      	mov	r1, r2
 8008774:	461a      	mov	r2, r3
 8008776:	460b      	mov	r3, r1
 8008778:	80fb      	strh	r3, [r7, #6]
 800877a:	4613      	mov	r3, r2
 800877c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800877e:	88bb      	ldrh	r3, [r7, #4]
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	b29b      	uxth	r3, r3
 8008784:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800878e:	88fb      	ldrh	r3, [r7, #6]
 8008790:	005a      	lsls	r2, r3, #1
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	4413      	add	r3, r2
 8008796:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800879a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800879c:	69bb      	ldr	r3, [r7, #24]
 800879e:	627b      	str	r3, [r7, #36]	@ 0x24
 80087a0:	e01b      	b.n	80087da <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80087a2:	6a3b      	ldr	r3, [r7, #32]
 80087a4:	881b      	ldrh	r3, [r3, #0]
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80087aa:	6a3b      	ldr	r3, [r7, #32]
 80087ac:	3302      	adds	r3, #2
 80087ae:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	b2da      	uxtb	r2, r3
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	3301      	adds	r3, #1
 80087bc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	0a1b      	lsrs	r3, r3, #8
 80087c2:	b2da      	uxtb	r2, r3
 80087c4:	69fb      	ldr	r3, [r7, #28]
 80087c6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	3301      	adds	r3, #1
 80087cc:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80087ce:	6a3b      	ldr	r3, [r7, #32]
 80087d0:	3302      	adds	r3, #2
 80087d2:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80087d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d6:	3b01      	subs	r3, #1
 80087d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80087da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d1e0      	bne.n	80087a2 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80087e0:	88bb      	ldrh	r3, [r7, #4]
 80087e2:	f003 0301 	and.w	r3, r3, #1
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d007      	beq.n	80087fc <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80087ec:	6a3b      	ldr	r3, [r7, #32]
 80087ee:	881b      	ldrh	r3, [r3, #0]
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	b2da      	uxtb	r2, r3
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	701a      	strb	r2, [r3, #0]
  }
}
 80087fc:	bf00      	nop
 80087fe:	372c      	adds	r7, #44	@ 0x2c
 8008800:	46bd      	mov	sp, r7
 8008802:	bc80      	pop	{r7}
 8008804:	4770      	bx	lr

08008806 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b084      	sub	sp, #16
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
 800880e:	460b      	mov	r3, r1
 8008810:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008812:	2300      	movs	r3, #0
 8008814:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	7c1b      	ldrb	r3, [r3, #16]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d115      	bne.n	800884a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800881e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008822:	2202      	movs	r2, #2
 8008824:	2181      	movs	r1, #129	@ 0x81
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f004 fb65 	bl	800cef6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2201      	movs	r2, #1
 8008830:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008832:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008836:	2202      	movs	r2, #2
 8008838:	2101      	movs	r1, #1
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f004 fb5b 	bl	800cef6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8008848:	e012      	b.n	8008870 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800884a:	2340      	movs	r3, #64	@ 0x40
 800884c:	2202      	movs	r2, #2
 800884e:	2181      	movs	r1, #129	@ 0x81
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f004 fb50 	bl	800cef6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2201      	movs	r2, #1
 800885a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800885c:	2340      	movs	r3, #64	@ 0x40
 800885e:	2202      	movs	r2, #2
 8008860:	2101      	movs	r1, #1
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f004 fb47 	bl	800cef6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008870:	2308      	movs	r3, #8
 8008872:	2203      	movs	r2, #3
 8008874:	2182      	movs	r1, #130	@ 0x82
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f004 fb3d 	bl	800cef6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008882:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008886:	f004 fc5d 	bl	800d144 <USBD_static_malloc>
 800888a:	4602      	mov	r2, r0
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008898:	2b00      	cmp	r3, #0
 800889a:	d102      	bne.n	80088a2 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800889c:	2301      	movs	r3, #1
 800889e:	73fb      	strb	r3, [r7, #15]
 80088a0:	e026      	b.n	80088f0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088a8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	2200      	movs	r2, #0
 80088b8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	2200      	movs	r2, #0
 80088c0:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	7c1b      	ldrb	r3, [r3, #16]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d109      	bne.n	80088e0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80088d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80088d6:	2101      	movs	r1, #1
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f004 fbfd 	bl	800d0d8 <USBD_LL_PrepareReceive>
 80088de:	e007      	b.n	80088f0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80088e6:	2340      	movs	r3, #64	@ 0x40
 80088e8:	2101      	movs	r1, #1
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f004 fbf4 	bl	800d0d8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80088f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b084      	sub	sp, #16
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
 8008902:	460b      	mov	r3, r1
 8008904:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008906:	2300      	movs	r3, #0
 8008908:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800890a:	2181      	movs	r1, #129	@ 0x81
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f004 fb18 	bl	800cf42 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2200      	movs	r2, #0
 8008916:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008918:	2101      	movs	r1, #1
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f004 fb11 	bl	800cf42 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008928:	2182      	movs	r1, #130	@ 0x82
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f004 fb09 	bl	800cf42 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800893c:	2b00      	cmp	r3, #0
 800893e:	d00e      	beq.n	800895e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008950:	4618      	mov	r0, r3
 8008952:	f004 fc03 	bl	800d15c <USBD_static_free>
    pdev->pClassData = NULL;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800895e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008960:	4618      	mov	r0, r3
 8008962:	3710      	adds	r7, #16
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b086      	sub	sp, #24
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008978:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800897a:	2300      	movs	r3, #0
 800897c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800897e:	2300      	movs	r3, #0
 8008980:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008982:	2300      	movs	r3, #0
 8008984:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800898e:	2b00      	cmp	r3, #0
 8008990:	d039      	beq.n	8008a06 <USBD_CDC_Setup+0x9e>
 8008992:	2b20      	cmp	r3, #32
 8008994:	d17f      	bne.n	8008a96 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	88db      	ldrh	r3, [r3, #6]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d029      	beq.n	80089f2 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	b25b      	sxtb	r3, r3
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	da11      	bge.n	80089cc <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	683a      	ldr	r2, [r7, #0]
 80089b2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80089b4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80089b6:	683a      	ldr	r2, [r7, #0]
 80089b8:	88d2      	ldrh	r2, [r2, #6]
 80089ba:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80089bc:	6939      	ldr	r1, [r7, #16]
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	88db      	ldrh	r3, [r3, #6]
 80089c2:	461a      	mov	r2, r3
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f001 fa05 	bl	8009dd4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80089ca:	e06b      	b.n	8008aa4 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	785a      	ldrb	r2, [r3, #1]
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	88db      	ldrh	r3, [r3, #6]
 80089da:	b2da      	uxtb	r2, r3
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80089e2:	6939      	ldr	r1, [r7, #16]
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	88db      	ldrh	r3, [r3, #6]
 80089e8:	461a      	mov	r2, r3
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f001 fa20 	bl	8009e30 <USBD_CtlPrepareRx>
      break;
 80089f0:	e058      	b.n	8008aa4 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	683a      	ldr	r2, [r7, #0]
 80089fc:	7850      	ldrb	r0, [r2, #1]
 80089fe:	2200      	movs	r2, #0
 8008a00:	6839      	ldr	r1, [r7, #0]
 8008a02:	4798      	blx	r3
      break;
 8008a04:	e04e      	b.n	8008aa4 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	785b      	ldrb	r3, [r3, #1]
 8008a0a:	2b0b      	cmp	r3, #11
 8008a0c:	d02e      	beq.n	8008a6c <USBD_CDC_Setup+0x104>
 8008a0e:	2b0b      	cmp	r3, #11
 8008a10:	dc38      	bgt.n	8008a84 <USBD_CDC_Setup+0x11c>
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d002      	beq.n	8008a1c <USBD_CDC_Setup+0xb4>
 8008a16:	2b0a      	cmp	r3, #10
 8008a18:	d014      	beq.n	8008a44 <USBD_CDC_Setup+0xdc>
 8008a1a:	e033      	b.n	8008a84 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a22:	2b03      	cmp	r3, #3
 8008a24:	d107      	bne.n	8008a36 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008a26:	f107 030c 	add.w	r3, r7, #12
 8008a2a:	2202      	movs	r2, #2
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f001 f9d0 	bl	8009dd4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a34:	e02e      	b.n	8008a94 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008a36:	6839      	ldr	r1, [r7, #0]
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f001 f961 	bl	8009d00 <USBD_CtlError>
            ret = USBD_FAIL;
 8008a3e:	2302      	movs	r3, #2
 8008a40:	75fb      	strb	r3, [r7, #23]
          break;
 8008a42:	e027      	b.n	8008a94 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a4a:	2b03      	cmp	r3, #3
 8008a4c:	d107      	bne.n	8008a5e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008a4e:	f107 030f 	add.w	r3, r7, #15
 8008a52:	2201      	movs	r2, #1
 8008a54:	4619      	mov	r1, r3
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f001 f9bc 	bl	8009dd4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a5c:	e01a      	b.n	8008a94 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008a5e:	6839      	ldr	r1, [r7, #0]
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f001 f94d 	bl	8009d00 <USBD_CtlError>
            ret = USBD_FAIL;
 8008a66:	2302      	movs	r3, #2
 8008a68:	75fb      	strb	r3, [r7, #23]
          break;
 8008a6a:	e013      	b.n	8008a94 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a72:	2b03      	cmp	r3, #3
 8008a74:	d00d      	beq.n	8008a92 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008a76:	6839      	ldr	r1, [r7, #0]
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f001 f941 	bl	8009d00 <USBD_CtlError>
            ret = USBD_FAIL;
 8008a7e:	2302      	movs	r3, #2
 8008a80:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008a82:	e006      	b.n	8008a92 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008a84:	6839      	ldr	r1, [r7, #0]
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f001 f93a 	bl	8009d00 <USBD_CtlError>
          ret = USBD_FAIL;
 8008a8c:	2302      	movs	r3, #2
 8008a8e:	75fb      	strb	r3, [r7, #23]
          break;
 8008a90:	e000      	b.n	8008a94 <USBD_CDC_Setup+0x12c>
          break;
 8008a92:	bf00      	nop
      }
      break;
 8008a94:	e006      	b.n	8008aa4 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008a96:	6839      	ldr	r1, [r7, #0]
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f001 f931 	bl	8009d00 <USBD_CtlError>
      ret = USBD_FAIL;
 8008a9e:	2302      	movs	r3, #2
 8008aa0:	75fb      	strb	r3, [r7, #23]
      break;
 8008aa2:	bf00      	nop
  }

  return ret;
 8008aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3718      	adds	r7, #24
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b084      	sub	sp, #16
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ac0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008ac8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d03a      	beq.n	8008b4a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008ad4:	78fa      	ldrb	r2, [r7, #3]
 8008ad6:	6879      	ldr	r1, [r7, #4]
 8008ad8:	4613      	mov	r3, r2
 8008ada:	009b      	lsls	r3, r3, #2
 8008adc:	4413      	add	r3, r2
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	440b      	add	r3, r1
 8008ae2:	331c      	adds	r3, #28
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d029      	beq.n	8008b3e <USBD_CDC_DataIn+0x90>
 8008aea:	78fa      	ldrb	r2, [r7, #3]
 8008aec:	6879      	ldr	r1, [r7, #4]
 8008aee:	4613      	mov	r3, r2
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	4413      	add	r3, r2
 8008af4:	009b      	lsls	r3, r3, #2
 8008af6:	440b      	add	r3, r1
 8008af8:	331c      	adds	r3, #28
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	78f9      	ldrb	r1, [r7, #3]
 8008afe:	68b8      	ldr	r0, [r7, #8]
 8008b00:	460b      	mov	r3, r1
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	440b      	add	r3, r1
 8008b06:	00db      	lsls	r3, r3, #3
 8008b08:	4403      	add	r3, r0
 8008b0a:	3338      	adds	r3, #56	@ 0x38
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	fbb2 f1f3 	udiv	r1, r2, r3
 8008b12:	fb01 f303 	mul.w	r3, r1, r3
 8008b16:	1ad3      	subs	r3, r2, r3
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d110      	bne.n	8008b3e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008b1c:	78fa      	ldrb	r2, [r7, #3]
 8008b1e:	6879      	ldr	r1, [r7, #4]
 8008b20:	4613      	mov	r3, r2
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	4413      	add	r3, r2
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	440b      	add	r3, r1
 8008b2a:	331c      	adds	r3, #28
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008b30:	78f9      	ldrb	r1, [r7, #3]
 8008b32:	2300      	movs	r3, #0
 8008b34:	2200      	movs	r2, #0
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f004 faab 	bl	800d092 <USBD_LL_Transmit>
 8008b3c:	e003      	b.n	8008b46 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2200      	movs	r2, #0
 8008b42:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8008b46:	2300      	movs	r3, #0
 8008b48:	e000      	b.n	8008b4c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008b4a:	2302      	movs	r3, #2
  }
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3710      	adds	r7, #16
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b66:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008b68:	78fb      	ldrb	r3, [r7, #3]
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f004 fad6 	bl	800d11e <USBD_LL_GetRxDataSize>
 8008b72:	4602      	mov	r2, r0
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d00d      	beq.n	8008ba0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008b8a:	68db      	ldr	r3, [r3, #12]
 8008b8c:	68fa      	ldr	r2, [r7, #12]
 8008b8e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008b92:	68fa      	ldr	r2, [r7, #12]
 8008b94:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008b98:	4611      	mov	r1, r2
 8008b9a:	4798      	blx	r3

    return USBD_OK;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	e000      	b.n	8008ba2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008ba0:	2302      	movs	r3, #2
  }
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b084      	sub	sp, #16
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bb8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d014      	beq.n	8008bee <USBD_CDC_EP0_RxReady+0x44>
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008bca:	2bff      	cmp	r3, #255	@ 0xff
 8008bcc:	d00f      	beq.n	8008bee <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	68fa      	ldr	r2, [r7, #12]
 8008bd8:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008bdc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008bde:	68fa      	ldr	r2, [r7, #12]
 8008be0:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008be4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	22ff      	movs	r2, #255	@ 0xff
 8008bea:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3710      	adds	r7, #16
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2243      	movs	r2, #67	@ 0x43
 8008c04:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008c06:	4b03      	ldr	r3, [pc, #12]	@ (8008c14 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	370c      	adds	r7, #12
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bc80      	pop	{r7}
 8008c10:	4770      	bx	lr
 8008c12:	bf00      	nop
 8008c14:	2000009c 	.word	0x2000009c

08008c18 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2243      	movs	r2, #67	@ 0x43
 8008c24:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008c26:	4b03      	ldr	r3, [pc, #12]	@ (8008c34 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bc80      	pop	{r7}
 8008c30:	4770      	bx	lr
 8008c32:	bf00      	nop
 8008c34:	20000058 	.word	0x20000058

08008c38 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2243      	movs	r2, #67	@ 0x43
 8008c44:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008c46:	4b03      	ldr	r3, [pc, #12]	@ (8008c54 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	370c      	adds	r7, #12
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bc80      	pop	{r7}
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	200000e0 	.word	0x200000e0

08008c58 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	220a      	movs	r2, #10
 8008c64:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008c66:	4b03      	ldr	r3, [pc, #12]	@ (8008c74 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bc80      	pop	{r7}
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	20000014 	.word	0x20000014

08008c78 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b085      	sub	sp, #20
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008c82:	2302      	movs	r3, #2
 8008c84:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d005      	beq.n	8008c98 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	683a      	ldr	r2, [r7, #0]
 8008c90:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8008c94:	2300      	movs	r3, #0
 8008c96:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3714      	adds	r7, #20
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bc80      	pop	{r7}
 8008ca2:	4770      	bx	lr

08008ca4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b087      	sub	sp, #28
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	60b9      	str	r1, [r7, #8]
 8008cae:	4613      	mov	r3, r2
 8008cb0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cb8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	68ba      	ldr	r2, [r7, #8]
 8008cbe:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008cc2:	88fa      	ldrh	r2, [r7, #6]
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	371c      	adds	r7, #28
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bc80      	pop	{r7}
 8008cd4:	4770      	bx	lr

08008cd6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008cd6:	b480      	push	{r7}
 8008cd8:	b085      	sub	sp, #20
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
 8008cde:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ce6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	683a      	ldr	r2, [r7, #0]
 8008cec:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8008cf0:	2300      	movs	r3, #0
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3714      	adds	r7, #20
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bc80      	pop	{r7}
 8008cfa:	4770      	bx	lr

08008cfc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d0a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d01c      	beq.n	8008d50 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d115      	bne.n	8008d4c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2201      	movs	r2, #1
 8008d24:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	2181      	movs	r1, #129	@ 0x81
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f004 f9a5 	bl	800d092 <USBD_LL_Transmit>

      return USBD_OK;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	e002      	b.n	8008d52 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e000      	b.n	8008d52 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008d50:	2302      	movs	r3, #2
  }
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3710      	adds	r7, #16
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b084      	sub	sp, #16
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d68:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d017      	beq.n	8008da4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	7c1b      	ldrb	r3, [r3, #16]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d109      	bne.n	8008d90 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008d82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008d86:	2101      	movs	r1, #1
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f004 f9a5 	bl	800d0d8 <USBD_LL_PrepareReceive>
 8008d8e:	e007      	b.n	8008da0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008d96:	2340      	movs	r3, #64	@ 0x40
 8008d98:	2101      	movs	r1, #1
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f004 f99c 	bl	800d0d8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008da0:	2300      	movs	r3, #0
 8008da2:	e000      	b.n	8008da6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008da4:	2302      	movs	r3, #2
  }
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b084      	sub	sp, #16
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	60f8      	str	r0, [r7, #12]
 8008db6:	60b9      	str	r1, [r7, #8]
 8008db8:	4613      	mov	r3, r2
 8008dba:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d101      	bne.n	8008dc6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008dc2:	2302      	movs	r3, #2
 8008dc4:	e01a      	b.n	8008dfc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d003      	beq.n	8008dd8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d003      	beq.n	8008de6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	68ba      	ldr	r2, [r7, #8]
 8008de2:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2201      	movs	r2, #1
 8008dea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	79fa      	ldrb	r2, [r7, #7]
 8008df2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008df4:	68f8      	ldr	r0, [r7, #12]
 8008df6:	f004 f809 	bl	800ce0c <USBD_LL_Init>

  return USBD_OK;
 8008dfa:	2300      	movs	r3, #0
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3710      	adds	r7, #16
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d006      	beq.n	8008e26 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	683a      	ldr	r2, [r7, #0]
 8008e1c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8008e20:	2300      	movs	r3, #0
 8008e22:	73fb      	strb	r3, [r7, #15]
 8008e24:	e001      	b.n	8008e2a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008e26:	2302      	movs	r3, #2
 8008e28:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3714      	adds	r7, #20
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bc80      	pop	{r7}
 8008e34:	4770      	bx	lr

08008e36 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b082      	sub	sp, #8
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f004 f83e 	bl	800cec0 <USBD_LL_Start>

  return USBD_OK;
 8008e44:	2300      	movs	r3, #0
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3708      	adds	r7, #8
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}

08008e4e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008e4e:	b480      	push	{r7}
 8008e50:	b083      	sub	sp, #12
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008e56:	2300      	movs	r3, #0
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	370c      	adds	r7, #12
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bc80      	pop	{r7}
 8008e60:	4770      	bx	lr

08008e62 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b084      	sub	sp, #16
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008e6e:	2302      	movs	r3, #2
 8008e70:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d00c      	beq.n	8008e96 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	78fa      	ldrb	r2, [r7, #3]
 8008e86:	4611      	mov	r1, r2
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	4798      	blx	r3
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d101      	bne.n	8008e96 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008e92:	2300      	movs	r3, #0
 8008e94:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3710      	adds	r7, #16
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	78fa      	ldrb	r2, [r7, #3]
 8008eb6:	4611      	mov	r1, r2
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	4798      	blx	r3

  return USBD_OK;
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3708      	adds	r7, #8
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b082      	sub	sp, #8
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
 8008ece:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008ed6:	6839      	ldr	r1, [r7, #0]
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f000 fed8 	bl	8009c8e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008eec:	461a      	mov	r2, r3
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008efa:	f003 031f 	and.w	r3, r3, #31
 8008efe:	2b02      	cmp	r3, #2
 8008f00:	d016      	beq.n	8008f30 <USBD_LL_SetupStage+0x6a>
 8008f02:	2b02      	cmp	r3, #2
 8008f04:	d81c      	bhi.n	8008f40 <USBD_LL_SetupStage+0x7a>
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d002      	beq.n	8008f10 <USBD_LL_SetupStage+0x4a>
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d008      	beq.n	8008f20 <USBD_LL_SetupStage+0x5a>
 8008f0e:	e017      	b.n	8008f40 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008f16:	4619      	mov	r1, r3
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 f9cb 	bl	80092b4 <USBD_StdDevReq>
      break;
 8008f1e:	e01a      	b.n	8008f56 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008f26:	4619      	mov	r1, r3
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 fa2d 	bl	8009388 <USBD_StdItfReq>
      break;
 8008f2e:	e012      	b.n	8008f56 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008f36:	4619      	mov	r1, r3
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 fa6d 	bl	8009418 <USBD_StdEPReq>
      break;
 8008f3e:	e00a      	b.n	8008f56 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008f46:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f004 f816 	bl	800cf80 <USBD_LL_StallEP>
      break;
 8008f54:	bf00      	nop
  }

  return USBD_OK;
 8008f56:	2300      	movs	r3, #0
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3708      	adds	r7, #8
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b086      	sub	sp, #24
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	460b      	mov	r3, r1
 8008f6a:	607a      	str	r2, [r7, #4]
 8008f6c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008f6e:	7afb      	ldrb	r3, [r7, #11]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d14b      	bne.n	800900c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008f7a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008f82:	2b03      	cmp	r3, #3
 8008f84:	d134      	bne.n	8008ff0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	68da      	ldr	r2, [r3, #12]
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	691b      	ldr	r3, [r3, #16]
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d919      	bls.n	8008fc6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	68da      	ldr	r2, [r3, #12]
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	691b      	ldr	r3, [r3, #16]
 8008f9a:	1ad2      	subs	r2, r2, r3
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	68da      	ldr	r2, [r3, #12]
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d203      	bcs.n	8008fb4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008fb0:	b29b      	uxth	r3, r3
 8008fb2:	e002      	b.n	8008fba <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	461a      	mov	r2, r3
 8008fbc:	6879      	ldr	r1, [r7, #4]
 8008fbe:	68f8      	ldr	r0, [r7, #12]
 8008fc0:	f000 ff54 	bl	8009e6c <USBD_CtlContinueRx>
 8008fc4:	e038      	b.n	8009038 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fcc:	691b      	ldr	r3, [r3, #16]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00a      	beq.n	8008fe8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008fd8:	2b03      	cmp	r3, #3
 8008fda:	d105      	bne.n	8008fe8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fe2:	691b      	ldr	r3, [r3, #16]
 8008fe4:	68f8      	ldr	r0, [r7, #12]
 8008fe6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008fe8:	68f8      	ldr	r0, [r7, #12]
 8008fea:	f000 ff51 	bl	8009e90 <USBD_CtlSendStatus>
 8008fee:	e023      	b.n	8009038 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008ff6:	2b05      	cmp	r3, #5
 8008ff8:	d11e      	bne.n	8009038 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009002:	2100      	movs	r1, #0
 8009004:	68f8      	ldr	r0, [r7, #12]
 8009006:	f003 ffbb 	bl	800cf80 <USBD_LL_StallEP>
 800900a:	e015      	b.n	8009038 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009012:	699b      	ldr	r3, [r3, #24]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d00d      	beq.n	8009034 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800901e:	2b03      	cmp	r3, #3
 8009020:	d108      	bne.n	8009034 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009028:	699b      	ldr	r3, [r3, #24]
 800902a:	7afa      	ldrb	r2, [r7, #11]
 800902c:	4611      	mov	r1, r2
 800902e:	68f8      	ldr	r0, [r7, #12]
 8009030:	4798      	blx	r3
 8009032:	e001      	b.n	8009038 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009034:	2302      	movs	r3, #2
 8009036:	e000      	b.n	800903a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009038:	2300      	movs	r3, #0
}
 800903a:	4618      	mov	r0, r3
 800903c:	3718      	adds	r7, #24
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}

08009042 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009042:	b580      	push	{r7, lr}
 8009044:	b086      	sub	sp, #24
 8009046:	af00      	add	r7, sp, #0
 8009048:	60f8      	str	r0, [r7, #12]
 800904a:	460b      	mov	r3, r1
 800904c:	607a      	str	r2, [r7, #4]
 800904e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009050:	7afb      	ldrb	r3, [r7, #11]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d17f      	bne.n	8009156 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	3314      	adds	r3, #20
 800905a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009062:	2b02      	cmp	r3, #2
 8009064:	d15c      	bne.n	8009120 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	68da      	ldr	r2, [r3, #12]
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	691b      	ldr	r3, [r3, #16]
 800906e:	429a      	cmp	r2, r3
 8009070:	d915      	bls.n	800909e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	68da      	ldr	r2, [r3, #12]
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	691b      	ldr	r3, [r3, #16]
 800907a:	1ad2      	subs	r2, r2, r3
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	68db      	ldr	r3, [r3, #12]
 8009084:	b29b      	uxth	r3, r3
 8009086:	461a      	mov	r2, r3
 8009088:	6879      	ldr	r1, [r7, #4]
 800908a:	68f8      	ldr	r0, [r7, #12]
 800908c:	f000 febe 	bl	8009e0c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009090:	2300      	movs	r3, #0
 8009092:	2200      	movs	r2, #0
 8009094:	2100      	movs	r1, #0
 8009096:	68f8      	ldr	r0, [r7, #12]
 8009098:	f004 f81e 	bl	800d0d8 <USBD_LL_PrepareReceive>
 800909c:	e04e      	b.n	800913c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	697a      	ldr	r2, [r7, #20]
 80090a4:	6912      	ldr	r2, [r2, #16]
 80090a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80090aa:	fb01 f202 	mul.w	r2, r1, r2
 80090ae:	1a9b      	subs	r3, r3, r2
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d11c      	bne.n	80090ee <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	689a      	ldr	r2, [r3, #8]
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80090bc:	429a      	cmp	r2, r3
 80090be:	d316      	bcc.n	80090ee <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	689a      	ldr	r2, [r3, #8]
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d20f      	bcs.n	80090ee <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80090ce:	2200      	movs	r2, #0
 80090d0:	2100      	movs	r1, #0
 80090d2:	68f8      	ldr	r0, [r7, #12]
 80090d4:	f000 fe9a 	bl	8009e0c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2200      	movs	r2, #0
 80090dc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090e0:	2300      	movs	r3, #0
 80090e2:	2200      	movs	r2, #0
 80090e4:	2100      	movs	r1, #0
 80090e6:	68f8      	ldr	r0, [r7, #12]
 80090e8:	f003 fff6 	bl	800d0d8 <USBD_LL_PrepareReceive>
 80090ec:	e026      	b.n	800913c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090f4:	68db      	ldr	r3, [r3, #12]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d00a      	beq.n	8009110 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009100:	2b03      	cmp	r3, #3
 8009102:	d105      	bne.n	8009110 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	68f8      	ldr	r0, [r7, #12]
 800910e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009110:	2180      	movs	r1, #128	@ 0x80
 8009112:	68f8      	ldr	r0, [r7, #12]
 8009114:	f003 ff34 	bl	800cf80 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f000 fecc 	bl	8009eb6 <USBD_CtlReceiveStatus>
 800911e:	e00d      	b.n	800913c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009126:	2b04      	cmp	r3, #4
 8009128:	d004      	beq.n	8009134 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009130:	2b00      	cmp	r3, #0
 8009132:	d103      	bne.n	800913c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009134:	2180      	movs	r1, #128	@ 0x80
 8009136:	68f8      	ldr	r0, [r7, #12]
 8009138:	f003 ff22 	bl	800cf80 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009142:	2b01      	cmp	r3, #1
 8009144:	d11d      	bne.n	8009182 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009146:	68f8      	ldr	r0, [r7, #12]
 8009148:	f7ff fe81 	bl	8008e4e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2200      	movs	r2, #0
 8009150:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009154:	e015      	b.n	8009182 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800915c:	695b      	ldr	r3, [r3, #20]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d00d      	beq.n	800917e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009168:	2b03      	cmp	r3, #3
 800916a:	d108      	bne.n	800917e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009172:	695b      	ldr	r3, [r3, #20]
 8009174:	7afa      	ldrb	r2, [r7, #11]
 8009176:	4611      	mov	r1, r2
 8009178:	68f8      	ldr	r0, [r7, #12]
 800917a:	4798      	blx	r3
 800917c:	e001      	b.n	8009182 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800917e:	2302      	movs	r3, #2
 8009180:	e000      	b.n	8009184 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009182:	2300      	movs	r3, #0
}
 8009184:	4618      	mov	r0, r3
 8009186:	3718      	adds	r7, #24
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009194:	2340      	movs	r3, #64	@ 0x40
 8009196:	2200      	movs	r2, #0
 8009198:	2100      	movs	r1, #0
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f003 feab 	bl	800cef6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2240      	movs	r2, #64	@ 0x40
 80091ac:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80091b0:	2340      	movs	r3, #64	@ 0x40
 80091b2:	2200      	movs	r2, #0
 80091b4:	2180      	movs	r1, #128	@ 0x80
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f003 fe9d 	bl	800cef6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2201      	movs	r2, #1
 80091c0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2240      	movs	r2, #64	@ 0x40
 80091c6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2201      	movs	r2, #1
 80091cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2200      	movs	r2, #0
 80091dc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d009      	beq.n	8009204 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	6852      	ldr	r2, [r2, #4]
 80091fc:	b2d2      	uxtb	r2, r2
 80091fe:	4611      	mov	r1, r2
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	4798      	blx	r3
  }

  return USBD_OK;
 8009204:	2300      	movs	r3, #0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3708      	adds	r7, #8
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}

0800920e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800920e:	b480      	push	{r7}
 8009210:	b083      	sub	sp, #12
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
 8009216:	460b      	mov	r3, r1
 8009218:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	78fa      	ldrb	r2, [r7, #3]
 800921e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009220:	2300      	movs	r3, #0
}
 8009222:	4618      	mov	r0, r3
 8009224:	370c      	adds	r7, #12
 8009226:	46bd      	mov	sp, r7
 8009228:	bc80      	pop	{r7}
 800922a:	4770      	bx	lr

0800922c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2204      	movs	r2, #4
 8009244:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009248:	2300      	movs	r3, #0
}
 800924a:	4618      	mov	r0, r3
 800924c:	370c      	adds	r7, #12
 800924e:	46bd      	mov	sp, r7
 8009250:	bc80      	pop	{r7}
 8009252:	4770      	bx	lr

08009254 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009254:	b480      	push	{r7}
 8009256:	b083      	sub	sp, #12
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009262:	2b04      	cmp	r3, #4
 8009264:	d105      	bne.n	8009272 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009272:	2300      	movs	r3, #0
}
 8009274:	4618      	mov	r0, r3
 8009276:	370c      	adds	r7, #12
 8009278:	46bd      	mov	sp, r7
 800927a:	bc80      	pop	{r7}
 800927c:	4770      	bx	lr

0800927e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b082      	sub	sp, #8
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800928c:	2b03      	cmp	r3, #3
 800928e:	d10b      	bne.n	80092a8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009296:	69db      	ldr	r3, [r3, #28]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d005      	beq.n	80092a8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092a2:	69db      	ldr	r3, [r3, #28]
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80092a8:	2300      	movs	r3, #0
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3708      	adds	r7, #8
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
	...

080092b4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b084      	sub	sp, #16
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80092be:	2300      	movs	r3, #0
 80092c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80092ca:	2b40      	cmp	r3, #64	@ 0x40
 80092cc:	d005      	beq.n	80092da <USBD_StdDevReq+0x26>
 80092ce:	2b40      	cmp	r3, #64	@ 0x40
 80092d0:	d84f      	bhi.n	8009372 <USBD_StdDevReq+0xbe>
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d009      	beq.n	80092ea <USBD_StdDevReq+0x36>
 80092d6:	2b20      	cmp	r3, #32
 80092d8:	d14b      	bne.n	8009372 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	6839      	ldr	r1, [r7, #0]
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	4798      	blx	r3
      break;
 80092e8:	e048      	b.n	800937c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	785b      	ldrb	r3, [r3, #1]
 80092ee:	2b09      	cmp	r3, #9
 80092f0:	d839      	bhi.n	8009366 <USBD_StdDevReq+0xb2>
 80092f2:	a201      	add	r2, pc, #4	@ (adr r2, 80092f8 <USBD_StdDevReq+0x44>)
 80092f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092f8:	08009349 	.word	0x08009349
 80092fc:	0800935d 	.word	0x0800935d
 8009300:	08009367 	.word	0x08009367
 8009304:	08009353 	.word	0x08009353
 8009308:	08009367 	.word	0x08009367
 800930c:	0800932b 	.word	0x0800932b
 8009310:	08009321 	.word	0x08009321
 8009314:	08009367 	.word	0x08009367
 8009318:	0800933f 	.word	0x0800933f
 800931c:	08009335 	.word	0x08009335
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009320:	6839      	ldr	r1, [r7, #0]
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 f9dc 	bl	80096e0 <USBD_GetDescriptor>
          break;
 8009328:	e022      	b.n	8009370 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800932a:	6839      	ldr	r1, [r7, #0]
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 fb3f 	bl	80099b0 <USBD_SetAddress>
          break;
 8009332:	e01d      	b.n	8009370 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009334:	6839      	ldr	r1, [r7, #0]
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 fb7e 	bl	8009a38 <USBD_SetConfig>
          break;
 800933c:	e018      	b.n	8009370 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800933e:	6839      	ldr	r1, [r7, #0]
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f000 fc07 	bl	8009b54 <USBD_GetConfig>
          break;
 8009346:	e013      	b.n	8009370 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009348:	6839      	ldr	r1, [r7, #0]
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 fc37 	bl	8009bbe <USBD_GetStatus>
          break;
 8009350:	e00e      	b.n	8009370 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009352:	6839      	ldr	r1, [r7, #0]
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 fc65 	bl	8009c24 <USBD_SetFeature>
          break;
 800935a:	e009      	b.n	8009370 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800935c:	6839      	ldr	r1, [r7, #0]
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 fc74 	bl	8009c4c <USBD_ClrFeature>
          break;
 8009364:	e004      	b.n	8009370 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009366:	6839      	ldr	r1, [r7, #0]
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 fcc9 	bl	8009d00 <USBD_CtlError>
          break;
 800936e:	bf00      	nop
      }
      break;
 8009370:	e004      	b.n	800937c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009372:	6839      	ldr	r1, [r7, #0]
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 fcc3 	bl	8009d00 <USBD_CtlError>
      break;
 800937a:	bf00      	nop
  }

  return ret;
 800937c:	7bfb      	ldrb	r3, [r7, #15]
}
 800937e:	4618      	mov	r0, r3
 8009380:	3710      	adds	r7, #16
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop

08009388 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b084      	sub	sp, #16
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009392:	2300      	movs	r3, #0
 8009394:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800939e:	2b40      	cmp	r3, #64	@ 0x40
 80093a0:	d005      	beq.n	80093ae <USBD_StdItfReq+0x26>
 80093a2:	2b40      	cmp	r3, #64	@ 0x40
 80093a4:	d82e      	bhi.n	8009404 <USBD_StdItfReq+0x7c>
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d001      	beq.n	80093ae <USBD_StdItfReq+0x26>
 80093aa:	2b20      	cmp	r3, #32
 80093ac:	d12a      	bne.n	8009404 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093b4:	3b01      	subs	r3, #1
 80093b6:	2b02      	cmp	r3, #2
 80093b8:	d81d      	bhi.n	80093f6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	889b      	ldrh	r3, [r3, #4]
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d813      	bhi.n	80093ec <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093ca:	689b      	ldr	r3, [r3, #8]
 80093cc:	6839      	ldr	r1, [r7, #0]
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	4798      	blx	r3
 80093d2:	4603      	mov	r3, r0
 80093d4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	88db      	ldrh	r3, [r3, #6]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d110      	bne.n	8009400 <USBD_StdItfReq+0x78>
 80093de:	7bfb      	ldrb	r3, [r7, #15]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d10d      	bne.n	8009400 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 fd53 	bl	8009e90 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80093ea:	e009      	b.n	8009400 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80093ec:	6839      	ldr	r1, [r7, #0]
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 fc86 	bl	8009d00 <USBD_CtlError>
          break;
 80093f4:	e004      	b.n	8009400 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80093f6:	6839      	ldr	r1, [r7, #0]
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 fc81 	bl	8009d00 <USBD_CtlError>
          break;
 80093fe:	e000      	b.n	8009402 <USBD_StdItfReq+0x7a>
          break;
 8009400:	bf00      	nop
      }
      break;
 8009402:	e004      	b.n	800940e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009404:	6839      	ldr	r1, [r7, #0]
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 fc7a 	bl	8009d00 <USBD_CtlError>
      break;
 800940c:	bf00      	nop
  }

  return USBD_OK;
 800940e:	2300      	movs	r3, #0
}
 8009410:	4618      	mov	r0, r3
 8009412:	3710      	adds	r7, #16
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009422:	2300      	movs	r3, #0
 8009424:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	889b      	ldrh	r3, [r3, #4]
 800942a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009434:	2b40      	cmp	r3, #64	@ 0x40
 8009436:	d007      	beq.n	8009448 <USBD_StdEPReq+0x30>
 8009438:	2b40      	cmp	r3, #64	@ 0x40
 800943a:	f200 8146 	bhi.w	80096ca <USBD_StdEPReq+0x2b2>
 800943e:	2b00      	cmp	r3, #0
 8009440:	d00a      	beq.n	8009458 <USBD_StdEPReq+0x40>
 8009442:	2b20      	cmp	r3, #32
 8009444:	f040 8141 	bne.w	80096ca <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	6839      	ldr	r1, [r7, #0]
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	4798      	blx	r3
      break;
 8009456:	e13d      	b.n	80096d4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009460:	2b20      	cmp	r3, #32
 8009462:	d10a      	bne.n	800947a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	6839      	ldr	r1, [r7, #0]
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	4798      	blx	r3
 8009472:	4603      	mov	r3, r0
 8009474:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009476:	7bfb      	ldrb	r3, [r7, #15]
 8009478:	e12d      	b.n	80096d6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	785b      	ldrb	r3, [r3, #1]
 800947e:	2b03      	cmp	r3, #3
 8009480:	d007      	beq.n	8009492 <USBD_StdEPReq+0x7a>
 8009482:	2b03      	cmp	r3, #3
 8009484:	f300 811b 	bgt.w	80096be <USBD_StdEPReq+0x2a6>
 8009488:	2b00      	cmp	r3, #0
 800948a:	d072      	beq.n	8009572 <USBD_StdEPReq+0x15a>
 800948c:	2b01      	cmp	r3, #1
 800948e:	d03a      	beq.n	8009506 <USBD_StdEPReq+0xee>
 8009490:	e115      	b.n	80096be <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009498:	2b02      	cmp	r3, #2
 800949a:	d002      	beq.n	80094a2 <USBD_StdEPReq+0x8a>
 800949c:	2b03      	cmp	r3, #3
 800949e:	d015      	beq.n	80094cc <USBD_StdEPReq+0xb4>
 80094a0:	e02b      	b.n	80094fa <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094a2:	7bbb      	ldrb	r3, [r7, #14]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d00c      	beq.n	80094c2 <USBD_StdEPReq+0xaa>
 80094a8:	7bbb      	ldrb	r3, [r7, #14]
 80094aa:	2b80      	cmp	r3, #128	@ 0x80
 80094ac:	d009      	beq.n	80094c2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80094ae:	7bbb      	ldrb	r3, [r7, #14]
 80094b0:	4619      	mov	r1, r3
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f003 fd64 	bl	800cf80 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80094b8:	2180      	movs	r1, #128	@ 0x80
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f003 fd60 	bl	800cf80 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80094c0:	e020      	b.n	8009504 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80094c2:	6839      	ldr	r1, [r7, #0]
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 fc1b 	bl	8009d00 <USBD_CtlError>
              break;
 80094ca:	e01b      	b.n	8009504 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	885b      	ldrh	r3, [r3, #2]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d10e      	bne.n	80094f2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80094d4:	7bbb      	ldrb	r3, [r7, #14]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d00b      	beq.n	80094f2 <USBD_StdEPReq+0xda>
 80094da:	7bbb      	ldrb	r3, [r7, #14]
 80094dc:	2b80      	cmp	r3, #128	@ 0x80
 80094de:	d008      	beq.n	80094f2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	88db      	ldrh	r3, [r3, #6]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d104      	bne.n	80094f2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80094e8:	7bbb      	ldrb	r3, [r7, #14]
 80094ea:	4619      	mov	r1, r3
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f003 fd47 	bl	800cf80 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 fccc 	bl	8009e90 <USBD_CtlSendStatus>

              break;
 80094f8:	e004      	b.n	8009504 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80094fa:	6839      	ldr	r1, [r7, #0]
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 fbff 	bl	8009d00 <USBD_CtlError>
              break;
 8009502:	bf00      	nop
          }
          break;
 8009504:	e0e0      	b.n	80096c8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800950c:	2b02      	cmp	r3, #2
 800950e:	d002      	beq.n	8009516 <USBD_StdEPReq+0xfe>
 8009510:	2b03      	cmp	r3, #3
 8009512:	d015      	beq.n	8009540 <USBD_StdEPReq+0x128>
 8009514:	e026      	b.n	8009564 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009516:	7bbb      	ldrb	r3, [r7, #14]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d00c      	beq.n	8009536 <USBD_StdEPReq+0x11e>
 800951c:	7bbb      	ldrb	r3, [r7, #14]
 800951e:	2b80      	cmp	r3, #128	@ 0x80
 8009520:	d009      	beq.n	8009536 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009522:	7bbb      	ldrb	r3, [r7, #14]
 8009524:	4619      	mov	r1, r3
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f003 fd2a 	bl	800cf80 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800952c:	2180      	movs	r1, #128	@ 0x80
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f003 fd26 	bl	800cf80 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009534:	e01c      	b.n	8009570 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009536:	6839      	ldr	r1, [r7, #0]
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 fbe1 	bl	8009d00 <USBD_CtlError>
              break;
 800953e:	e017      	b.n	8009570 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	885b      	ldrh	r3, [r3, #2]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d112      	bne.n	800956e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009548:	7bbb      	ldrb	r3, [r7, #14]
 800954a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800954e:	2b00      	cmp	r3, #0
 8009550:	d004      	beq.n	800955c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009552:	7bbb      	ldrb	r3, [r7, #14]
 8009554:	4619      	mov	r1, r3
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f003 fd31 	bl	800cfbe <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f000 fc97 	bl	8009e90 <USBD_CtlSendStatus>
              }
              break;
 8009562:	e004      	b.n	800956e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009564:	6839      	ldr	r1, [r7, #0]
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 fbca 	bl	8009d00 <USBD_CtlError>
              break;
 800956c:	e000      	b.n	8009570 <USBD_StdEPReq+0x158>
              break;
 800956e:	bf00      	nop
          }
          break;
 8009570:	e0aa      	b.n	80096c8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009578:	2b02      	cmp	r3, #2
 800957a:	d002      	beq.n	8009582 <USBD_StdEPReq+0x16a>
 800957c:	2b03      	cmp	r3, #3
 800957e:	d032      	beq.n	80095e6 <USBD_StdEPReq+0x1ce>
 8009580:	e097      	b.n	80096b2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009582:	7bbb      	ldrb	r3, [r7, #14]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d007      	beq.n	8009598 <USBD_StdEPReq+0x180>
 8009588:	7bbb      	ldrb	r3, [r7, #14]
 800958a:	2b80      	cmp	r3, #128	@ 0x80
 800958c:	d004      	beq.n	8009598 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800958e:	6839      	ldr	r1, [r7, #0]
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 fbb5 	bl	8009d00 <USBD_CtlError>
                break;
 8009596:	e091      	b.n	80096bc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009598:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800959c:	2b00      	cmp	r3, #0
 800959e:	da0b      	bge.n	80095b8 <USBD_StdEPReq+0x1a0>
 80095a0:	7bbb      	ldrb	r3, [r7, #14]
 80095a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095a6:	4613      	mov	r3, r2
 80095a8:	009b      	lsls	r3, r3, #2
 80095aa:	4413      	add	r3, r2
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	3310      	adds	r3, #16
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	4413      	add	r3, r2
 80095b4:	3304      	adds	r3, #4
 80095b6:	e00b      	b.n	80095d0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80095b8:	7bbb      	ldrb	r3, [r7, #14]
 80095ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095be:	4613      	mov	r3, r2
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	4413      	add	r3, r2
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	4413      	add	r3, r2
 80095ce:	3304      	adds	r3, #4
 80095d0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	2200      	movs	r2, #0
 80095d6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	2202      	movs	r2, #2
 80095dc:	4619      	mov	r1, r3
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 fbf8 	bl	8009dd4 <USBD_CtlSendData>
              break;
 80095e4:	e06a      	b.n	80096bc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80095e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	da11      	bge.n	8009612 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80095ee:	7bbb      	ldrb	r3, [r7, #14]
 80095f0:	f003 020f 	and.w	r2, r3, #15
 80095f4:	6879      	ldr	r1, [r7, #4]
 80095f6:	4613      	mov	r3, r2
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	4413      	add	r3, r2
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	440b      	add	r3, r1
 8009600:	3318      	adds	r3, #24
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d117      	bne.n	8009638 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009608:	6839      	ldr	r1, [r7, #0]
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 fb78 	bl	8009d00 <USBD_CtlError>
                  break;
 8009610:	e054      	b.n	80096bc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009612:	7bbb      	ldrb	r3, [r7, #14]
 8009614:	f003 020f 	and.w	r2, r3, #15
 8009618:	6879      	ldr	r1, [r7, #4]
 800961a:	4613      	mov	r3, r2
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	4413      	add	r3, r2
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	440b      	add	r3, r1
 8009624:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d104      	bne.n	8009638 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800962e:	6839      	ldr	r1, [r7, #0]
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 fb65 	bl	8009d00 <USBD_CtlError>
                  break;
 8009636:	e041      	b.n	80096bc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009638:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800963c:	2b00      	cmp	r3, #0
 800963e:	da0b      	bge.n	8009658 <USBD_StdEPReq+0x240>
 8009640:	7bbb      	ldrb	r3, [r7, #14]
 8009642:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009646:	4613      	mov	r3, r2
 8009648:	009b      	lsls	r3, r3, #2
 800964a:	4413      	add	r3, r2
 800964c:	009b      	lsls	r3, r3, #2
 800964e:	3310      	adds	r3, #16
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	4413      	add	r3, r2
 8009654:	3304      	adds	r3, #4
 8009656:	e00b      	b.n	8009670 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009658:	7bbb      	ldrb	r3, [r7, #14]
 800965a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800965e:	4613      	mov	r3, r2
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	4413      	add	r3, r2
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	4413      	add	r3, r2
 800966e:	3304      	adds	r3, #4
 8009670:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009672:	7bbb      	ldrb	r3, [r7, #14]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d002      	beq.n	800967e <USBD_StdEPReq+0x266>
 8009678:	7bbb      	ldrb	r3, [r7, #14]
 800967a:	2b80      	cmp	r3, #128	@ 0x80
 800967c:	d103      	bne.n	8009686 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	2200      	movs	r2, #0
 8009682:	601a      	str	r2, [r3, #0]
 8009684:	e00e      	b.n	80096a4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009686:	7bbb      	ldrb	r3, [r7, #14]
 8009688:	4619      	mov	r1, r3
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f003 fcb6 	bl	800cffc <USBD_LL_IsStallEP>
 8009690:	4603      	mov	r3, r0
 8009692:	2b00      	cmp	r3, #0
 8009694:	d003      	beq.n	800969e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	2201      	movs	r2, #1
 800969a:	601a      	str	r2, [r3, #0]
 800969c:	e002      	b.n	80096a4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	2200      	movs	r2, #0
 80096a2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	2202      	movs	r2, #2
 80096a8:	4619      	mov	r1, r3
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 fb92 	bl	8009dd4 <USBD_CtlSendData>
              break;
 80096b0:	e004      	b.n	80096bc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80096b2:	6839      	ldr	r1, [r7, #0]
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 fb23 	bl	8009d00 <USBD_CtlError>
              break;
 80096ba:	bf00      	nop
          }
          break;
 80096bc:	e004      	b.n	80096c8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80096be:	6839      	ldr	r1, [r7, #0]
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f000 fb1d 	bl	8009d00 <USBD_CtlError>
          break;
 80096c6:	bf00      	nop
      }
      break;
 80096c8:	e004      	b.n	80096d4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80096ca:	6839      	ldr	r1, [r7, #0]
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 fb17 	bl	8009d00 <USBD_CtlError>
      break;
 80096d2:	bf00      	nop
  }

  return ret;
 80096d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3710      	adds	r7, #16
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
	...

080096e0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80096ea:	2300      	movs	r3, #0
 80096ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80096ee:	2300      	movs	r3, #0
 80096f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80096f2:	2300      	movs	r3, #0
 80096f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	885b      	ldrh	r3, [r3, #2]
 80096fa:	0a1b      	lsrs	r3, r3, #8
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	3b01      	subs	r3, #1
 8009700:	2b06      	cmp	r3, #6
 8009702:	f200 8128 	bhi.w	8009956 <USBD_GetDescriptor+0x276>
 8009706:	a201      	add	r2, pc, #4	@ (adr r2, 800970c <USBD_GetDescriptor+0x2c>)
 8009708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800970c:	08009729 	.word	0x08009729
 8009710:	08009741 	.word	0x08009741
 8009714:	08009781 	.word	0x08009781
 8009718:	08009957 	.word	0x08009957
 800971c:	08009957 	.word	0x08009957
 8009720:	080098f7 	.word	0x080098f7
 8009724:	08009923 	.word	0x08009923
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	7c12      	ldrb	r2, [r2, #16]
 8009734:	f107 0108 	add.w	r1, r7, #8
 8009738:	4610      	mov	r0, r2
 800973a:	4798      	blx	r3
 800973c:	60f8      	str	r0, [r7, #12]
      break;
 800973e:	e112      	b.n	8009966 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	7c1b      	ldrb	r3, [r3, #16]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d10d      	bne.n	8009764 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800974e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009750:	f107 0208 	add.w	r2, r7, #8
 8009754:	4610      	mov	r0, r2
 8009756:	4798      	blx	r3
 8009758:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	3301      	adds	r3, #1
 800975e:	2202      	movs	r2, #2
 8009760:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009762:	e100      	b.n	8009966 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800976a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800976c:	f107 0208 	add.w	r2, r7, #8
 8009770:	4610      	mov	r0, r2
 8009772:	4798      	blx	r3
 8009774:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	3301      	adds	r3, #1
 800977a:	2202      	movs	r2, #2
 800977c:	701a      	strb	r2, [r3, #0]
      break;
 800977e:	e0f2      	b.n	8009966 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	885b      	ldrh	r3, [r3, #2]
 8009784:	b2db      	uxtb	r3, r3
 8009786:	2b05      	cmp	r3, #5
 8009788:	f200 80ac 	bhi.w	80098e4 <USBD_GetDescriptor+0x204>
 800978c:	a201      	add	r2, pc, #4	@ (adr r2, 8009794 <USBD_GetDescriptor+0xb4>)
 800978e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009792:	bf00      	nop
 8009794:	080097ad 	.word	0x080097ad
 8009798:	080097e1 	.word	0x080097e1
 800979c:	08009815 	.word	0x08009815
 80097a0:	08009849 	.word	0x08009849
 80097a4:	0800987d 	.word	0x0800987d
 80097a8:	080098b1 	.word	0x080098b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d00b      	beq.n	80097d0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	7c12      	ldrb	r2, [r2, #16]
 80097c4:	f107 0108 	add.w	r1, r7, #8
 80097c8:	4610      	mov	r0, r2
 80097ca:	4798      	blx	r3
 80097cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097ce:	e091      	b.n	80098f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097d0:	6839      	ldr	r1, [r7, #0]
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 fa94 	bl	8009d00 <USBD_CtlError>
            err++;
 80097d8:	7afb      	ldrb	r3, [r7, #11]
 80097da:	3301      	adds	r3, #1
 80097dc:	72fb      	strb	r3, [r7, #11]
          break;
 80097de:	e089      	b.n	80098f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d00b      	beq.n	8009804 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	7c12      	ldrb	r2, [r2, #16]
 80097f8:	f107 0108 	add.w	r1, r7, #8
 80097fc:	4610      	mov	r0, r2
 80097fe:	4798      	blx	r3
 8009800:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009802:	e077      	b.n	80098f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009804:	6839      	ldr	r1, [r7, #0]
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f000 fa7a 	bl	8009d00 <USBD_CtlError>
            err++;
 800980c:	7afb      	ldrb	r3, [r7, #11]
 800980e:	3301      	adds	r3, #1
 8009810:	72fb      	strb	r3, [r7, #11]
          break;
 8009812:	e06f      	b.n	80098f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800981a:	68db      	ldr	r3, [r3, #12]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d00b      	beq.n	8009838 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009826:	68db      	ldr	r3, [r3, #12]
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	7c12      	ldrb	r2, [r2, #16]
 800982c:	f107 0108 	add.w	r1, r7, #8
 8009830:	4610      	mov	r0, r2
 8009832:	4798      	blx	r3
 8009834:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009836:	e05d      	b.n	80098f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009838:	6839      	ldr	r1, [r7, #0]
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 fa60 	bl	8009d00 <USBD_CtlError>
            err++;
 8009840:	7afb      	ldrb	r3, [r7, #11]
 8009842:	3301      	adds	r3, #1
 8009844:	72fb      	strb	r3, [r7, #11]
          break;
 8009846:	e055      	b.n	80098f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800984e:	691b      	ldr	r3, [r3, #16]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d00b      	beq.n	800986c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800985a:	691b      	ldr	r3, [r3, #16]
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	7c12      	ldrb	r2, [r2, #16]
 8009860:	f107 0108 	add.w	r1, r7, #8
 8009864:	4610      	mov	r0, r2
 8009866:	4798      	blx	r3
 8009868:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800986a:	e043      	b.n	80098f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800986c:	6839      	ldr	r1, [r7, #0]
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f000 fa46 	bl	8009d00 <USBD_CtlError>
            err++;
 8009874:	7afb      	ldrb	r3, [r7, #11]
 8009876:	3301      	adds	r3, #1
 8009878:	72fb      	strb	r3, [r7, #11]
          break;
 800987a:	e03b      	b.n	80098f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009882:	695b      	ldr	r3, [r3, #20]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d00b      	beq.n	80098a0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800988e:	695b      	ldr	r3, [r3, #20]
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	7c12      	ldrb	r2, [r2, #16]
 8009894:	f107 0108 	add.w	r1, r7, #8
 8009898:	4610      	mov	r0, r2
 800989a:	4798      	blx	r3
 800989c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800989e:	e029      	b.n	80098f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098a0:	6839      	ldr	r1, [r7, #0]
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 fa2c 	bl	8009d00 <USBD_CtlError>
            err++;
 80098a8:	7afb      	ldrb	r3, [r7, #11]
 80098aa:	3301      	adds	r3, #1
 80098ac:	72fb      	strb	r3, [r7, #11]
          break;
 80098ae:	e021      	b.n	80098f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80098b6:	699b      	ldr	r3, [r3, #24]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d00b      	beq.n	80098d4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80098c2:	699b      	ldr	r3, [r3, #24]
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	7c12      	ldrb	r2, [r2, #16]
 80098c8:	f107 0108 	add.w	r1, r7, #8
 80098cc:	4610      	mov	r0, r2
 80098ce:	4798      	blx	r3
 80098d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098d2:	e00f      	b.n	80098f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098d4:	6839      	ldr	r1, [r7, #0]
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 fa12 	bl	8009d00 <USBD_CtlError>
            err++;
 80098dc:	7afb      	ldrb	r3, [r7, #11]
 80098de:	3301      	adds	r3, #1
 80098e0:	72fb      	strb	r3, [r7, #11]
          break;
 80098e2:	e007      	b.n	80098f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80098e4:	6839      	ldr	r1, [r7, #0]
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 fa0a 	bl	8009d00 <USBD_CtlError>
          err++;
 80098ec:	7afb      	ldrb	r3, [r7, #11]
 80098ee:	3301      	adds	r3, #1
 80098f0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80098f2:	e038      	b.n	8009966 <USBD_GetDescriptor+0x286>
 80098f4:	e037      	b.n	8009966 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	7c1b      	ldrb	r3, [r3, #16]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d109      	bne.n	8009912 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009906:	f107 0208 	add.w	r2, r7, #8
 800990a:	4610      	mov	r0, r2
 800990c:	4798      	blx	r3
 800990e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009910:	e029      	b.n	8009966 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009912:	6839      	ldr	r1, [r7, #0]
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 f9f3 	bl	8009d00 <USBD_CtlError>
        err++;
 800991a:	7afb      	ldrb	r3, [r7, #11]
 800991c:	3301      	adds	r3, #1
 800991e:	72fb      	strb	r3, [r7, #11]
      break;
 8009920:	e021      	b.n	8009966 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	7c1b      	ldrb	r3, [r3, #16]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d10d      	bne.n	8009946 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009932:	f107 0208 	add.w	r2, r7, #8
 8009936:	4610      	mov	r0, r2
 8009938:	4798      	blx	r3
 800993a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	3301      	adds	r3, #1
 8009940:	2207      	movs	r2, #7
 8009942:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009944:	e00f      	b.n	8009966 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009946:	6839      	ldr	r1, [r7, #0]
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f000 f9d9 	bl	8009d00 <USBD_CtlError>
        err++;
 800994e:	7afb      	ldrb	r3, [r7, #11]
 8009950:	3301      	adds	r3, #1
 8009952:	72fb      	strb	r3, [r7, #11]
      break;
 8009954:	e007      	b.n	8009966 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009956:	6839      	ldr	r1, [r7, #0]
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 f9d1 	bl	8009d00 <USBD_CtlError>
      err++;
 800995e:	7afb      	ldrb	r3, [r7, #11]
 8009960:	3301      	adds	r3, #1
 8009962:	72fb      	strb	r3, [r7, #11]
      break;
 8009964:	bf00      	nop
  }

  if (err != 0U)
 8009966:	7afb      	ldrb	r3, [r7, #11]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d11c      	bne.n	80099a6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800996c:	893b      	ldrh	r3, [r7, #8]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d011      	beq.n	8009996 <USBD_GetDescriptor+0x2b6>
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	88db      	ldrh	r3, [r3, #6]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d00d      	beq.n	8009996 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	88da      	ldrh	r2, [r3, #6]
 800997e:	893b      	ldrh	r3, [r7, #8]
 8009980:	4293      	cmp	r3, r2
 8009982:	bf28      	it	cs
 8009984:	4613      	movcs	r3, r2
 8009986:	b29b      	uxth	r3, r3
 8009988:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800998a:	893b      	ldrh	r3, [r7, #8]
 800998c:	461a      	mov	r2, r3
 800998e:	68f9      	ldr	r1, [r7, #12]
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 fa1f 	bl	8009dd4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	88db      	ldrh	r3, [r3, #6]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d104      	bne.n	80099a8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f000 fa76 	bl	8009e90 <USBD_CtlSendStatus>
 80099a4:	e000      	b.n	80099a8 <USBD_GetDescriptor+0x2c8>
    return;
 80099a6:	bf00      	nop
    }
  }
}
 80099a8:	3710      	adds	r7, #16
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop

080099b0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	889b      	ldrh	r3, [r3, #4]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d130      	bne.n	8009a24 <USBD_SetAddress+0x74>
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	88db      	ldrh	r3, [r3, #6]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d12c      	bne.n	8009a24 <USBD_SetAddress+0x74>
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	885b      	ldrh	r3, [r3, #2]
 80099ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80099d0:	d828      	bhi.n	8009a24 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	885b      	ldrh	r3, [r3, #2]
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099e4:	2b03      	cmp	r3, #3
 80099e6:	d104      	bne.n	80099f2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80099e8:	6839      	ldr	r1, [r7, #0]
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 f988 	bl	8009d00 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099f0:	e01d      	b.n	8009a2e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	7bfa      	ldrb	r2, [r7, #15]
 80099f6:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80099fa:	7bfb      	ldrb	r3, [r7, #15]
 80099fc:	4619      	mov	r1, r3
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f003 fb28 	bl	800d054 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 fa43 	bl	8009e90 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009a0a:	7bfb      	ldrb	r3, [r7, #15]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d004      	beq.n	8009a1a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2202      	movs	r2, #2
 8009a14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a18:	e009      	b.n	8009a2e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2201      	movs	r2, #1
 8009a1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a22:	e004      	b.n	8009a2e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009a24:	6839      	ldr	r1, [r7, #0]
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 f96a 	bl	8009d00 <USBD_CtlError>
  }
}
 8009a2c:	bf00      	nop
 8009a2e:	bf00      	nop
 8009a30:	3710      	adds	r7, #16
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
	...

08009a38 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b082      	sub	sp, #8
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	885b      	ldrh	r3, [r3, #2]
 8009a46:	b2da      	uxtb	r2, r3
 8009a48:	4b41      	ldr	r3, [pc, #260]	@ (8009b50 <USBD_SetConfig+0x118>)
 8009a4a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009a4c:	4b40      	ldr	r3, [pc, #256]	@ (8009b50 <USBD_SetConfig+0x118>)
 8009a4e:	781b      	ldrb	r3, [r3, #0]
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d904      	bls.n	8009a5e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009a54:	6839      	ldr	r1, [r7, #0]
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f000 f952 	bl	8009d00 <USBD_CtlError>
 8009a5c:	e075      	b.n	8009b4a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a64:	2b02      	cmp	r3, #2
 8009a66:	d002      	beq.n	8009a6e <USBD_SetConfig+0x36>
 8009a68:	2b03      	cmp	r3, #3
 8009a6a:	d023      	beq.n	8009ab4 <USBD_SetConfig+0x7c>
 8009a6c:	e062      	b.n	8009b34 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009a6e:	4b38      	ldr	r3, [pc, #224]	@ (8009b50 <USBD_SetConfig+0x118>)
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d01a      	beq.n	8009aac <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009a76:	4b36      	ldr	r3, [pc, #216]	@ (8009b50 <USBD_SetConfig+0x118>)
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2203      	movs	r2, #3
 8009a84:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009a88:	4b31      	ldr	r3, [pc, #196]	@ (8009b50 <USBD_SetConfig+0x118>)
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f7ff f9e7 	bl	8008e62 <USBD_SetClassConfig>
 8009a94:	4603      	mov	r3, r0
 8009a96:	2b02      	cmp	r3, #2
 8009a98:	d104      	bne.n	8009aa4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009a9a:	6839      	ldr	r1, [r7, #0]
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 f92f 	bl	8009d00 <USBD_CtlError>
            return;
 8009aa2:	e052      	b.n	8009b4a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 f9f3 	bl	8009e90 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009aaa:	e04e      	b.n	8009b4a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 f9ef 	bl	8009e90 <USBD_CtlSendStatus>
        break;
 8009ab2:	e04a      	b.n	8009b4a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009ab4:	4b26      	ldr	r3, [pc, #152]	@ (8009b50 <USBD_SetConfig+0x118>)
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d112      	bne.n	8009ae2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2202      	movs	r2, #2
 8009ac0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009ac4:	4b22      	ldr	r3, [pc, #136]	@ (8009b50 <USBD_SetConfig+0x118>)
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	461a      	mov	r2, r3
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009ace:	4b20      	ldr	r3, [pc, #128]	@ (8009b50 <USBD_SetConfig+0x118>)
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f7ff f9e3 	bl	8008ea0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 f9d8 	bl	8009e90 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009ae0:	e033      	b.n	8009b4a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009ae2:	4b1b      	ldr	r3, [pc, #108]	@ (8009b50 <USBD_SetConfig+0x118>)
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	685b      	ldr	r3, [r3, #4]
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d01d      	beq.n	8009b2c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	4619      	mov	r1, r3
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f7ff f9d1 	bl	8008ea0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009afe:	4b14      	ldr	r3, [pc, #80]	@ (8009b50 <USBD_SetConfig+0x118>)
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	461a      	mov	r2, r3
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009b08:	4b11      	ldr	r3, [pc, #68]	@ (8009b50 <USBD_SetConfig+0x118>)
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f7ff f9a7 	bl	8008e62 <USBD_SetClassConfig>
 8009b14:	4603      	mov	r3, r0
 8009b16:	2b02      	cmp	r3, #2
 8009b18:	d104      	bne.n	8009b24 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009b1a:	6839      	ldr	r1, [r7, #0]
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 f8ef 	bl	8009d00 <USBD_CtlError>
            return;
 8009b22:	e012      	b.n	8009b4a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 f9b3 	bl	8009e90 <USBD_CtlSendStatus>
        break;
 8009b2a:	e00e      	b.n	8009b4a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 f9af 	bl	8009e90 <USBD_CtlSendStatus>
        break;
 8009b32:	e00a      	b.n	8009b4a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009b34:	6839      	ldr	r1, [r7, #0]
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 f8e2 	bl	8009d00 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009b3c:	4b04      	ldr	r3, [pc, #16]	@ (8009b50 <USBD_SetConfig+0x118>)
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	4619      	mov	r1, r3
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f7ff f9ac 	bl	8008ea0 <USBD_ClrClassConfig>
        break;
 8009b48:	bf00      	nop
    }
  }
}
 8009b4a:	3708      	adds	r7, #8
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}
 8009b50:	200005f4 	.word	0x200005f4

08009b54 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	88db      	ldrh	r3, [r3, #6]
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	d004      	beq.n	8009b70 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009b66:	6839      	ldr	r1, [r7, #0]
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f000 f8c9 	bl	8009d00 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009b6e:	e022      	b.n	8009bb6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b76:	2b02      	cmp	r3, #2
 8009b78:	dc02      	bgt.n	8009b80 <USBD_GetConfig+0x2c>
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	dc03      	bgt.n	8009b86 <USBD_GetConfig+0x32>
 8009b7e:	e015      	b.n	8009bac <USBD_GetConfig+0x58>
 8009b80:	2b03      	cmp	r3, #3
 8009b82:	d00b      	beq.n	8009b9c <USBD_GetConfig+0x48>
 8009b84:	e012      	b.n	8009bac <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	3308      	adds	r3, #8
 8009b90:	2201      	movs	r2, #1
 8009b92:	4619      	mov	r1, r3
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f000 f91d 	bl	8009dd4 <USBD_CtlSendData>
        break;
 8009b9a:	e00c      	b.n	8009bb6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	3304      	adds	r3, #4
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f000 f915 	bl	8009dd4 <USBD_CtlSendData>
        break;
 8009baa:	e004      	b.n	8009bb6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009bac:	6839      	ldr	r1, [r7, #0]
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 f8a6 	bl	8009d00 <USBD_CtlError>
        break;
 8009bb4:	bf00      	nop
}
 8009bb6:	bf00      	nop
 8009bb8:	3708      	adds	r7, #8
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}

08009bbe <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bbe:	b580      	push	{r7, lr}
 8009bc0:	b082      	sub	sp, #8
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	6078      	str	r0, [r7, #4]
 8009bc6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bce:	3b01      	subs	r3, #1
 8009bd0:	2b02      	cmp	r3, #2
 8009bd2:	d81e      	bhi.n	8009c12 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	88db      	ldrh	r3, [r3, #6]
 8009bd8:	2b02      	cmp	r3, #2
 8009bda:	d004      	beq.n	8009be6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009bdc:	6839      	ldr	r1, [r7, #0]
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 f88e 	bl	8009d00 <USBD_CtlError>
        break;
 8009be4:	e01a      	b.n	8009c1c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2201      	movs	r2, #1
 8009bea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d005      	beq.n	8009c02 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	68db      	ldr	r3, [r3, #12]
 8009bfa:	f043 0202 	orr.w	r2, r3, #2
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	330c      	adds	r3, #12
 8009c06:	2202      	movs	r2, #2
 8009c08:	4619      	mov	r1, r3
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 f8e2 	bl	8009dd4 <USBD_CtlSendData>
      break;
 8009c10:	e004      	b.n	8009c1c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009c12:	6839      	ldr	r1, [r7, #0]
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 f873 	bl	8009d00 <USBD_CtlError>
      break;
 8009c1a:	bf00      	nop
  }
}
 8009c1c:	bf00      	nop
 8009c1e:	3708      	adds	r7, #8
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b082      	sub	sp, #8
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	885b      	ldrh	r3, [r3, #2]
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	d106      	bne.n	8009c44 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2201      	movs	r2, #1
 8009c3a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 f926 	bl	8009e90 <USBD_CtlSendStatus>
  }
}
 8009c44:	bf00      	nop
 8009c46:	3708      	adds	r7, #8
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}

08009c4c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c5c:	3b01      	subs	r3, #1
 8009c5e:	2b02      	cmp	r3, #2
 8009c60:	d80b      	bhi.n	8009c7a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	885b      	ldrh	r3, [r3, #2]
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d10c      	bne.n	8009c84 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 f90c 	bl	8009e90 <USBD_CtlSendStatus>
      }
      break;
 8009c78:	e004      	b.n	8009c84 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009c7a:	6839      	ldr	r1, [r7, #0]
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 f83f 	bl	8009d00 <USBD_CtlError>
      break;
 8009c82:	e000      	b.n	8009c86 <USBD_ClrFeature+0x3a>
      break;
 8009c84:	bf00      	nop
  }
}
 8009c86:	bf00      	nop
 8009c88:	3708      	adds	r7, #8
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}

08009c8e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009c8e:	b480      	push	{r7}
 8009c90:	b083      	sub	sp, #12
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	6078      	str	r0, [r7, #4]
 8009c96:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	781a      	ldrb	r2, [r3, #0]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	785a      	ldrb	r2, [r3, #1]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	3302      	adds	r3, #2
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	461a      	mov	r2, r3
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	3303      	adds	r3, #3
 8009cb4:	781b      	ldrb	r3, [r3, #0]
 8009cb6:	021b      	lsls	r3, r3, #8
 8009cb8:	b29b      	uxth	r3, r3
 8009cba:	4413      	add	r3, r2
 8009cbc:	b29a      	uxth	r2, r3
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	3304      	adds	r3, #4
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	461a      	mov	r2, r3
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	3305      	adds	r3, #5
 8009cce:	781b      	ldrb	r3, [r3, #0]
 8009cd0:	021b      	lsls	r3, r3, #8
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	4413      	add	r3, r2
 8009cd6:	b29a      	uxth	r2, r3
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	3306      	adds	r3, #6
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	3307      	adds	r3, #7
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	021b      	lsls	r3, r3, #8
 8009cec:	b29b      	uxth	r3, r3
 8009cee:	4413      	add	r3, r2
 8009cf0:	b29a      	uxth	r2, r3
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	80da      	strh	r2, [r3, #6]

}
 8009cf6:	bf00      	nop
 8009cf8:	370c      	adds	r7, #12
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bc80      	pop	{r7}
 8009cfe:	4770      	bx	lr

08009d00 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b082      	sub	sp, #8
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009d0a:	2180      	movs	r1, #128	@ 0x80
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f003 f937 	bl	800cf80 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009d12:	2100      	movs	r1, #0
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f003 f933 	bl	800cf80 <USBD_LL_StallEP>
}
 8009d1a:	bf00      	nop
 8009d1c:	3708      	adds	r7, #8
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}

08009d22 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b086      	sub	sp, #24
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	60f8      	str	r0, [r7, #12]
 8009d2a:	60b9      	str	r1, [r7, #8]
 8009d2c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d032      	beq.n	8009d9e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009d38:	68f8      	ldr	r0, [r7, #12]
 8009d3a:	f000 f834 	bl	8009da6 <USBD_GetLen>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	3301      	adds	r3, #1
 8009d42:	b29b      	uxth	r3, r3
 8009d44:	005b      	lsls	r3, r3, #1
 8009d46:	b29a      	uxth	r2, r3
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009d4c:	7dfb      	ldrb	r3, [r7, #23]
 8009d4e:	1c5a      	adds	r2, r3, #1
 8009d50:	75fa      	strb	r2, [r7, #23]
 8009d52:	461a      	mov	r2, r3
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	4413      	add	r3, r2
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	7812      	ldrb	r2, [r2, #0]
 8009d5c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009d5e:	7dfb      	ldrb	r3, [r7, #23]
 8009d60:	1c5a      	adds	r2, r3, #1
 8009d62:	75fa      	strb	r2, [r7, #23]
 8009d64:	461a      	mov	r2, r3
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	4413      	add	r3, r2
 8009d6a:	2203      	movs	r2, #3
 8009d6c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009d6e:	e012      	b.n	8009d96 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	1c5a      	adds	r2, r3, #1
 8009d74:	60fa      	str	r2, [r7, #12]
 8009d76:	7dfa      	ldrb	r2, [r7, #23]
 8009d78:	1c51      	adds	r1, r2, #1
 8009d7a:	75f9      	strb	r1, [r7, #23]
 8009d7c:	4611      	mov	r1, r2
 8009d7e:	68ba      	ldr	r2, [r7, #8]
 8009d80:	440a      	add	r2, r1
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009d86:	7dfb      	ldrb	r3, [r7, #23]
 8009d88:	1c5a      	adds	r2, r3, #1
 8009d8a:	75fa      	strb	r2, [r7, #23]
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	4413      	add	r3, r2
 8009d92:	2200      	movs	r2, #0
 8009d94:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d1e8      	bne.n	8009d70 <USBD_GetString+0x4e>
    }
  }
}
 8009d9e:	bf00      	nop
 8009da0:	3718      	adds	r7, #24
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}

08009da6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009da6:	b480      	push	{r7}
 8009da8:	b085      	sub	sp, #20
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009dae:	2300      	movs	r3, #0
 8009db0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009db2:	e005      	b.n	8009dc0 <USBD_GetLen+0x1a>
  {
    len++;
 8009db4:	7bfb      	ldrb	r3, [r7, #15]
 8009db6:	3301      	adds	r3, #1
 8009db8:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d1f5      	bne.n	8009db4 <USBD_GetLen+0xe>
  }

  return len;
 8009dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3714      	adds	r7, #20
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bc80      	pop	{r7}
 8009dd2:	4770      	bx	lr

08009dd4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b084      	sub	sp, #16
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	60f8      	str	r0, [r7, #12]
 8009ddc:	60b9      	str	r1, [r7, #8]
 8009dde:	4613      	mov	r3, r2
 8009de0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2202      	movs	r2, #2
 8009de6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009dea:	88fa      	ldrh	r2, [r7, #6]
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009df0:	88fa      	ldrh	r2, [r7, #6]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009df6:	88fb      	ldrh	r3, [r7, #6]
 8009df8:	68ba      	ldr	r2, [r7, #8]
 8009dfa:	2100      	movs	r1, #0
 8009dfc:	68f8      	ldr	r0, [r7, #12]
 8009dfe:	f003 f948 	bl	800d092 <USBD_LL_Transmit>

  return USBD_OK;
 8009e02:	2300      	movs	r3, #0
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3710      	adds	r7, #16
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b084      	sub	sp, #16
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	60f8      	str	r0, [r7, #12]
 8009e14:	60b9      	str	r1, [r7, #8]
 8009e16:	4613      	mov	r3, r2
 8009e18:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e1a:	88fb      	ldrh	r3, [r7, #6]
 8009e1c:	68ba      	ldr	r2, [r7, #8]
 8009e1e:	2100      	movs	r1, #0
 8009e20:	68f8      	ldr	r0, [r7, #12]
 8009e22:	f003 f936 	bl	800d092 <USBD_LL_Transmit>

  return USBD_OK;
 8009e26:	2300      	movs	r3, #0
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3710      	adds	r7, #16
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	60f8      	str	r0, [r7, #12]
 8009e38:	60b9      	str	r1, [r7, #8]
 8009e3a:	4613      	mov	r3, r2
 8009e3c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2203      	movs	r2, #3
 8009e42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009e46:	88fa      	ldrh	r2, [r7, #6]
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009e4e:	88fa      	ldrh	r2, [r7, #6]
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e56:	88fb      	ldrh	r3, [r7, #6]
 8009e58:	68ba      	ldr	r2, [r7, #8]
 8009e5a:	2100      	movs	r1, #0
 8009e5c:	68f8      	ldr	r0, [r7, #12]
 8009e5e:	f003 f93b 	bl	800d0d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e62:	2300      	movs	r3, #0
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3710      	adds	r7, #16
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b084      	sub	sp, #16
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	60f8      	str	r0, [r7, #12]
 8009e74:	60b9      	str	r1, [r7, #8]
 8009e76:	4613      	mov	r3, r2
 8009e78:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e7a:	88fb      	ldrh	r3, [r7, #6]
 8009e7c:	68ba      	ldr	r2, [r7, #8]
 8009e7e:	2100      	movs	r1, #0
 8009e80:	68f8      	ldr	r0, [r7, #12]
 8009e82:	f003 f929 	bl	800d0d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e86:	2300      	movs	r3, #0
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3710      	adds	r7, #16
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b082      	sub	sp, #8
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2204      	movs	r2, #4
 8009e9c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	2100      	movs	r1, #0
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f003 f8f3 	bl	800d092 <USBD_LL_Transmit>

  return USBD_OK;
 8009eac:	2300      	movs	r3, #0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3708      	adds	r7, #8
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}

08009eb6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b082      	sub	sp, #8
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2205      	movs	r2, #5
 8009ec2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	2200      	movs	r2, #0
 8009eca:	2100      	movs	r1, #0
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f003 f903 	bl	800d0d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ed2:	2300      	movs	r3, #0
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3708      	adds	r7, #8
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b085      	sub	sp, #20
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009eea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009eee:	2b84      	cmp	r3, #132	@ 0x84
 8009ef0:	d005      	beq.n	8009efe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009ef2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	4413      	add	r3, r2
 8009efa:	3303      	adds	r3, #3
 8009efc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009efe:	68fb      	ldr	r3, [r7, #12]
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3714      	adds	r7, #20
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bc80      	pop	{r7}
 8009f08:	4770      	bx	lr

08009f0a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009f0a:	b480      	push	{r7}
 8009f0c:	b083      	sub	sp, #12
 8009f0e:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f10:	f3ef 8305 	mrs	r3, IPSR
 8009f14:	607b      	str	r3, [r7, #4]
  return(result);
 8009f16:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	bf14      	ite	ne
 8009f1c:	2301      	movne	r3, #1
 8009f1e:	2300      	moveq	r3, #0
 8009f20:	b2db      	uxtb	r3, r3
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	370c      	adds	r7, #12
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bc80      	pop	{r7}
 8009f2a:	4770      	bx	lr

08009f2c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009f30:	f001 f952 	bl	800b1d8 <vTaskStartScheduler>
  
  return osOK;
 8009f34:	2300      	movs	r3, #0
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	bd80      	pop	{r7, pc}

08009f3a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009f3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f3c:	b089      	sub	sp, #36	@ 0x24
 8009f3e:	af04      	add	r7, sp, #16
 8009f40:	6078      	str	r0, [r7, #4]
 8009f42:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	695b      	ldr	r3, [r3, #20]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d020      	beq.n	8009f8e <osThreadCreate+0x54>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	699b      	ldr	r3, [r3, #24]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d01c      	beq.n	8009f8e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	685c      	ldr	r4, [r3, #4]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	691e      	ldr	r6, [r3, #16]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f66:	4618      	mov	r0, r3
 8009f68:	f7ff ffb8 	bl	8009edc <makeFreeRtosPriority>
 8009f6c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	695b      	ldr	r3, [r3, #20]
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f76:	9202      	str	r2, [sp, #8]
 8009f78:	9301      	str	r3, [sp, #4]
 8009f7a:	9100      	str	r1, [sp, #0]
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	4632      	mov	r2, r6
 8009f80:	4629      	mov	r1, r5
 8009f82:	4620      	mov	r0, r4
 8009f84:	f000 ff63 	bl	800ae4e <xTaskCreateStatic>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	60fb      	str	r3, [r7, #12]
 8009f8c:	e01c      	b.n	8009fc8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	685c      	ldr	r4, [r3, #4]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f9a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f7ff ff9a 	bl	8009edc <makeFreeRtosPriority>
 8009fa8:	4602      	mov	r2, r0
 8009faa:	f107 030c 	add.w	r3, r7, #12
 8009fae:	9301      	str	r3, [sp, #4]
 8009fb0:	9200      	str	r2, [sp, #0]
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	4632      	mov	r2, r6
 8009fb6:	4629      	mov	r1, r5
 8009fb8:	4620      	mov	r0, r4
 8009fba:	f000 ffa7 	bl	800af0c <xTaskCreate>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d001      	beq.n	8009fc8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	e000      	b.n	8009fca <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3714      	adds	r7, #20
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009fd2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009fd2:	b580      	push	{r7, lr}
 8009fd4:	b084      	sub	sp, #16
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d001      	beq.n	8009fe8 <osDelay+0x16>
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	e000      	b.n	8009fea <osDelay+0x18>
 8009fe8:	2301      	movs	r3, #1
 8009fea:	4618      	mov	r0, r3
 8009fec:	f001 f8be 	bl	800b16c <vTaskDelay>
  
  return osOK;
 8009ff0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3710      	adds	r7, #16
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}

08009ffa <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8009ffa:	b580      	push	{r7, lr}
 8009ffc:	b082      	sub	sp, #8
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d007      	beq.n	800a01a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	4619      	mov	r1, r3
 800a010:	2001      	movs	r0, #1
 800a012:	f000 fab5 	bl	800a580 <xQueueCreateMutexStatic>
 800a016:	4603      	mov	r3, r0
 800a018:	e003      	b.n	800a022 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800a01a:	2001      	movs	r0, #1
 800a01c:	f000 fa98 	bl	800a550 <xQueueCreateMutex>
 800a020:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800a022:	4618      	mov	r0, r3
 800a024:	3708      	adds	r7, #8
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
	...

0800a02c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b084      	sub	sp, #16
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a036:	2300      	movs	r3, #0
 800a038:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d101      	bne.n	800a044 <osMutexWait+0x18>
    return osErrorParameter;
 800a040:	2380      	movs	r3, #128	@ 0x80
 800a042:	e03a      	b.n	800a0ba <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800a044:	2300      	movs	r3, #0
 800a046:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a04e:	d103      	bne.n	800a058 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800a050:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a054:	60fb      	str	r3, [r7, #12]
 800a056:	e009      	b.n	800a06c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d006      	beq.n	800a06c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d101      	bne.n	800a06c <osMutexWait+0x40>
      ticks = 1;
 800a068:	2301      	movs	r3, #1
 800a06a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a06c:	f7ff ff4d 	bl	8009f0a <inHandlerMode>
 800a070:	4603      	mov	r3, r0
 800a072:	2b00      	cmp	r3, #0
 800a074:	d017      	beq.n	800a0a6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a076:	f107 0308 	add.w	r3, r7, #8
 800a07a:	461a      	mov	r2, r3
 800a07c:	2100      	movs	r1, #0
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 fd3c 	bl	800aafc <xQueueReceiveFromISR>
 800a084:	4603      	mov	r3, r0
 800a086:	2b01      	cmp	r3, #1
 800a088:	d001      	beq.n	800a08e <osMutexWait+0x62>
      return osErrorOS;
 800a08a:	23ff      	movs	r3, #255	@ 0xff
 800a08c:	e015      	b.n	800a0ba <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d011      	beq.n	800a0b8 <osMutexWait+0x8c>
 800a094:	4b0b      	ldr	r3, [pc, #44]	@ (800a0c4 <osMutexWait+0x98>)
 800a096:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a09a:	601a      	str	r2, [r3, #0]
 800a09c:	f3bf 8f4f 	dsb	sy
 800a0a0:	f3bf 8f6f 	isb	sy
 800a0a4:	e008      	b.n	800a0b8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800a0a6:	68f9      	ldr	r1, [r7, #12]
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f000 fc17 	bl	800a8dc <xQueueSemaphoreTake>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d001      	beq.n	800a0b8 <osMutexWait+0x8c>
    return osErrorOS;
 800a0b4:	23ff      	movs	r3, #255	@ 0xff
 800a0b6:	e000      	b.n	800a0ba <osMutexWait+0x8e>
  }
  
  return osOK;
 800a0b8:	2300      	movs	r3, #0
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3710      	adds	r7, #16
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	e000ed04 	.word	0xe000ed04

0800a0c8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b084      	sub	sp, #16
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800a0d8:	f7ff ff17 	bl	8009f0a <inHandlerMode>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d016      	beq.n	800a110 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a0e2:	f107 0308 	add.w	r3, r7, #8
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f000 fb67 	bl	800a7bc <xQueueGiveFromISR>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d001      	beq.n	800a0f8 <osMutexRelease+0x30>
      return osErrorOS;
 800a0f4:	23ff      	movs	r3, #255	@ 0xff
 800a0f6:	e017      	b.n	800a128 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d013      	beq.n	800a126 <osMutexRelease+0x5e>
 800a0fe:	4b0c      	ldr	r3, [pc, #48]	@ (800a130 <osMutexRelease+0x68>)
 800a100:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a104:	601a      	str	r2, [r3, #0]
 800a106:	f3bf 8f4f 	dsb	sy
 800a10a:	f3bf 8f6f 	isb	sy
 800a10e:	e00a      	b.n	800a126 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800a110:	2300      	movs	r3, #0
 800a112:	2200      	movs	r2, #0
 800a114:	2100      	movs	r1, #0
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 fa4e 	bl	800a5b8 <xQueueGenericSend>
 800a11c:	4603      	mov	r3, r0
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d001      	beq.n	800a126 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800a122:	23ff      	movs	r3, #255	@ 0xff
 800a124:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800a126:	68fb      	ldr	r3, [r7, #12]
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3710      	adds	r7, #16
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}
 800a130:	e000ed04 	.word	0xe000ed04

0800a134 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f103 0208 	add.w	r2, r3, #8
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a14c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f103 0208 	add.w	r2, r3, #8
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f103 0208 	add.w	r2, r3, #8
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2200      	movs	r2, #0
 800a166:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a168:	bf00      	nop
 800a16a:	370c      	adds	r7, #12
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bc80      	pop	{r7}
 800a170:	4770      	bx	lr

0800a172 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a172:	b480      	push	{r7}
 800a174:	b083      	sub	sp, #12
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2200      	movs	r2, #0
 800a17e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a180:	bf00      	nop
 800a182:	370c      	adds	r7, #12
 800a184:	46bd      	mov	sp, r7
 800a186:	bc80      	pop	{r7}
 800a188:	4770      	bx	lr

0800a18a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a18a:	b480      	push	{r7}
 800a18c:	b085      	sub	sp, #20
 800a18e:	af00      	add	r7, sp, #0
 800a190:	6078      	str	r0, [r7, #4]
 800a192:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	68fa      	ldr	r2, [r7, #12]
 800a19e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	689a      	ldr	r2, [r3, #8]
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	689b      	ldr	r3, [r3, #8]
 800a1ac:	683a      	ldr	r2, [r7, #0]
 800a1ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	683a      	ldr	r2, [r7, #0]
 800a1b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	687a      	ldr	r2, [r7, #4]
 800a1ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	1c5a      	adds	r2, r3, #1
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	601a      	str	r2, [r3, #0]
}
 800a1c6:	bf00      	nop
 800a1c8:	3714      	adds	r7, #20
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bc80      	pop	{r7}
 800a1ce:	4770      	bx	lr

0800a1d0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b085      	sub	sp, #20
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a1e6:	d103      	bne.n	800a1f0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	691b      	ldr	r3, [r3, #16]
 800a1ec:	60fb      	str	r3, [r7, #12]
 800a1ee:	e00c      	b.n	800a20a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	3308      	adds	r3, #8
 800a1f4:	60fb      	str	r3, [r7, #12]
 800a1f6:	e002      	b.n	800a1fe <vListInsert+0x2e>
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	60fb      	str	r3, [r7, #12]
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	68ba      	ldr	r2, [r7, #8]
 800a206:	429a      	cmp	r2, r3
 800a208:	d2f6      	bcs.n	800a1f8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	685a      	ldr	r2, [r3, #4]
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	683a      	ldr	r2, [r7, #0]
 800a218:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	68fa      	ldr	r2, [r7, #12]
 800a21e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	683a      	ldr	r2, [r7, #0]
 800a224:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	1c5a      	adds	r2, r3, #1
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	601a      	str	r2, [r3, #0]
}
 800a236:	bf00      	nop
 800a238:	3714      	adds	r7, #20
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bc80      	pop	{r7}
 800a23e:	4770      	bx	lr

0800a240 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a240:	b480      	push	{r7}
 800a242:	b085      	sub	sp, #20
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	691b      	ldr	r3, [r3, #16]
 800a24c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	6892      	ldr	r2, [r2, #8]
 800a256:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	689b      	ldr	r3, [r3, #8]
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	6852      	ldr	r2, [r2, #4]
 800a260:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	429a      	cmp	r2, r3
 800a26a:	d103      	bne.n	800a274 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	689a      	ldr	r2, [r3, #8]
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2200      	movs	r2, #0
 800a278:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	1e5a      	subs	r2, r3, #1
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3714      	adds	r7, #20
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bc80      	pop	{r7}
 800a290:	4770      	bx	lr
	...

0800a294 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b084      	sub	sp, #16
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d10b      	bne.n	800a2c0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a2a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2ac:	f383 8811 	msr	BASEPRI, r3
 800a2b0:	f3bf 8f6f 	isb	sy
 800a2b4:	f3bf 8f4f 	dsb	sy
 800a2b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a2ba:	bf00      	nop
 800a2bc:	bf00      	nop
 800a2be:	e7fd      	b.n	800a2bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a2c0:	f001 fed4 	bl	800c06c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681a      	ldr	r2, [r3, #0]
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2cc:	68f9      	ldr	r1, [r7, #12]
 800a2ce:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a2d0:	fb01 f303 	mul.w	r3, r1, r3
 800a2d4:	441a      	add	r2, r3
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681a      	ldr	r2, [r3, #0]
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681a      	ldr	r2, [r3, #0]
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2f0:	3b01      	subs	r3, #1
 800a2f2:	68f9      	ldr	r1, [r7, #12]
 800a2f4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a2f6:	fb01 f303 	mul.w	r3, r1, r3
 800a2fa:	441a      	add	r2, r3
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	22ff      	movs	r2, #255	@ 0xff
 800a304:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	22ff      	movs	r2, #255	@ 0xff
 800a30c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d114      	bne.n	800a340 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	691b      	ldr	r3, [r3, #16]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d01a      	beq.n	800a354 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	3310      	adds	r3, #16
 800a322:	4618      	mov	r0, r3
 800a324:	f001 f9a6 	bl	800b674 <xTaskRemoveFromEventList>
 800a328:	4603      	mov	r3, r0
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d012      	beq.n	800a354 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a32e:	4b0d      	ldr	r3, [pc, #52]	@ (800a364 <xQueueGenericReset+0xd0>)
 800a330:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a334:	601a      	str	r2, [r3, #0]
 800a336:	f3bf 8f4f 	dsb	sy
 800a33a:	f3bf 8f6f 	isb	sy
 800a33e:	e009      	b.n	800a354 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	3310      	adds	r3, #16
 800a344:	4618      	mov	r0, r3
 800a346:	f7ff fef5 	bl	800a134 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	3324      	adds	r3, #36	@ 0x24
 800a34e:	4618      	mov	r0, r3
 800a350:	f7ff fef0 	bl	800a134 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a354:	f001 feba 	bl	800c0cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a358:	2301      	movs	r3, #1
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3710      	adds	r7, #16
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	e000ed04 	.word	0xe000ed04

0800a368 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b08e      	sub	sp, #56	@ 0x38
 800a36c:	af02      	add	r7, sp, #8
 800a36e:	60f8      	str	r0, [r7, #12]
 800a370:	60b9      	str	r1, [r7, #8]
 800a372:	607a      	str	r2, [r7, #4]
 800a374:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d10b      	bne.n	800a394 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a37c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a380:	f383 8811 	msr	BASEPRI, r3
 800a384:	f3bf 8f6f 	isb	sy
 800a388:	f3bf 8f4f 	dsb	sy
 800a38c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a38e:	bf00      	nop
 800a390:	bf00      	nop
 800a392:	e7fd      	b.n	800a390 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d10b      	bne.n	800a3b2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a39a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a39e:	f383 8811 	msr	BASEPRI, r3
 800a3a2:	f3bf 8f6f 	isb	sy
 800a3a6:	f3bf 8f4f 	dsb	sy
 800a3aa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a3ac:	bf00      	nop
 800a3ae:	bf00      	nop
 800a3b0:	e7fd      	b.n	800a3ae <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d002      	beq.n	800a3be <xQueueGenericCreateStatic+0x56>
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d001      	beq.n	800a3c2 <xQueueGenericCreateStatic+0x5a>
 800a3be:	2301      	movs	r3, #1
 800a3c0:	e000      	b.n	800a3c4 <xQueueGenericCreateStatic+0x5c>
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d10b      	bne.n	800a3e0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a3c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3cc:	f383 8811 	msr	BASEPRI, r3
 800a3d0:	f3bf 8f6f 	isb	sy
 800a3d4:	f3bf 8f4f 	dsb	sy
 800a3d8:	623b      	str	r3, [r7, #32]
}
 800a3da:	bf00      	nop
 800a3dc:	bf00      	nop
 800a3de:	e7fd      	b.n	800a3dc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d102      	bne.n	800a3ec <xQueueGenericCreateStatic+0x84>
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d101      	bne.n	800a3f0 <xQueueGenericCreateStatic+0x88>
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	e000      	b.n	800a3f2 <xQueueGenericCreateStatic+0x8a>
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d10b      	bne.n	800a40e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a3f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3fa:	f383 8811 	msr	BASEPRI, r3
 800a3fe:	f3bf 8f6f 	isb	sy
 800a402:	f3bf 8f4f 	dsb	sy
 800a406:	61fb      	str	r3, [r7, #28]
}
 800a408:	bf00      	nop
 800a40a:	bf00      	nop
 800a40c:	e7fd      	b.n	800a40a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a40e:	2348      	movs	r3, #72	@ 0x48
 800a410:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	2b48      	cmp	r3, #72	@ 0x48
 800a416:	d00b      	beq.n	800a430 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a41c:	f383 8811 	msr	BASEPRI, r3
 800a420:	f3bf 8f6f 	isb	sy
 800a424:	f3bf 8f4f 	dsb	sy
 800a428:	61bb      	str	r3, [r7, #24]
}
 800a42a:	bf00      	nop
 800a42c:	bf00      	nop
 800a42e:	e7fd      	b.n	800a42c <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a436:	2b00      	cmp	r3, #0
 800a438:	d00d      	beq.n	800a456 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a43a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a43c:	2201      	movs	r2, #1
 800a43e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a442:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a448:	9300      	str	r3, [sp, #0]
 800a44a:	4613      	mov	r3, r2
 800a44c:	687a      	ldr	r2, [r7, #4]
 800a44e:	68b9      	ldr	r1, [r7, #8]
 800a450:	68f8      	ldr	r0, [r7, #12]
 800a452:	f000 f844 	bl	800a4de <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a458:	4618      	mov	r0, r3
 800a45a:	3730      	adds	r7, #48	@ 0x30
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a460:	b580      	push	{r7, lr}
 800a462:	b08a      	sub	sp, #40	@ 0x28
 800a464:	af02      	add	r7, sp, #8
 800a466:	60f8      	str	r0, [r7, #12]
 800a468:	60b9      	str	r1, [r7, #8]
 800a46a:	4613      	mov	r3, r2
 800a46c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d10b      	bne.n	800a48c <xQueueGenericCreate+0x2c>
	__asm volatile
 800a474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a478:	f383 8811 	msr	BASEPRI, r3
 800a47c:	f3bf 8f6f 	isb	sy
 800a480:	f3bf 8f4f 	dsb	sy
 800a484:	613b      	str	r3, [r7, #16]
}
 800a486:	bf00      	nop
 800a488:	bf00      	nop
 800a48a:	e7fd      	b.n	800a488 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d102      	bne.n	800a498 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a492:	2300      	movs	r3, #0
 800a494:	61fb      	str	r3, [r7, #28]
 800a496:	e004      	b.n	800a4a2 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	68ba      	ldr	r2, [r7, #8]
 800a49c:	fb02 f303 	mul.w	r3, r2, r3
 800a4a0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800a4a2:	69fb      	ldr	r3, [r7, #28]
 800a4a4:	3348      	adds	r3, #72	@ 0x48
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f001 fee2 	bl	800c270 <pvPortMalloc>
 800a4ac:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a4ae:	69bb      	ldr	r3, [r7, #24]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d00f      	beq.n	800a4d4 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800a4b4:	69bb      	ldr	r3, [r7, #24]
 800a4b6:	3348      	adds	r3, #72	@ 0x48
 800a4b8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a4c2:	79fa      	ldrb	r2, [r7, #7]
 800a4c4:	69bb      	ldr	r3, [r7, #24]
 800a4c6:	9300      	str	r3, [sp, #0]
 800a4c8:	4613      	mov	r3, r2
 800a4ca:	697a      	ldr	r2, [r7, #20]
 800a4cc:	68b9      	ldr	r1, [r7, #8]
 800a4ce:	68f8      	ldr	r0, [r7, #12]
 800a4d0:	f000 f805 	bl	800a4de <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a4d4:	69bb      	ldr	r3, [r7, #24]
	}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3720      	adds	r7, #32
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}

0800a4de <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a4de:	b580      	push	{r7, lr}
 800a4e0:	b084      	sub	sp, #16
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	60f8      	str	r0, [r7, #12]
 800a4e6:	60b9      	str	r1, [r7, #8]
 800a4e8:	607a      	str	r2, [r7, #4]
 800a4ea:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d103      	bne.n	800a4fa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a4f2:	69bb      	ldr	r3, [r7, #24]
 800a4f4:	69ba      	ldr	r2, [r7, #24]
 800a4f6:	601a      	str	r2, [r3, #0]
 800a4f8:	e002      	b.n	800a500 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a4fa:	69bb      	ldr	r3, [r7, #24]
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a500:	69bb      	ldr	r3, [r7, #24]
 800a502:	68fa      	ldr	r2, [r7, #12]
 800a504:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a506:	69bb      	ldr	r3, [r7, #24]
 800a508:	68ba      	ldr	r2, [r7, #8]
 800a50a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a50c:	2101      	movs	r1, #1
 800a50e:	69b8      	ldr	r0, [r7, #24]
 800a510:	f7ff fec0 	bl	800a294 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a514:	bf00      	nop
 800a516:	3710      	adds	r7, #16
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}

0800a51c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b082      	sub	sp, #8
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d00e      	beq.n	800a548 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2200      	movs	r2, #0
 800a52e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2200      	movs	r2, #0
 800a534:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2200      	movs	r2, #0
 800a53a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a53c:	2300      	movs	r3, #0
 800a53e:	2200      	movs	r2, #0
 800a540:	2100      	movs	r1, #0
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f000 f838 	bl	800a5b8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a548:	bf00      	nop
 800a54a:	3708      	adds	r7, #8
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a550:	b580      	push	{r7, lr}
 800a552:	b086      	sub	sp, #24
 800a554:	af00      	add	r7, sp, #0
 800a556:	4603      	mov	r3, r0
 800a558:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a55a:	2301      	movs	r3, #1
 800a55c:	617b      	str	r3, [r7, #20]
 800a55e:	2300      	movs	r3, #0
 800a560:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a562:	79fb      	ldrb	r3, [r7, #7]
 800a564:	461a      	mov	r2, r3
 800a566:	6939      	ldr	r1, [r7, #16]
 800a568:	6978      	ldr	r0, [r7, #20]
 800a56a:	f7ff ff79 	bl	800a460 <xQueueGenericCreate>
 800a56e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800a570:	68f8      	ldr	r0, [r7, #12]
 800a572:	f7ff ffd3 	bl	800a51c <prvInitialiseMutex>

		return pxNewQueue;
 800a576:	68fb      	ldr	r3, [r7, #12]
	}
 800a578:	4618      	mov	r0, r3
 800a57a:	3718      	adds	r7, #24
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a580:	b580      	push	{r7, lr}
 800a582:	b088      	sub	sp, #32
 800a584:	af02      	add	r7, sp, #8
 800a586:	4603      	mov	r3, r0
 800a588:	6039      	str	r1, [r7, #0]
 800a58a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a58c:	2301      	movs	r3, #1
 800a58e:	617b      	str	r3, [r7, #20]
 800a590:	2300      	movs	r3, #0
 800a592:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a594:	79fb      	ldrb	r3, [r7, #7]
 800a596:	9300      	str	r3, [sp, #0]
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	2200      	movs	r2, #0
 800a59c:	6939      	ldr	r1, [r7, #16]
 800a59e:	6978      	ldr	r0, [r7, #20]
 800a5a0:	f7ff fee2 	bl	800a368 <xQueueGenericCreateStatic>
 800a5a4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800a5a6:	68f8      	ldr	r0, [r7, #12]
 800a5a8:	f7ff ffb8 	bl	800a51c <prvInitialiseMutex>

		return pxNewQueue;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
	}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3718      	adds	r7, #24
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}
	...

0800a5b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b08e      	sub	sp, #56	@ 0x38
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	60b9      	str	r1, [r7, #8]
 800a5c2:	607a      	str	r2, [r7, #4]
 800a5c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a5ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d10b      	bne.n	800a5ec <xQueueGenericSend+0x34>
	__asm volatile
 800a5d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5d8:	f383 8811 	msr	BASEPRI, r3
 800a5dc:	f3bf 8f6f 	isb	sy
 800a5e0:	f3bf 8f4f 	dsb	sy
 800a5e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a5e6:	bf00      	nop
 800a5e8:	bf00      	nop
 800a5ea:	e7fd      	b.n	800a5e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d103      	bne.n	800a5fa <xQueueGenericSend+0x42>
 800a5f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d101      	bne.n	800a5fe <xQueueGenericSend+0x46>
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	e000      	b.n	800a600 <xQueueGenericSend+0x48>
 800a5fe:	2300      	movs	r3, #0
 800a600:	2b00      	cmp	r3, #0
 800a602:	d10b      	bne.n	800a61c <xQueueGenericSend+0x64>
	__asm volatile
 800a604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a608:	f383 8811 	msr	BASEPRI, r3
 800a60c:	f3bf 8f6f 	isb	sy
 800a610:	f3bf 8f4f 	dsb	sy
 800a614:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a616:	bf00      	nop
 800a618:	bf00      	nop
 800a61a:	e7fd      	b.n	800a618 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	2b02      	cmp	r3, #2
 800a620:	d103      	bne.n	800a62a <xQueueGenericSend+0x72>
 800a622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a626:	2b01      	cmp	r3, #1
 800a628:	d101      	bne.n	800a62e <xQueueGenericSend+0x76>
 800a62a:	2301      	movs	r3, #1
 800a62c:	e000      	b.n	800a630 <xQueueGenericSend+0x78>
 800a62e:	2300      	movs	r3, #0
 800a630:	2b00      	cmp	r3, #0
 800a632:	d10b      	bne.n	800a64c <xQueueGenericSend+0x94>
	__asm volatile
 800a634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a638:	f383 8811 	msr	BASEPRI, r3
 800a63c:	f3bf 8f6f 	isb	sy
 800a640:	f3bf 8f4f 	dsb	sy
 800a644:	623b      	str	r3, [r7, #32]
}
 800a646:	bf00      	nop
 800a648:	bf00      	nop
 800a64a:	e7fd      	b.n	800a648 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a64c:	f001 f9d6 	bl	800b9fc <xTaskGetSchedulerState>
 800a650:	4603      	mov	r3, r0
 800a652:	2b00      	cmp	r3, #0
 800a654:	d102      	bne.n	800a65c <xQueueGenericSend+0xa4>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d101      	bne.n	800a660 <xQueueGenericSend+0xa8>
 800a65c:	2301      	movs	r3, #1
 800a65e:	e000      	b.n	800a662 <xQueueGenericSend+0xaa>
 800a660:	2300      	movs	r3, #0
 800a662:	2b00      	cmp	r3, #0
 800a664:	d10b      	bne.n	800a67e <xQueueGenericSend+0xc6>
	__asm volatile
 800a666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a66a:	f383 8811 	msr	BASEPRI, r3
 800a66e:	f3bf 8f6f 	isb	sy
 800a672:	f3bf 8f4f 	dsb	sy
 800a676:	61fb      	str	r3, [r7, #28]
}
 800a678:	bf00      	nop
 800a67a:	bf00      	nop
 800a67c:	e7fd      	b.n	800a67a <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a67e:	f001 fcf5 	bl	800c06c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a684:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d302      	bcc.n	800a694 <xQueueGenericSend+0xdc>
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	2b02      	cmp	r3, #2
 800a692:	d129      	bne.n	800a6e8 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a694:	683a      	ldr	r2, [r7, #0]
 800a696:	68b9      	ldr	r1, [r7, #8]
 800a698:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a69a:	f000 fac8 	bl	800ac2e <prvCopyDataToQueue>
 800a69e:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a6a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d010      	beq.n	800a6ca <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a6a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6aa:	3324      	adds	r3, #36	@ 0x24
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f000 ffe1 	bl	800b674 <xTaskRemoveFromEventList>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d013      	beq.n	800a6e0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a6b8:	4b3f      	ldr	r3, [pc, #252]	@ (800a7b8 <xQueueGenericSend+0x200>)
 800a6ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6be:	601a      	str	r2, [r3, #0]
 800a6c0:	f3bf 8f4f 	dsb	sy
 800a6c4:	f3bf 8f6f 	isb	sy
 800a6c8:	e00a      	b.n	800a6e0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a6ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d007      	beq.n	800a6e0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a6d0:	4b39      	ldr	r3, [pc, #228]	@ (800a7b8 <xQueueGenericSend+0x200>)
 800a6d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6d6:	601a      	str	r2, [r3, #0]
 800a6d8:	f3bf 8f4f 	dsb	sy
 800a6dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a6e0:	f001 fcf4 	bl	800c0cc <vPortExitCritical>
				return pdPASS;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	e063      	b.n	800a7b0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d103      	bne.n	800a6f6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a6ee:	f001 fced 	bl	800c0cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	e05c      	b.n	800a7b0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a6f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d106      	bne.n	800a70a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a6fc:	f107 0314 	add.w	r3, r7, #20
 800a700:	4618      	mov	r0, r3
 800a702:	f001 f81b 	bl	800b73c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a706:	2301      	movs	r3, #1
 800a708:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a70a:	f001 fcdf 	bl	800c0cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a70e:	f000 fdc5 	bl	800b29c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a712:	f001 fcab 	bl	800c06c <vPortEnterCritical>
 800a716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a718:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a71c:	b25b      	sxtb	r3, r3
 800a71e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a722:	d103      	bne.n	800a72c <xQueueGenericSend+0x174>
 800a724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a726:	2200      	movs	r2, #0
 800a728:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a72c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a72e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a732:	b25b      	sxtb	r3, r3
 800a734:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a738:	d103      	bne.n	800a742 <xQueueGenericSend+0x18a>
 800a73a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a73c:	2200      	movs	r2, #0
 800a73e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a742:	f001 fcc3 	bl	800c0cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a746:	1d3a      	adds	r2, r7, #4
 800a748:	f107 0314 	add.w	r3, r7, #20
 800a74c:	4611      	mov	r1, r2
 800a74e:	4618      	mov	r0, r3
 800a750:	f001 f80a 	bl	800b768 <xTaskCheckForTimeOut>
 800a754:	4603      	mov	r3, r0
 800a756:	2b00      	cmp	r3, #0
 800a758:	d124      	bne.n	800a7a4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a75a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a75c:	f000 fb5f 	bl	800ae1e <prvIsQueueFull>
 800a760:	4603      	mov	r3, r0
 800a762:	2b00      	cmp	r3, #0
 800a764:	d018      	beq.n	800a798 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a768:	3310      	adds	r3, #16
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	4611      	mov	r1, r2
 800a76e:	4618      	mov	r0, r3
 800a770:	f000 ff5a 	bl	800b628 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a774:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a776:	f000 faea 	bl	800ad4e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a77a:	f000 fd9d 	bl	800b2b8 <xTaskResumeAll>
 800a77e:	4603      	mov	r3, r0
 800a780:	2b00      	cmp	r3, #0
 800a782:	f47f af7c 	bne.w	800a67e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a786:	4b0c      	ldr	r3, [pc, #48]	@ (800a7b8 <xQueueGenericSend+0x200>)
 800a788:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a78c:	601a      	str	r2, [r3, #0]
 800a78e:	f3bf 8f4f 	dsb	sy
 800a792:	f3bf 8f6f 	isb	sy
 800a796:	e772      	b.n	800a67e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a798:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a79a:	f000 fad8 	bl	800ad4e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a79e:	f000 fd8b 	bl	800b2b8 <xTaskResumeAll>
 800a7a2:	e76c      	b.n	800a67e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a7a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a7a6:	f000 fad2 	bl	800ad4e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a7aa:	f000 fd85 	bl	800b2b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a7ae:	2300      	movs	r3, #0
		}
	}
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3738      	adds	r7, #56	@ 0x38
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}
 800a7b8:	e000ed04 	.word	0xe000ed04

0800a7bc <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b08e      	sub	sp, #56	@ 0x38
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a7ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d10b      	bne.n	800a7e8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800a7d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7d4:	f383 8811 	msr	BASEPRI, r3
 800a7d8:	f3bf 8f6f 	isb	sy
 800a7dc:	f3bf 8f4f 	dsb	sy
 800a7e0:	623b      	str	r3, [r7, #32]
}
 800a7e2:	bf00      	nop
 800a7e4:	bf00      	nop
 800a7e6:	e7fd      	b.n	800a7e4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a7e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d00b      	beq.n	800a808 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800a7f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7f4:	f383 8811 	msr	BASEPRI, r3
 800a7f8:	f3bf 8f6f 	isb	sy
 800a7fc:	f3bf 8f4f 	dsb	sy
 800a800:	61fb      	str	r3, [r7, #28]
}
 800a802:	bf00      	nop
 800a804:	bf00      	nop
 800a806:	e7fd      	b.n	800a804 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800a808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d103      	bne.n	800a818 <xQueueGiveFromISR+0x5c>
 800a810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d101      	bne.n	800a81c <xQueueGiveFromISR+0x60>
 800a818:	2301      	movs	r3, #1
 800a81a:	e000      	b.n	800a81e <xQueueGiveFromISR+0x62>
 800a81c:	2300      	movs	r3, #0
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d10b      	bne.n	800a83a <xQueueGiveFromISR+0x7e>
	__asm volatile
 800a822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a826:	f383 8811 	msr	BASEPRI, r3
 800a82a:	f3bf 8f6f 	isb	sy
 800a82e:	f3bf 8f4f 	dsb	sy
 800a832:	61bb      	str	r3, [r7, #24]
}
 800a834:	bf00      	nop
 800a836:	bf00      	nop
 800a838:	e7fd      	b.n	800a836 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a83a:	f001 fcd9 	bl	800c1f0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a83e:	f3ef 8211 	mrs	r2, BASEPRI
 800a842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a846:	f383 8811 	msr	BASEPRI, r3
 800a84a:	f3bf 8f6f 	isb	sy
 800a84e:	f3bf 8f4f 	dsb	sy
 800a852:	617a      	str	r2, [r7, #20]
 800a854:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a856:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a858:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a85a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a85c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a85e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a864:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a866:	429a      	cmp	r2, r3
 800a868:	d22b      	bcs.n	800a8c2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a86a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a86c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a870:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a876:	1c5a      	adds	r2, r3, #1
 800a878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a87a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a87c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a880:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a884:	d112      	bne.n	800a8ac <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d016      	beq.n	800a8bc <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a88e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a890:	3324      	adds	r3, #36	@ 0x24
 800a892:	4618      	mov	r0, r3
 800a894:	f000 feee 	bl	800b674 <xTaskRemoveFromEventList>
 800a898:	4603      	mov	r3, r0
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d00e      	beq.n	800a8bc <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d00b      	beq.n	800a8bc <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	601a      	str	r2, [r3, #0]
 800a8aa:	e007      	b.n	800a8bc <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a8ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	b2db      	uxtb	r3, r3
 800a8b4:	b25a      	sxtb	r2, r3
 800a8b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a8bc:	2301      	movs	r3, #1
 800a8be:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8c0:	e001      	b.n	800a8c6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8c8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a8d0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a8d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3738      	adds	r7, #56	@ 0x38
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b08e      	sub	sp, #56	@ 0x38
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a8f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d10b      	bne.n	800a910 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800a8f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8fc:	f383 8811 	msr	BASEPRI, r3
 800a900:	f3bf 8f6f 	isb	sy
 800a904:	f3bf 8f4f 	dsb	sy
 800a908:	623b      	str	r3, [r7, #32]
}
 800a90a:	bf00      	nop
 800a90c:	bf00      	nop
 800a90e:	e7fd      	b.n	800a90c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a914:	2b00      	cmp	r3, #0
 800a916:	d00b      	beq.n	800a930 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800a918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a91c:	f383 8811 	msr	BASEPRI, r3
 800a920:	f3bf 8f6f 	isb	sy
 800a924:	f3bf 8f4f 	dsb	sy
 800a928:	61fb      	str	r3, [r7, #28]
}
 800a92a:	bf00      	nop
 800a92c:	bf00      	nop
 800a92e:	e7fd      	b.n	800a92c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a930:	f001 f864 	bl	800b9fc <xTaskGetSchedulerState>
 800a934:	4603      	mov	r3, r0
 800a936:	2b00      	cmp	r3, #0
 800a938:	d102      	bne.n	800a940 <xQueueSemaphoreTake+0x64>
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d101      	bne.n	800a944 <xQueueSemaphoreTake+0x68>
 800a940:	2301      	movs	r3, #1
 800a942:	e000      	b.n	800a946 <xQueueSemaphoreTake+0x6a>
 800a944:	2300      	movs	r3, #0
 800a946:	2b00      	cmp	r3, #0
 800a948:	d10b      	bne.n	800a962 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800a94a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a94e:	f383 8811 	msr	BASEPRI, r3
 800a952:	f3bf 8f6f 	isb	sy
 800a956:	f3bf 8f4f 	dsb	sy
 800a95a:	61bb      	str	r3, [r7, #24]
}
 800a95c:	bf00      	nop
 800a95e:	bf00      	nop
 800a960:	e7fd      	b.n	800a95e <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a962:	f001 fb83 	bl	800c06c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a96a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a96c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d024      	beq.n	800a9bc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a974:	1e5a      	subs	r2, r3, #1
 800a976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a978:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a97a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d104      	bne.n	800a98c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800a982:	f001 fa09 	bl	800bd98 <pvTaskIncrementMutexHeldCount>
 800a986:	4602      	mov	r2, r0
 800a988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a98a:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a98c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a98e:	691b      	ldr	r3, [r3, #16]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d00f      	beq.n	800a9b4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a996:	3310      	adds	r3, #16
 800a998:	4618      	mov	r0, r3
 800a99a:	f000 fe6b 	bl	800b674 <xTaskRemoveFromEventList>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d007      	beq.n	800a9b4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a9a4:	4b54      	ldr	r3, [pc, #336]	@ (800aaf8 <xQueueSemaphoreTake+0x21c>)
 800a9a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a9aa:	601a      	str	r2, [r3, #0]
 800a9ac:	f3bf 8f4f 	dsb	sy
 800a9b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a9b4:	f001 fb8a 	bl	800c0cc <vPortExitCritical>
				return pdPASS;
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	e098      	b.n	800aaee <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d112      	bne.n	800a9e8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a9c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d00b      	beq.n	800a9e0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800a9c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9cc:	f383 8811 	msr	BASEPRI, r3
 800a9d0:	f3bf 8f6f 	isb	sy
 800a9d4:	f3bf 8f4f 	dsb	sy
 800a9d8:	617b      	str	r3, [r7, #20]
}
 800a9da:	bf00      	nop
 800a9dc:	bf00      	nop
 800a9de:	e7fd      	b.n	800a9dc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a9e0:	f001 fb74 	bl	800c0cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	e082      	b.n	800aaee <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a9e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d106      	bne.n	800a9fc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a9ee:	f107 030c 	add.w	r3, r7, #12
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f000 fea2 	bl	800b73c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a9fc:	f001 fb66 	bl	800c0cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa00:	f000 fc4c 	bl	800b29c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa04:	f001 fb32 	bl	800c06c <vPortEnterCritical>
 800aa08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa0a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aa0e:	b25b      	sxtb	r3, r3
 800aa10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa14:	d103      	bne.n	800aa1e <xQueueSemaphoreTake+0x142>
 800aa16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa18:	2200      	movs	r2, #0
 800aa1a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa20:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aa24:	b25b      	sxtb	r3, r3
 800aa26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa2a:	d103      	bne.n	800aa34 <xQueueSemaphoreTake+0x158>
 800aa2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa2e:	2200      	movs	r2, #0
 800aa30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aa34:	f001 fb4a 	bl	800c0cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa38:	463a      	mov	r2, r7
 800aa3a:	f107 030c 	add.w	r3, r7, #12
 800aa3e:	4611      	mov	r1, r2
 800aa40:	4618      	mov	r0, r3
 800aa42:	f000 fe91 	bl	800b768 <xTaskCheckForTimeOut>
 800aa46:	4603      	mov	r3, r0
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d132      	bne.n	800aab2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa4c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aa4e:	f000 f9d0 	bl	800adf2 <prvIsQueueEmpty>
 800aa52:	4603      	mov	r3, r0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d026      	beq.n	800aaa6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d109      	bne.n	800aa74 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800aa60:	f001 fb04 	bl	800c06c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800aa64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa66:	685b      	ldr	r3, [r3, #4]
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f000 ffe5 	bl	800ba38 <xTaskPriorityInherit>
 800aa6e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800aa70:	f001 fb2c 	bl	800c0cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aa74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa76:	3324      	adds	r3, #36	@ 0x24
 800aa78:	683a      	ldr	r2, [r7, #0]
 800aa7a:	4611      	mov	r1, r2
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f000 fdd3 	bl	800b628 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aa82:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aa84:	f000 f963 	bl	800ad4e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aa88:	f000 fc16 	bl	800b2b8 <xTaskResumeAll>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	f47f af67 	bne.w	800a962 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800aa94:	4b18      	ldr	r3, [pc, #96]	@ (800aaf8 <xQueueSemaphoreTake+0x21c>)
 800aa96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa9a:	601a      	str	r2, [r3, #0]
 800aa9c:	f3bf 8f4f 	dsb	sy
 800aaa0:	f3bf 8f6f 	isb	sy
 800aaa4:	e75d      	b.n	800a962 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800aaa6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aaa8:	f000 f951 	bl	800ad4e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aaac:	f000 fc04 	bl	800b2b8 <xTaskResumeAll>
 800aab0:	e757      	b.n	800a962 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800aab2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aab4:	f000 f94b 	bl	800ad4e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aab8:	f000 fbfe 	bl	800b2b8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aabc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aabe:	f000 f998 	bl	800adf2 <prvIsQueueEmpty>
 800aac2:	4603      	mov	r3, r0
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	f43f af4c 	beq.w	800a962 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800aaca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d00d      	beq.n	800aaec <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800aad0:	f001 facc 	bl	800c06c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800aad4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aad6:	f000 f893 	bl	800ac00 <prvGetDisinheritPriorityAfterTimeout>
 800aada:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800aadc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aade:	685b      	ldr	r3, [r3, #4]
 800aae0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aae2:	4618      	mov	r0, r3
 800aae4:	f001 f8b6 	bl	800bc54 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800aae8:	f001 faf0 	bl	800c0cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aaec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3738      	adds	r7, #56	@ 0x38
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	bf00      	nop
 800aaf8:	e000ed04 	.word	0xe000ed04

0800aafc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b08e      	sub	sp, #56	@ 0x38
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	60f8      	str	r0, [r7, #12]
 800ab04:	60b9      	str	r1, [r7, #8]
 800ab06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ab0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d10b      	bne.n	800ab2a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800ab12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab16:	f383 8811 	msr	BASEPRI, r3
 800ab1a:	f3bf 8f6f 	isb	sy
 800ab1e:	f3bf 8f4f 	dsb	sy
 800ab22:	623b      	str	r3, [r7, #32]
}
 800ab24:	bf00      	nop
 800ab26:	bf00      	nop
 800ab28:	e7fd      	b.n	800ab26 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d103      	bne.n	800ab38 <xQueueReceiveFromISR+0x3c>
 800ab30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d101      	bne.n	800ab3c <xQueueReceiveFromISR+0x40>
 800ab38:	2301      	movs	r3, #1
 800ab3a:	e000      	b.n	800ab3e <xQueueReceiveFromISR+0x42>
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d10b      	bne.n	800ab5a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800ab42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab46:	f383 8811 	msr	BASEPRI, r3
 800ab4a:	f3bf 8f6f 	isb	sy
 800ab4e:	f3bf 8f4f 	dsb	sy
 800ab52:	61fb      	str	r3, [r7, #28]
}
 800ab54:	bf00      	nop
 800ab56:	bf00      	nop
 800ab58:	e7fd      	b.n	800ab56 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ab5a:	f001 fb49 	bl	800c1f0 <vPortValidateInterruptPriority>
	__asm volatile
 800ab5e:	f3ef 8211 	mrs	r2, BASEPRI
 800ab62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab66:	f383 8811 	msr	BASEPRI, r3
 800ab6a:	f3bf 8f6f 	isb	sy
 800ab6e:	f3bf 8f4f 	dsb	sy
 800ab72:	61ba      	str	r2, [r7, #24]
 800ab74:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ab76:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ab78:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab7e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d02f      	beq.n	800abe6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ab86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ab8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ab90:	68b9      	ldr	r1, [r7, #8]
 800ab92:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab94:	f000 f8b5 	bl	800ad02 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ab98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab9a:	1e5a      	subs	r2, r3, #1
 800ab9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab9e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800aba0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800aba4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aba8:	d112      	bne.n	800abd0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abac:	691b      	ldr	r3, [r3, #16]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d016      	beq.n	800abe0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800abb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb4:	3310      	adds	r3, #16
 800abb6:	4618      	mov	r0, r3
 800abb8:	f000 fd5c 	bl	800b674 <xTaskRemoveFromEventList>
 800abbc:	4603      	mov	r3, r0
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d00e      	beq.n	800abe0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d00b      	beq.n	800abe0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2201      	movs	r2, #1
 800abcc:	601a      	str	r2, [r3, #0]
 800abce:	e007      	b.n	800abe0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800abd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800abd4:	3301      	adds	r3, #1
 800abd6:	b2db      	uxtb	r3, r3
 800abd8:	b25a      	sxtb	r2, r3
 800abda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800abe0:	2301      	movs	r3, #1
 800abe2:	637b      	str	r3, [r7, #52]	@ 0x34
 800abe4:	e001      	b.n	800abea <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800abe6:	2300      	movs	r3, #0
 800abe8:	637b      	str	r3, [r7, #52]	@ 0x34
 800abea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abec:	613b      	str	r3, [r7, #16]
	__asm volatile
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	f383 8811 	msr	BASEPRI, r3
}
 800abf4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800abf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3738      	adds	r7, #56	@ 0x38
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ac00:	b480      	push	{r7}
 800ac02:	b085      	sub	sp, #20
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d006      	beq.n	800ac1e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f1c3 0307 	rsb	r3, r3, #7
 800ac1a:	60fb      	str	r3, [r7, #12]
 800ac1c:	e001      	b.n	800ac22 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ac22:	68fb      	ldr	r3, [r7, #12]
	}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3714      	adds	r7, #20
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bc80      	pop	{r7}
 800ac2c:	4770      	bx	lr

0800ac2e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b086      	sub	sp, #24
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	60f8      	str	r0, [r7, #12]
 800ac36:	60b9      	str	r1, [r7, #8]
 800ac38:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac42:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d10d      	bne.n	800ac68 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d14d      	bne.n	800acf0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f000 ff73 	bl	800bb44 <xTaskPriorityDisinherit>
 800ac5e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	2200      	movs	r2, #0
 800ac64:	605a      	str	r2, [r3, #4]
 800ac66:	e043      	b.n	800acf0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d119      	bne.n	800aca2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	6898      	ldr	r0, [r3, #8]
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac76:	461a      	mov	r2, r3
 800ac78:	68b9      	ldr	r1, [r7, #8]
 800ac7a:	f002 fadb 	bl	800d234 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	689a      	ldr	r2, [r3, #8]
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac86:	441a      	add	r2, r3
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	689a      	ldr	r2, [r3, #8]
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d32b      	bcc.n	800acf0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681a      	ldr	r2, [r3, #0]
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	609a      	str	r2, [r3, #8]
 800aca0:	e026      	b.n	800acf0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	68d8      	ldr	r0, [r3, #12]
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acaa:	461a      	mov	r2, r3
 800acac:	68b9      	ldr	r1, [r7, #8]
 800acae:	f002 fac1 	bl	800d234 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	68da      	ldr	r2, [r3, #12]
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acba:	425b      	negs	r3, r3
 800acbc:	441a      	add	r2, r3
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	68da      	ldr	r2, [r3, #12]
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	429a      	cmp	r2, r3
 800accc:	d207      	bcs.n	800acde <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	685a      	ldr	r2, [r3, #4]
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acd6:	425b      	negs	r3, r3
 800acd8:	441a      	add	r2, r3
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2b02      	cmp	r3, #2
 800ace2:	d105      	bne.n	800acf0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d002      	beq.n	800acf0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	3b01      	subs	r3, #1
 800acee:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	1c5a      	adds	r2, r3, #1
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800acf8:	697b      	ldr	r3, [r7, #20]
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3718      	adds	r7, #24
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}

0800ad02 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ad02:	b580      	push	{r7, lr}
 800ad04:	b082      	sub	sp, #8
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	6078      	str	r0, [r7, #4]
 800ad0a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d018      	beq.n	800ad46 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	68da      	ldr	r2, [r3, #12]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad1c:	441a      	add	r2, r3
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	68da      	ldr	r2, [r3, #12]
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	d303      	bcc.n	800ad36 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681a      	ldr	r2, [r3, #0]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	68d9      	ldr	r1, [r3, #12]
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad3e:	461a      	mov	r2, r3
 800ad40:	6838      	ldr	r0, [r7, #0]
 800ad42:	f002 fa77 	bl	800d234 <memcpy>
	}
}
 800ad46:	bf00      	nop
 800ad48:	3708      	adds	r7, #8
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}

0800ad4e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ad4e:	b580      	push	{r7, lr}
 800ad50:	b084      	sub	sp, #16
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ad56:	f001 f989 	bl	800c06c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ad60:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad62:	e011      	b.n	800ad88 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d012      	beq.n	800ad92 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	3324      	adds	r3, #36	@ 0x24
 800ad70:	4618      	mov	r0, r3
 800ad72:	f000 fc7f 	bl	800b674 <xTaskRemoveFromEventList>
 800ad76:	4603      	mov	r3, r0
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d001      	beq.n	800ad80 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ad7c:	f000 fd58 	bl	800b830 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ad80:	7bfb      	ldrb	r3, [r7, #15]
 800ad82:	3b01      	subs	r3, #1
 800ad84:	b2db      	uxtb	r3, r3
 800ad86:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	dce9      	bgt.n	800ad64 <prvUnlockQueue+0x16>
 800ad90:	e000      	b.n	800ad94 <prvUnlockQueue+0x46>
					break;
 800ad92:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	22ff      	movs	r2, #255	@ 0xff
 800ad98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ad9c:	f001 f996 	bl	800c0cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ada0:	f001 f964 	bl	800c06c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800adaa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800adac:	e011      	b.n	800add2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	691b      	ldr	r3, [r3, #16]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d012      	beq.n	800addc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	3310      	adds	r3, #16
 800adba:	4618      	mov	r0, r3
 800adbc:	f000 fc5a 	bl	800b674 <xTaskRemoveFromEventList>
 800adc0:	4603      	mov	r3, r0
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d001      	beq.n	800adca <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800adc6:	f000 fd33 	bl	800b830 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800adca:	7bbb      	ldrb	r3, [r7, #14]
 800adcc:	3b01      	subs	r3, #1
 800adce:	b2db      	uxtb	r3, r3
 800add0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800add2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800add6:	2b00      	cmp	r3, #0
 800add8:	dce9      	bgt.n	800adae <prvUnlockQueue+0x60>
 800adda:	e000      	b.n	800adde <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800addc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	22ff      	movs	r2, #255	@ 0xff
 800ade2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ade6:	f001 f971 	bl	800c0cc <vPortExitCritical>
}
 800adea:	bf00      	nop
 800adec:	3710      	adds	r7, #16
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}

0800adf2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800adf2:	b580      	push	{r7, lr}
 800adf4:	b084      	sub	sp, #16
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800adfa:	f001 f937 	bl	800c06c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d102      	bne.n	800ae0c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ae06:	2301      	movs	r3, #1
 800ae08:	60fb      	str	r3, [r7, #12]
 800ae0a:	e001      	b.n	800ae10 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ae10:	f001 f95c 	bl	800c0cc <vPortExitCritical>

	return xReturn;
 800ae14:	68fb      	ldr	r3, [r7, #12]
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3710      	adds	r7, #16
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}

0800ae1e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ae1e:	b580      	push	{r7, lr}
 800ae20:	b084      	sub	sp, #16
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ae26:	f001 f921 	bl	800c06c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d102      	bne.n	800ae3c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ae36:	2301      	movs	r3, #1
 800ae38:	60fb      	str	r3, [r7, #12]
 800ae3a:	e001      	b.n	800ae40 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ae40:	f001 f944 	bl	800c0cc <vPortExitCritical>

	return xReturn;
 800ae44:	68fb      	ldr	r3, [r7, #12]
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3710      	adds	r7, #16
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}

0800ae4e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ae4e:	b580      	push	{r7, lr}
 800ae50:	b08e      	sub	sp, #56	@ 0x38
 800ae52:	af04      	add	r7, sp, #16
 800ae54:	60f8      	str	r0, [r7, #12]
 800ae56:	60b9      	str	r1, [r7, #8]
 800ae58:	607a      	str	r2, [r7, #4]
 800ae5a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ae5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d10b      	bne.n	800ae7a <xTaskCreateStatic+0x2c>
	__asm volatile
 800ae62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae66:	f383 8811 	msr	BASEPRI, r3
 800ae6a:	f3bf 8f6f 	isb	sy
 800ae6e:	f3bf 8f4f 	dsb	sy
 800ae72:	623b      	str	r3, [r7, #32]
}
 800ae74:	bf00      	nop
 800ae76:	bf00      	nop
 800ae78:	e7fd      	b.n	800ae76 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ae7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d10b      	bne.n	800ae98 <xTaskCreateStatic+0x4a>
	__asm volatile
 800ae80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae84:	f383 8811 	msr	BASEPRI, r3
 800ae88:	f3bf 8f6f 	isb	sy
 800ae8c:	f3bf 8f4f 	dsb	sy
 800ae90:	61fb      	str	r3, [r7, #28]
}
 800ae92:	bf00      	nop
 800ae94:	bf00      	nop
 800ae96:	e7fd      	b.n	800ae94 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ae98:	2354      	movs	r3, #84	@ 0x54
 800ae9a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	2b54      	cmp	r3, #84	@ 0x54
 800aea0:	d00b      	beq.n	800aeba <xTaskCreateStatic+0x6c>
	__asm volatile
 800aea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aea6:	f383 8811 	msr	BASEPRI, r3
 800aeaa:	f3bf 8f6f 	isb	sy
 800aeae:	f3bf 8f4f 	dsb	sy
 800aeb2:	61bb      	str	r3, [r7, #24]
}
 800aeb4:	bf00      	nop
 800aeb6:	bf00      	nop
 800aeb8:	e7fd      	b.n	800aeb6 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800aeba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d01e      	beq.n	800aefe <xTaskCreateStatic+0xb0>
 800aec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d01b      	beq.n	800aefe <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aec8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aeca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aecc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aece:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aed2:	2202      	movs	r2, #2
 800aed4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aed8:	2300      	movs	r3, #0
 800aeda:	9303      	str	r3, [sp, #12]
 800aedc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aede:	9302      	str	r3, [sp, #8]
 800aee0:	f107 0314 	add.w	r3, r7, #20
 800aee4:	9301      	str	r3, [sp, #4]
 800aee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aee8:	9300      	str	r3, [sp, #0]
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	687a      	ldr	r2, [r7, #4]
 800aeee:	68b9      	ldr	r1, [r7, #8]
 800aef0:	68f8      	ldr	r0, [r7, #12]
 800aef2:	f000 f850 	bl	800af96 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aef6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800aef8:	f000 f8ce 	bl	800b098 <prvAddNewTaskToReadyList>
 800aefc:	e001      	b.n	800af02 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800aefe:	2300      	movs	r3, #0
 800af00:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800af02:	697b      	ldr	r3, [r7, #20]
	}
 800af04:	4618      	mov	r0, r3
 800af06:	3728      	adds	r7, #40	@ 0x28
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b08c      	sub	sp, #48	@ 0x30
 800af10:	af04      	add	r7, sp, #16
 800af12:	60f8      	str	r0, [r7, #12]
 800af14:	60b9      	str	r1, [r7, #8]
 800af16:	603b      	str	r3, [r7, #0]
 800af18:	4613      	mov	r3, r2
 800af1a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af1c:	88fb      	ldrh	r3, [r7, #6]
 800af1e:	009b      	lsls	r3, r3, #2
 800af20:	4618      	mov	r0, r3
 800af22:	f001 f9a5 	bl	800c270 <pvPortMalloc>
 800af26:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d00e      	beq.n	800af4c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800af2e:	2054      	movs	r0, #84	@ 0x54
 800af30:	f001 f99e 	bl	800c270 <pvPortMalloc>
 800af34:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800af36:	69fb      	ldr	r3, [r7, #28]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d003      	beq.n	800af44 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800af3c:	69fb      	ldr	r3, [r7, #28]
 800af3e:	697a      	ldr	r2, [r7, #20]
 800af40:	631a      	str	r2, [r3, #48]	@ 0x30
 800af42:	e005      	b.n	800af50 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800af44:	6978      	ldr	r0, [r7, #20]
 800af46:	f001 fa5b 	bl	800c400 <vPortFree>
 800af4a:	e001      	b.n	800af50 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800af4c:	2300      	movs	r3, #0
 800af4e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800af50:	69fb      	ldr	r3, [r7, #28]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d017      	beq.n	800af86 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800af56:	69fb      	ldr	r3, [r7, #28]
 800af58:	2200      	movs	r2, #0
 800af5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800af5e:	88fa      	ldrh	r2, [r7, #6]
 800af60:	2300      	movs	r3, #0
 800af62:	9303      	str	r3, [sp, #12]
 800af64:	69fb      	ldr	r3, [r7, #28]
 800af66:	9302      	str	r3, [sp, #8]
 800af68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af6a:	9301      	str	r3, [sp, #4]
 800af6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af6e:	9300      	str	r3, [sp, #0]
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	68b9      	ldr	r1, [r7, #8]
 800af74:	68f8      	ldr	r0, [r7, #12]
 800af76:	f000 f80e 	bl	800af96 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800af7a:	69f8      	ldr	r0, [r7, #28]
 800af7c:	f000 f88c 	bl	800b098 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800af80:	2301      	movs	r3, #1
 800af82:	61bb      	str	r3, [r7, #24]
 800af84:	e002      	b.n	800af8c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800af86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800af8a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800af8c:	69bb      	ldr	r3, [r7, #24]
	}
 800af8e:	4618      	mov	r0, r3
 800af90:	3720      	adds	r7, #32
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}

0800af96 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800af96:	b580      	push	{r7, lr}
 800af98:	b088      	sub	sp, #32
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	60f8      	str	r0, [r7, #12]
 800af9e:	60b9      	str	r1, [r7, #8]
 800afa0:	607a      	str	r2, [r7, #4]
 800afa2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800afa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afa6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800afae:	3b01      	subs	r3, #1
 800afb0:	009b      	lsls	r3, r3, #2
 800afb2:	4413      	add	r3, r2
 800afb4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800afb6:	69bb      	ldr	r3, [r7, #24]
 800afb8:	f023 0307 	bic.w	r3, r3, #7
 800afbc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800afbe:	69bb      	ldr	r3, [r7, #24]
 800afc0:	f003 0307 	and.w	r3, r3, #7
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d00b      	beq.n	800afe0 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800afc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afcc:	f383 8811 	msr	BASEPRI, r3
 800afd0:	f3bf 8f6f 	isb	sy
 800afd4:	f3bf 8f4f 	dsb	sy
 800afd8:	617b      	str	r3, [r7, #20]
}
 800afda:	bf00      	nop
 800afdc:	bf00      	nop
 800afde:	e7fd      	b.n	800afdc <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800afe0:	2300      	movs	r3, #0
 800afe2:	61fb      	str	r3, [r7, #28]
 800afe4:	e012      	b.n	800b00c <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800afe6:	68ba      	ldr	r2, [r7, #8]
 800afe8:	69fb      	ldr	r3, [r7, #28]
 800afea:	4413      	add	r3, r2
 800afec:	7819      	ldrb	r1, [r3, #0]
 800afee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aff0:	69fb      	ldr	r3, [r7, #28]
 800aff2:	4413      	add	r3, r2
 800aff4:	3334      	adds	r3, #52	@ 0x34
 800aff6:	460a      	mov	r2, r1
 800aff8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800affa:	68ba      	ldr	r2, [r7, #8]
 800affc:	69fb      	ldr	r3, [r7, #28]
 800affe:	4413      	add	r3, r2
 800b000:	781b      	ldrb	r3, [r3, #0]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d006      	beq.n	800b014 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b006:	69fb      	ldr	r3, [r7, #28]
 800b008:	3301      	adds	r3, #1
 800b00a:	61fb      	str	r3, [r7, #28]
 800b00c:	69fb      	ldr	r3, [r7, #28]
 800b00e:	2b0f      	cmp	r3, #15
 800b010:	d9e9      	bls.n	800afe6 <prvInitialiseNewTask+0x50>
 800b012:	e000      	b.n	800b016 <prvInitialiseNewTask+0x80>
		{
			break;
 800b014:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b018:	2200      	movs	r2, #0
 800b01a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b01e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b020:	2b06      	cmp	r3, #6
 800b022:	d901      	bls.n	800b028 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b024:	2306      	movs	r3, #6
 800b026:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b02a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b02c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b02e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b030:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b032:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b036:	2200      	movs	r2, #0
 800b038:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b03a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b03c:	3304      	adds	r3, #4
 800b03e:	4618      	mov	r0, r3
 800b040:	f7ff f897 	bl	800a172 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b046:	3318      	adds	r3, #24
 800b048:	4618      	mov	r0, r3
 800b04a:	f7ff f892 	bl	800a172 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b04e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b050:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b052:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b056:	f1c3 0207 	rsb	r2, r3, #7
 800b05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b05c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b05e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b060:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b062:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b066:	2200      	movs	r2, #0
 800b068:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b06a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b06c:	2200      	movs	r2, #0
 800b06e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b072:	683a      	ldr	r2, [r7, #0]
 800b074:	68f9      	ldr	r1, [r7, #12]
 800b076:	69b8      	ldr	r0, [r7, #24]
 800b078:	f000 ff08 	bl	800be8c <pxPortInitialiseStack>
 800b07c:	4602      	mov	r2, r0
 800b07e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b080:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b084:	2b00      	cmp	r3, #0
 800b086:	d002      	beq.n	800b08e <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b08a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b08c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b08e:	bf00      	nop
 800b090:	3720      	adds	r7, #32
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
	...

0800b098 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b082      	sub	sp, #8
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b0a0:	f000 ffe4 	bl	800c06c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b0a4:	4b2a      	ldr	r3, [pc, #168]	@ (800b150 <prvAddNewTaskToReadyList+0xb8>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	3301      	adds	r3, #1
 800b0aa:	4a29      	ldr	r2, [pc, #164]	@ (800b150 <prvAddNewTaskToReadyList+0xb8>)
 800b0ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b0ae:	4b29      	ldr	r3, [pc, #164]	@ (800b154 <prvAddNewTaskToReadyList+0xbc>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d109      	bne.n	800b0ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b0b6:	4a27      	ldr	r2, [pc, #156]	@ (800b154 <prvAddNewTaskToReadyList+0xbc>)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b0bc:	4b24      	ldr	r3, [pc, #144]	@ (800b150 <prvAddNewTaskToReadyList+0xb8>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	d110      	bne.n	800b0e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b0c4:	f000 fbd8 	bl	800b878 <prvInitialiseTaskLists>
 800b0c8:	e00d      	b.n	800b0e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b0ca:	4b23      	ldr	r3, [pc, #140]	@ (800b158 <prvAddNewTaskToReadyList+0xc0>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d109      	bne.n	800b0e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b0d2:	4b20      	ldr	r3, [pc, #128]	@ (800b154 <prvAddNewTaskToReadyList+0xbc>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d802      	bhi.n	800b0e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b0e0:	4a1c      	ldr	r2, [pc, #112]	@ (800b154 <prvAddNewTaskToReadyList+0xbc>)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b0e6:	4b1d      	ldr	r3, [pc, #116]	@ (800b15c <prvAddNewTaskToReadyList+0xc4>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	3301      	adds	r3, #1
 800b0ec:	4a1b      	ldr	r2, [pc, #108]	@ (800b15c <prvAddNewTaskToReadyList+0xc4>)
 800b0ee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0f4:	2201      	movs	r2, #1
 800b0f6:	409a      	lsls	r2, r3
 800b0f8:	4b19      	ldr	r3, [pc, #100]	@ (800b160 <prvAddNewTaskToReadyList+0xc8>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	4313      	orrs	r3, r2
 800b0fe:	4a18      	ldr	r2, [pc, #96]	@ (800b160 <prvAddNewTaskToReadyList+0xc8>)
 800b100:	6013      	str	r3, [r2, #0]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b106:	4613      	mov	r3, r2
 800b108:	009b      	lsls	r3, r3, #2
 800b10a:	4413      	add	r3, r2
 800b10c:	009b      	lsls	r3, r3, #2
 800b10e:	4a15      	ldr	r2, [pc, #84]	@ (800b164 <prvAddNewTaskToReadyList+0xcc>)
 800b110:	441a      	add	r2, r3
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	3304      	adds	r3, #4
 800b116:	4619      	mov	r1, r3
 800b118:	4610      	mov	r0, r2
 800b11a:	f7ff f836 	bl	800a18a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b11e:	f000 ffd5 	bl	800c0cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b122:	4b0d      	ldr	r3, [pc, #52]	@ (800b158 <prvAddNewTaskToReadyList+0xc0>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d00e      	beq.n	800b148 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b12a:	4b0a      	ldr	r3, [pc, #40]	@ (800b154 <prvAddNewTaskToReadyList+0xbc>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b134:	429a      	cmp	r2, r3
 800b136:	d207      	bcs.n	800b148 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b138:	4b0b      	ldr	r3, [pc, #44]	@ (800b168 <prvAddNewTaskToReadyList+0xd0>)
 800b13a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b13e:	601a      	str	r2, [r3, #0]
 800b140:	f3bf 8f4f 	dsb	sy
 800b144:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b148:	bf00      	nop
 800b14a:	3708      	adds	r7, #8
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}
 800b150:	200006f8 	.word	0x200006f8
 800b154:	200005f8 	.word	0x200005f8
 800b158:	20000704 	.word	0x20000704
 800b15c:	20000714 	.word	0x20000714
 800b160:	20000700 	.word	0x20000700
 800b164:	200005fc 	.word	0x200005fc
 800b168:	e000ed04 	.word	0xe000ed04

0800b16c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b084      	sub	sp, #16
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b174:	2300      	movs	r3, #0
 800b176:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d018      	beq.n	800b1b0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b17e:	4b14      	ldr	r3, [pc, #80]	@ (800b1d0 <vTaskDelay+0x64>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d00b      	beq.n	800b19e <vTaskDelay+0x32>
	__asm volatile
 800b186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b18a:	f383 8811 	msr	BASEPRI, r3
 800b18e:	f3bf 8f6f 	isb	sy
 800b192:	f3bf 8f4f 	dsb	sy
 800b196:	60bb      	str	r3, [r7, #8]
}
 800b198:	bf00      	nop
 800b19a:	bf00      	nop
 800b19c:	e7fd      	b.n	800b19a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b19e:	f000 f87d 	bl	800b29c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b1a2:	2100      	movs	r1, #0
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f000 fe0b 	bl	800bdc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b1aa:	f000 f885 	bl	800b2b8 <xTaskResumeAll>
 800b1ae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d107      	bne.n	800b1c6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b1b6:	4b07      	ldr	r3, [pc, #28]	@ (800b1d4 <vTaskDelay+0x68>)
 800b1b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1bc:	601a      	str	r2, [r3, #0]
 800b1be:	f3bf 8f4f 	dsb	sy
 800b1c2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b1c6:	bf00      	nop
 800b1c8:	3710      	adds	r7, #16
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}
 800b1ce:	bf00      	nop
 800b1d0:	20000720 	.word	0x20000720
 800b1d4:	e000ed04 	.word	0xe000ed04

0800b1d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b08a      	sub	sp, #40	@ 0x28
 800b1dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b1e6:	463a      	mov	r2, r7
 800b1e8:	1d39      	adds	r1, r7, #4
 800b1ea:	f107 0308 	add.w	r3, r7, #8
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f7f4 ffae 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b1f4:	6839      	ldr	r1, [r7, #0]
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	68ba      	ldr	r2, [r7, #8]
 800b1fa:	9202      	str	r2, [sp, #8]
 800b1fc:	9301      	str	r3, [sp, #4]
 800b1fe:	2300      	movs	r3, #0
 800b200:	9300      	str	r3, [sp, #0]
 800b202:	2300      	movs	r3, #0
 800b204:	460a      	mov	r2, r1
 800b206:	491f      	ldr	r1, [pc, #124]	@ (800b284 <vTaskStartScheduler+0xac>)
 800b208:	481f      	ldr	r0, [pc, #124]	@ (800b288 <vTaskStartScheduler+0xb0>)
 800b20a:	f7ff fe20 	bl	800ae4e <xTaskCreateStatic>
 800b20e:	4603      	mov	r3, r0
 800b210:	4a1e      	ldr	r2, [pc, #120]	@ (800b28c <vTaskStartScheduler+0xb4>)
 800b212:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b214:	4b1d      	ldr	r3, [pc, #116]	@ (800b28c <vTaskStartScheduler+0xb4>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d002      	beq.n	800b222 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b21c:	2301      	movs	r3, #1
 800b21e:	617b      	str	r3, [r7, #20]
 800b220:	e001      	b.n	800b226 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b222:	2300      	movs	r3, #0
 800b224:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	2b01      	cmp	r3, #1
 800b22a:	d116      	bne.n	800b25a <vTaskStartScheduler+0x82>
	__asm volatile
 800b22c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b230:	f383 8811 	msr	BASEPRI, r3
 800b234:	f3bf 8f6f 	isb	sy
 800b238:	f3bf 8f4f 	dsb	sy
 800b23c:	613b      	str	r3, [r7, #16]
}
 800b23e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b240:	4b13      	ldr	r3, [pc, #76]	@ (800b290 <vTaskStartScheduler+0xb8>)
 800b242:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b246:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b248:	4b12      	ldr	r3, [pc, #72]	@ (800b294 <vTaskStartScheduler+0xbc>)
 800b24a:	2201      	movs	r2, #1
 800b24c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b24e:	4b12      	ldr	r3, [pc, #72]	@ (800b298 <vTaskStartScheduler+0xc0>)
 800b250:	2200      	movs	r2, #0
 800b252:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b254:	f000 fe98 	bl	800bf88 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b258:	e00f      	b.n	800b27a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b260:	d10b      	bne.n	800b27a <vTaskStartScheduler+0xa2>
	__asm volatile
 800b262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b266:	f383 8811 	msr	BASEPRI, r3
 800b26a:	f3bf 8f6f 	isb	sy
 800b26e:	f3bf 8f4f 	dsb	sy
 800b272:	60fb      	str	r3, [r7, #12]
}
 800b274:	bf00      	nop
 800b276:	bf00      	nop
 800b278:	e7fd      	b.n	800b276 <vTaskStartScheduler+0x9e>
}
 800b27a:	bf00      	nop
 800b27c:	3718      	adds	r7, #24
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
 800b282:	bf00      	nop
 800b284:	0800d298 	.word	0x0800d298
 800b288:	0800b849 	.word	0x0800b849
 800b28c:	2000071c 	.word	0x2000071c
 800b290:	20000718 	.word	0x20000718
 800b294:	20000704 	.word	0x20000704
 800b298:	200006fc 	.word	0x200006fc

0800b29c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b29c:	b480      	push	{r7}
 800b29e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b2a0:	4b04      	ldr	r3, [pc, #16]	@ (800b2b4 <vTaskSuspendAll+0x18>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	3301      	adds	r3, #1
 800b2a6:	4a03      	ldr	r2, [pc, #12]	@ (800b2b4 <vTaskSuspendAll+0x18>)
 800b2a8:	6013      	str	r3, [r2, #0]
}
 800b2aa:	bf00      	nop
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bc80      	pop	{r7}
 800b2b0:	4770      	bx	lr
 800b2b2:	bf00      	nop
 800b2b4:	20000720 	.word	0x20000720

0800b2b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b084      	sub	sp, #16
 800b2bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b2c6:	4b42      	ldr	r3, [pc, #264]	@ (800b3d0 <xTaskResumeAll+0x118>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d10b      	bne.n	800b2e6 <xTaskResumeAll+0x2e>
	__asm volatile
 800b2ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2d2:	f383 8811 	msr	BASEPRI, r3
 800b2d6:	f3bf 8f6f 	isb	sy
 800b2da:	f3bf 8f4f 	dsb	sy
 800b2de:	603b      	str	r3, [r7, #0]
}
 800b2e0:	bf00      	nop
 800b2e2:	bf00      	nop
 800b2e4:	e7fd      	b.n	800b2e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b2e6:	f000 fec1 	bl	800c06c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b2ea:	4b39      	ldr	r3, [pc, #228]	@ (800b3d0 <xTaskResumeAll+0x118>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	3b01      	subs	r3, #1
 800b2f0:	4a37      	ldr	r2, [pc, #220]	@ (800b3d0 <xTaskResumeAll+0x118>)
 800b2f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2f4:	4b36      	ldr	r3, [pc, #216]	@ (800b3d0 <xTaskResumeAll+0x118>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d161      	bne.n	800b3c0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b2fc:	4b35      	ldr	r3, [pc, #212]	@ (800b3d4 <xTaskResumeAll+0x11c>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d05d      	beq.n	800b3c0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b304:	e02e      	b.n	800b364 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b306:	4b34      	ldr	r3, [pc, #208]	@ (800b3d8 <xTaskResumeAll+0x120>)
 800b308:	68db      	ldr	r3, [r3, #12]
 800b30a:	68db      	ldr	r3, [r3, #12]
 800b30c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	3318      	adds	r3, #24
 800b312:	4618      	mov	r0, r3
 800b314:	f7fe ff94 	bl	800a240 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	3304      	adds	r3, #4
 800b31c:	4618      	mov	r0, r3
 800b31e:	f7fe ff8f 	bl	800a240 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b326:	2201      	movs	r2, #1
 800b328:	409a      	lsls	r2, r3
 800b32a:	4b2c      	ldr	r3, [pc, #176]	@ (800b3dc <xTaskResumeAll+0x124>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	4313      	orrs	r3, r2
 800b330:	4a2a      	ldr	r2, [pc, #168]	@ (800b3dc <xTaskResumeAll+0x124>)
 800b332:	6013      	str	r3, [r2, #0]
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b338:	4613      	mov	r3, r2
 800b33a:	009b      	lsls	r3, r3, #2
 800b33c:	4413      	add	r3, r2
 800b33e:	009b      	lsls	r3, r3, #2
 800b340:	4a27      	ldr	r2, [pc, #156]	@ (800b3e0 <xTaskResumeAll+0x128>)
 800b342:	441a      	add	r2, r3
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	3304      	adds	r3, #4
 800b348:	4619      	mov	r1, r3
 800b34a:	4610      	mov	r0, r2
 800b34c:	f7fe ff1d 	bl	800a18a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b354:	4b23      	ldr	r3, [pc, #140]	@ (800b3e4 <xTaskResumeAll+0x12c>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b35a:	429a      	cmp	r2, r3
 800b35c:	d302      	bcc.n	800b364 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b35e:	4b22      	ldr	r3, [pc, #136]	@ (800b3e8 <xTaskResumeAll+0x130>)
 800b360:	2201      	movs	r2, #1
 800b362:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b364:	4b1c      	ldr	r3, [pc, #112]	@ (800b3d8 <xTaskResumeAll+0x120>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d1cc      	bne.n	800b306 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d001      	beq.n	800b376 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b372:	f000 fb1f 	bl	800b9b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b376:	4b1d      	ldr	r3, [pc, #116]	@ (800b3ec <xTaskResumeAll+0x134>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d010      	beq.n	800b3a4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b382:	f000 f837 	bl	800b3f4 <xTaskIncrementTick>
 800b386:	4603      	mov	r3, r0
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d002      	beq.n	800b392 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b38c:	4b16      	ldr	r3, [pc, #88]	@ (800b3e8 <xTaskResumeAll+0x130>)
 800b38e:	2201      	movs	r2, #1
 800b390:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	3b01      	subs	r3, #1
 800b396:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d1f1      	bne.n	800b382 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800b39e:	4b13      	ldr	r3, [pc, #76]	@ (800b3ec <xTaskResumeAll+0x134>)
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b3a4:	4b10      	ldr	r3, [pc, #64]	@ (800b3e8 <xTaskResumeAll+0x130>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d009      	beq.n	800b3c0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b3b0:	4b0f      	ldr	r3, [pc, #60]	@ (800b3f0 <xTaskResumeAll+0x138>)
 800b3b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3b6:	601a      	str	r2, [r3, #0]
 800b3b8:	f3bf 8f4f 	dsb	sy
 800b3bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b3c0:	f000 fe84 	bl	800c0cc <vPortExitCritical>

	return xAlreadyYielded;
 800b3c4:	68bb      	ldr	r3, [r7, #8]
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3710      	adds	r7, #16
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	20000720 	.word	0x20000720
 800b3d4:	200006f8 	.word	0x200006f8
 800b3d8:	200006b8 	.word	0x200006b8
 800b3dc:	20000700 	.word	0x20000700
 800b3e0:	200005fc 	.word	0x200005fc
 800b3e4:	200005f8 	.word	0x200005f8
 800b3e8:	2000070c 	.word	0x2000070c
 800b3ec:	20000708 	.word	0x20000708
 800b3f0:	e000ed04 	.word	0xe000ed04

0800b3f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b086      	sub	sp, #24
 800b3f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3fe:	4b51      	ldr	r3, [pc, #324]	@ (800b544 <xTaskIncrementTick+0x150>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	2b00      	cmp	r3, #0
 800b404:	f040 808e 	bne.w	800b524 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b408:	4b4f      	ldr	r3, [pc, #316]	@ (800b548 <xTaskIncrementTick+0x154>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	3301      	adds	r3, #1
 800b40e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b410:	4a4d      	ldr	r2, [pc, #308]	@ (800b548 <xTaskIncrementTick+0x154>)
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d121      	bne.n	800b460 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b41c:	4b4b      	ldr	r3, [pc, #300]	@ (800b54c <xTaskIncrementTick+0x158>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d00b      	beq.n	800b43e <xTaskIncrementTick+0x4a>
	__asm volatile
 800b426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b42a:	f383 8811 	msr	BASEPRI, r3
 800b42e:	f3bf 8f6f 	isb	sy
 800b432:	f3bf 8f4f 	dsb	sy
 800b436:	603b      	str	r3, [r7, #0]
}
 800b438:	bf00      	nop
 800b43a:	bf00      	nop
 800b43c:	e7fd      	b.n	800b43a <xTaskIncrementTick+0x46>
 800b43e:	4b43      	ldr	r3, [pc, #268]	@ (800b54c <xTaskIncrementTick+0x158>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	60fb      	str	r3, [r7, #12]
 800b444:	4b42      	ldr	r3, [pc, #264]	@ (800b550 <xTaskIncrementTick+0x15c>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	4a40      	ldr	r2, [pc, #256]	@ (800b54c <xTaskIncrementTick+0x158>)
 800b44a:	6013      	str	r3, [r2, #0]
 800b44c:	4a40      	ldr	r2, [pc, #256]	@ (800b550 <xTaskIncrementTick+0x15c>)
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	6013      	str	r3, [r2, #0]
 800b452:	4b40      	ldr	r3, [pc, #256]	@ (800b554 <xTaskIncrementTick+0x160>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	3301      	adds	r3, #1
 800b458:	4a3e      	ldr	r2, [pc, #248]	@ (800b554 <xTaskIncrementTick+0x160>)
 800b45a:	6013      	str	r3, [r2, #0]
 800b45c:	f000 faaa 	bl	800b9b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b460:	4b3d      	ldr	r3, [pc, #244]	@ (800b558 <xTaskIncrementTick+0x164>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	693a      	ldr	r2, [r7, #16]
 800b466:	429a      	cmp	r2, r3
 800b468:	d34d      	bcc.n	800b506 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b46a:	4b38      	ldr	r3, [pc, #224]	@ (800b54c <xTaskIncrementTick+0x158>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d101      	bne.n	800b478 <xTaskIncrementTick+0x84>
 800b474:	2301      	movs	r3, #1
 800b476:	e000      	b.n	800b47a <xTaskIncrementTick+0x86>
 800b478:	2300      	movs	r3, #0
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d004      	beq.n	800b488 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b47e:	4b36      	ldr	r3, [pc, #216]	@ (800b558 <xTaskIncrementTick+0x164>)
 800b480:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b484:	601a      	str	r2, [r3, #0]
					break;
 800b486:	e03e      	b.n	800b506 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b488:	4b30      	ldr	r3, [pc, #192]	@ (800b54c <xTaskIncrementTick+0x158>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	68db      	ldr	r3, [r3, #12]
 800b48e:	68db      	ldr	r3, [r3, #12]
 800b490:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	685b      	ldr	r3, [r3, #4]
 800b496:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b498:	693a      	ldr	r2, [r7, #16]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d203      	bcs.n	800b4a8 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b4a0:	4a2d      	ldr	r2, [pc, #180]	@ (800b558 <xTaskIncrementTick+0x164>)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6013      	str	r3, [r2, #0]
						break;
 800b4a6:	e02e      	b.n	800b506 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	3304      	adds	r3, #4
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f7fe fec7 	bl	800a240 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d004      	beq.n	800b4c4 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	3318      	adds	r3, #24
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f7fe febe 	bl	800a240 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4c8:	2201      	movs	r2, #1
 800b4ca:	409a      	lsls	r2, r3
 800b4cc:	4b23      	ldr	r3, [pc, #140]	@ (800b55c <xTaskIncrementTick+0x168>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	4313      	orrs	r3, r2
 800b4d2:	4a22      	ldr	r2, [pc, #136]	@ (800b55c <xTaskIncrementTick+0x168>)
 800b4d4:	6013      	str	r3, [r2, #0]
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4da:	4613      	mov	r3, r2
 800b4dc:	009b      	lsls	r3, r3, #2
 800b4de:	4413      	add	r3, r2
 800b4e0:	009b      	lsls	r3, r3, #2
 800b4e2:	4a1f      	ldr	r2, [pc, #124]	@ (800b560 <xTaskIncrementTick+0x16c>)
 800b4e4:	441a      	add	r2, r3
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	3304      	adds	r3, #4
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	4610      	mov	r0, r2
 800b4ee:	f7fe fe4c 	bl	800a18a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4f6:	4b1b      	ldr	r3, [pc, #108]	@ (800b564 <xTaskIncrementTick+0x170>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	d3b4      	bcc.n	800b46a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b500:	2301      	movs	r3, #1
 800b502:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b504:	e7b1      	b.n	800b46a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b506:	4b17      	ldr	r3, [pc, #92]	@ (800b564 <xTaskIncrementTick+0x170>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b50c:	4914      	ldr	r1, [pc, #80]	@ (800b560 <xTaskIncrementTick+0x16c>)
 800b50e:	4613      	mov	r3, r2
 800b510:	009b      	lsls	r3, r3, #2
 800b512:	4413      	add	r3, r2
 800b514:	009b      	lsls	r3, r3, #2
 800b516:	440b      	add	r3, r1
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	2b01      	cmp	r3, #1
 800b51c:	d907      	bls.n	800b52e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b51e:	2301      	movs	r3, #1
 800b520:	617b      	str	r3, [r7, #20]
 800b522:	e004      	b.n	800b52e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b524:	4b10      	ldr	r3, [pc, #64]	@ (800b568 <xTaskIncrementTick+0x174>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	3301      	adds	r3, #1
 800b52a:	4a0f      	ldr	r2, [pc, #60]	@ (800b568 <xTaskIncrementTick+0x174>)
 800b52c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b52e:	4b0f      	ldr	r3, [pc, #60]	@ (800b56c <xTaskIncrementTick+0x178>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d001      	beq.n	800b53a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800b536:	2301      	movs	r3, #1
 800b538:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b53a:	697b      	ldr	r3, [r7, #20]
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3718      	adds	r7, #24
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}
 800b544:	20000720 	.word	0x20000720
 800b548:	200006fc 	.word	0x200006fc
 800b54c:	200006b0 	.word	0x200006b0
 800b550:	200006b4 	.word	0x200006b4
 800b554:	20000710 	.word	0x20000710
 800b558:	20000718 	.word	0x20000718
 800b55c:	20000700 	.word	0x20000700
 800b560:	200005fc 	.word	0x200005fc
 800b564:	200005f8 	.word	0x200005f8
 800b568:	20000708 	.word	0x20000708
 800b56c:	2000070c 	.word	0x2000070c

0800b570 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b570:	b480      	push	{r7}
 800b572:	b087      	sub	sp, #28
 800b574:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b576:	4b27      	ldr	r3, [pc, #156]	@ (800b614 <vTaskSwitchContext+0xa4>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d003      	beq.n	800b586 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b57e:	4b26      	ldr	r3, [pc, #152]	@ (800b618 <vTaskSwitchContext+0xa8>)
 800b580:	2201      	movs	r2, #1
 800b582:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b584:	e040      	b.n	800b608 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800b586:	4b24      	ldr	r3, [pc, #144]	@ (800b618 <vTaskSwitchContext+0xa8>)
 800b588:	2200      	movs	r2, #0
 800b58a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b58c:	4b23      	ldr	r3, [pc, #140]	@ (800b61c <vTaskSwitchContext+0xac>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	fab3 f383 	clz	r3, r3
 800b598:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b59a:	7afb      	ldrb	r3, [r7, #11]
 800b59c:	f1c3 031f 	rsb	r3, r3, #31
 800b5a0:	617b      	str	r3, [r7, #20]
 800b5a2:	491f      	ldr	r1, [pc, #124]	@ (800b620 <vTaskSwitchContext+0xb0>)
 800b5a4:	697a      	ldr	r2, [r7, #20]
 800b5a6:	4613      	mov	r3, r2
 800b5a8:	009b      	lsls	r3, r3, #2
 800b5aa:	4413      	add	r3, r2
 800b5ac:	009b      	lsls	r3, r3, #2
 800b5ae:	440b      	add	r3, r1
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d10b      	bne.n	800b5ce <vTaskSwitchContext+0x5e>
	__asm volatile
 800b5b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5ba:	f383 8811 	msr	BASEPRI, r3
 800b5be:	f3bf 8f6f 	isb	sy
 800b5c2:	f3bf 8f4f 	dsb	sy
 800b5c6:	607b      	str	r3, [r7, #4]
}
 800b5c8:	bf00      	nop
 800b5ca:	bf00      	nop
 800b5cc:	e7fd      	b.n	800b5ca <vTaskSwitchContext+0x5a>
 800b5ce:	697a      	ldr	r2, [r7, #20]
 800b5d0:	4613      	mov	r3, r2
 800b5d2:	009b      	lsls	r3, r3, #2
 800b5d4:	4413      	add	r3, r2
 800b5d6:	009b      	lsls	r3, r3, #2
 800b5d8:	4a11      	ldr	r2, [pc, #68]	@ (800b620 <vTaskSwitchContext+0xb0>)
 800b5da:	4413      	add	r3, r2
 800b5dc:	613b      	str	r3, [r7, #16]
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	685b      	ldr	r3, [r3, #4]
 800b5e2:	685a      	ldr	r2, [r3, #4]
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	605a      	str	r2, [r3, #4]
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	685a      	ldr	r2, [r3, #4]
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	3308      	adds	r3, #8
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d104      	bne.n	800b5fe <vTaskSwitchContext+0x8e>
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	685b      	ldr	r3, [r3, #4]
 800b5f8:	685a      	ldr	r2, [r3, #4]
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	605a      	str	r2, [r3, #4]
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	685b      	ldr	r3, [r3, #4]
 800b602:	68db      	ldr	r3, [r3, #12]
 800b604:	4a07      	ldr	r2, [pc, #28]	@ (800b624 <vTaskSwitchContext+0xb4>)
 800b606:	6013      	str	r3, [r2, #0]
}
 800b608:	bf00      	nop
 800b60a:	371c      	adds	r7, #28
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bc80      	pop	{r7}
 800b610:	4770      	bx	lr
 800b612:	bf00      	nop
 800b614:	20000720 	.word	0x20000720
 800b618:	2000070c 	.word	0x2000070c
 800b61c:	20000700 	.word	0x20000700
 800b620:	200005fc 	.word	0x200005fc
 800b624:	200005f8 	.word	0x200005f8

0800b628 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b084      	sub	sp, #16
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
 800b630:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d10b      	bne.n	800b650 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b63c:	f383 8811 	msr	BASEPRI, r3
 800b640:	f3bf 8f6f 	isb	sy
 800b644:	f3bf 8f4f 	dsb	sy
 800b648:	60fb      	str	r3, [r7, #12]
}
 800b64a:	bf00      	nop
 800b64c:	bf00      	nop
 800b64e:	e7fd      	b.n	800b64c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b650:	4b07      	ldr	r3, [pc, #28]	@ (800b670 <vTaskPlaceOnEventList+0x48>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	3318      	adds	r3, #24
 800b656:	4619      	mov	r1, r3
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f7fe fdb9 	bl	800a1d0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b65e:	2101      	movs	r1, #1
 800b660:	6838      	ldr	r0, [r7, #0]
 800b662:	f000 fbad 	bl	800bdc0 <prvAddCurrentTaskToDelayedList>
}
 800b666:	bf00      	nop
 800b668:	3710      	adds	r7, #16
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}
 800b66e:	bf00      	nop
 800b670:	200005f8 	.word	0x200005f8

0800b674 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b086      	sub	sp, #24
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	68db      	ldr	r3, [r3, #12]
 800b680:	68db      	ldr	r3, [r3, #12]
 800b682:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d10b      	bne.n	800b6a2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b68a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b68e:	f383 8811 	msr	BASEPRI, r3
 800b692:	f3bf 8f6f 	isb	sy
 800b696:	f3bf 8f4f 	dsb	sy
 800b69a:	60fb      	str	r3, [r7, #12]
}
 800b69c:	bf00      	nop
 800b69e:	bf00      	nop
 800b6a0:	e7fd      	b.n	800b69e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	3318      	adds	r3, #24
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f7fe fdca 	bl	800a240 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6ac:	4b1d      	ldr	r3, [pc, #116]	@ (800b724 <xTaskRemoveFromEventList+0xb0>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d11c      	bne.n	800b6ee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	3304      	adds	r3, #4
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f7fe fdc1 	bl	800a240 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	409a      	lsls	r2, r3
 800b6c6:	4b18      	ldr	r3, [pc, #96]	@ (800b728 <xTaskRemoveFromEventList+0xb4>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	4313      	orrs	r3, r2
 800b6cc:	4a16      	ldr	r2, [pc, #88]	@ (800b728 <xTaskRemoveFromEventList+0xb4>)
 800b6ce:	6013      	str	r3, [r2, #0]
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6d4:	4613      	mov	r3, r2
 800b6d6:	009b      	lsls	r3, r3, #2
 800b6d8:	4413      	add	r3, r2
 800b6da:	009b      	lsls	r3, r3, #2
 800b6dc:	4a13      	ldr	r2, [pc, #76]	@ (800b72c <xTaskRemoveFromEventList+0xb8>)
 800b6de:	441a      	add	r2, r3
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	3304      	adds	r3, #4
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	4610      	mov	r0, r2
 800b6e8:	f7fe fd4f 	bl	800a18a <vListInsertEnd>
 800b6ec:	e005      	b.n	800b6fa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b6ee:	693b      	ldr	r3, [r7, #16]
 800b6f0:	3318      	adds	r3, #24
 800b6f2:	4619      	mov	r1, r3
 800b6f4:	480e      	ldr	r0, [pc, #56]	@ (800b730 <xTaskRemoveFromEventList+0xbc>)
 800b6f6:	f7fe fd48 	bl	800a18a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6fe:	4b0d      	ldr	r3, [pc, #52]	@ (800b734 <xTaskRemoveFromEventList+0xc0>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b704:	429a      	cmp	r2, r3
 800b706:	d905      	bls.n	800b714 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b708:	2301      	movs	r3, #1
 800b70a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b70c:	4b0a      	ldr	r3, [pc, #40]	@ (800b738 <xTaskRemoveFromEventList+0xc4>)
 800b70e:	2201      	movs	r2, #1
 800b710:	601a      	str	r2, [r3, #0]
 800b712:	e001      	b.n	800b718 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b714:	2300      	movs	r3, #0
 800b716:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800b718:	697b      	ldr	r3, [r7, #20]
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3718      	adds	r7, #24
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}
 800b722:	bf00      	nop
 800b724:	20000720 	.word	0x20000720
 800b728:	20000700 	.word	0x20000700
 800b72c:	200005fc 	.word	0x200005fc
 800b730:	200006b8 	.word	0x200006b8
 800b734:	200005f8 	.word	0x200005f8
 800b738:	2000070c 	.word	0x2000070c

0800b73c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b73c:	b480      	push	{r7}
 800b73e:	b083      	sub	sp, #12
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b744:	4b06      	ldr	r3, [pc, #24]	@ (800b760 <vTaskInternalSetTimeOutState+0x24>)
 800b746:	681a      	ldr	r2, [r3, #0]
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b74c:	4b05      	ldr	r3, [pc, #20]	@ (800b764 <vTaskInternalSetTimeOutState+0x28>)
 800b74e:	681a      	ldr	r2, [r3, #0]
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	605a      	str	r2, [r3, #4]
}
 800b754:	bf00      	nop
 800b756:	370c      	adds	r7, #12
 800b758:	46bd      	mov	sp, r7
 800b75a:	bc80      	pop	{r7}
 800b75c:	4770      	bx	lr
 800b75e:	bf00      	nop
 800b760:	20000710 	.word	0x20000710
 800b764:	200006fc 	.word	0x200006fc

0800b768 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b088      	sub	sp, #32
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
 800b770:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d10b      	bne.n	800b790 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b77c:	f383 8811 	msr	BASEPRI, r3
 800b780:	f3bf 8f6f 	isb	sy
 800b784:	f3bf 8f4f 	dsb	sy
 800b788:	613b      	str	r3, [r7, #16]
}
 800b78a:	bf00      	nop
 800b78c:	bf00      	nop
 800b78e:	e7fd      	b.n	800b78c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d10b      	bne.n	800b7ae <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b79a:	f383 8811 	msr	BASEPRI, r3
 800b79e:	f3bf 8f6f 	isb	sy
 800b7a2:	f3bf 8f4f 	dsb	sy
 800b7a6:	60fb      	str	r3, [r7, #12]
}
 800b7a8:	bf00      	nop
 800b7aa:	bf00      	nop
 800b7ac:	e7fd      	b.n	800b7aa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b7ae:	f000 fc5d 	bl	800c06c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b7b2:	4b1d      	ldr	r3, [pc, #116]	@ (800b828 <xTaskCheckForTimeOut+0xc0>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	685b      	ldr	r3, [r3, #4]
 800b7bc:	69ba      	ldr	r2, [r7, #24]
 800b7be:	1ad3      	subs	r3, r2, r3
 800b7c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b7ca:	d102      	bne.n	800b7d2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	61fb      	str	r3, [r7, #28]
 800b7d0:	e023      	b.n	800b81a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681a      	ldr	r2, [r3, #0]
 800b7d6:	4b15      	ldr	r3, [pc, #84]	@ (800b82c <xTaskCheckForTimeOut+0xc4>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	429a      	cmp	r2, r3
 800b7dc:	d007      	beq.n	800b7ee <xTaskCheckForTimeOut+0x86>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	685b      	ldr	r3, [r3, #4]
 800b7e2:	69ba      	ldr	r2, [r7, #24]
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d302      	bcc.n	800b7ee <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	61fb      	str	r3, [r7, #28]
 800b7ec:	e015      	b.n	800b81a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	697a      	ldr	r2, [r7, #20]
 800b7f4:	429a      	cmp	r2, r3
 800b7f6:	d20b      	bcs.n	800b810 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	681a      	ldr	r2, [r3, #0]
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	1ad2      	subs	r2, r2, r3
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f7ff ff99 	bl	800b73c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b80a:	2300      	movs	r3, #0
 800b80c:	61fb      	str	r3, [r7, #28]
 800b80e:	e004      	b.n	800b81a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	2200      	movs	r2, #0
 800b814:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b816:	2301      	movs	r3, #1
 800b818:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b81a:	f000 fc57 	bl	800c0cc <vPortExitCritical>

	return xReturn;
 800b81e:	69fb      	ldr	r3, [r7, #28]
}
 800b820:	4618      	mov	r0, r3
 800b822:	3720      	adds	r7, #32
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}
 800b828:	200006fc 	.word	0x200006fc
 800b82c:	20000710 	.word	0x20000710

0800b830 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b830:	b480      	push	{r7}
 800b832:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b834:	4b03      	ldr	r3, [pc, #12]	@ (800b844 <vTaskMissedYield+0x14>)
 800b836:	2201      	movs	r2, #1
 800b838:	601a      	str	r2, [r3, #0]
}
 800b83a:	bf00      	nop
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bc80      	pop	{r7}
 800b840:	4770      	bx	lr
 800b842:	bf00      	nop
 800b844:	2000070c 	.word	0x2000070c

0800b848 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b082      	sub	sp, #8
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b850:	f000 f852 	bl	800b8f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b854:	4b06      	ldr	r3, [pc, #24]	@ (800b870 <prvIdleTask+0x28>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	2b01      	cmp	r3, #1
 800b85a:	d9f9      	bls.n	800b850 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b85c:	4b05      	ldr	r3, [pc, #20]	@ (800b874 <prvIdleTask+0x2c>)
 800b85e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b862:	601a      	str	r2, [r3, #0]
 800b864:	f3bf 8f4f 	dsb	sy
 800b868:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b86c:	e7f0      	b.n	800b850 <prvIdleTask+0x8>
 800b86e:	bf00      	nop
 800b870:	200005fc 	.word	0x200005fc
 800b874:	e000ed04 	.word	0xe000ed04

0800b878 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b082      	sub	sp, #8
 800b87c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b87e:	2300      	movs	r3, #0
 800b880:	607b      	str	r3, [r7, #4]
 800b882:	e00c      	b.n	800b89e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b884:	687a      	ldr	r2, [r7, #4]
 800b886:	4613      	mov	r3, r2
 800b888:	009b      	lsls	r3, r3, #2
 800b88a:	4413      	add	r3, r2
 800b88c:	009b      	lsls	r3, r3, #2
 800b88e:	4a12      	ldr	r2, [pc, #72]	@ (800b8d8 <prvInitialiseTaskLists+0x60>)
 800b890:	4413      	add	r3, r2
 800b892:	4618      	mov	r0, r3
 800b894:	f7fe fc4e 	bl	800a134 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	3301      	adds	r3, #1
 800b89c:	607b      	str	r3, [r7, #4]
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2b06      	cmp	r3, #6
 800b8a2:	d9ef      	bls.n	800b884 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b8a4:	480d      	ldr	r0, [pc, #52]	@ (800b8dc <prvInitialiseTaskLists+0x64>)
 800b8a6:	f7fe fc45 	bl	800a134 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b8aa:	480d      	ldr	r0, [pc, #52]	@ (800b8e0 <prvInitialiseTaskLists+0x68>)
 800b8ac:	f7fe fc42 	bl	800a134 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b8b0:	480c      	ldr	r0, [pc, #48]	@ (800b8e4 <prvInitialiseTaskLists+0x6c>)
 800b8b2:	f7fe fc3f 	bl	800a134 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b8b6:	480c      	ldr	r0, [pc, #48]	@ (800b8e8 <prvInitialiseTaskLists+0x70>)
 800b8b8:	f7fe fc3c 	bl	800a134 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b8bc:	480b      	ldr	r0, [pc, #44]	@ (800b8ec <prvInitialiseTaskLists+0x74>)
 800b8be:	f7fe fc39 	bl	800a134 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b8c2:	4b0b      	ldr	r3, [pc, #44]	@ (800b8f0 <prvInitialiseTaskLists+0x78>)
 800b8c4:	4a05      	ldr	r2, [pc, #20]	@ (800b8dc <prvInitialiseTaskLists+0x64>)
 800b8c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b8c8:	4b0a      	ldr	r3, [pc, #40]	@ (800b8f4 <prvInitialiseTaskLists+0x7c>)
 800b8ca:	4a05      	ldr	r2, [pc, #20]	@ (800b8e0 <prvInitialiseTaskLists+0x68>)
 800b8cc:	601a      	str	r2, [r3, #0]
}
 800b8ce:	bf00      	nop
 800b8d0:	3708      	adds	r7, #8
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	200005fc 	.word	0x200005fc
 800b8dc:	20000688 	.word	0x20000688
 800b8e0:	2000069c 	.word	0x2000069c
 800b8e4:	200006b8 	.word	0x200006b8
 800b8e8:	200006cc 	.word	0x200006cc
 800b8ec:	200006e4 	.word	0x200006e4
 800b8f0:	200006b0 	.word	0x200006b0
 800b8f4:	200006b4 	.word	0x200006b4

0800b8f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b082      	sub	sp, #8
 800b8fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b8fe:	e019      	b.n	800b934 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b900:	f000 fbb4 	bl	800c06c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800b904:	4b10      	ldr	r3, [pc, #64]	@ (800b948 <prvCheckTasksWaitingTermination+0x50>)
 800b906:	68db      	ldr	r3, [r3, #12]
 800b908:	68db      	ldr	r3, [r3, #12]
 800b90a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	3304      	adds	r3, #4
 800b910:	4618      	mov	r0, r3
 800b912:	f7fe fc95 	bl	800a240 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b916:	4b0d      	ldr	r3, [pc, #52]	@ (800b94c <prvCheckTasksWaitingTermination+0x54>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	3b01      	subs	r3, #1
 800b91c:	4a0b      	ldr	r2, [pc, #44]	@ (800b94c <prvCheckTasksWaitingTermination+0x54>)
 800b91e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b920:	4b0b      	ldr	r3, [pc, #44]	@ (800b950 <prvCheckTasksWaitingTermination+0x58>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	3b01      	subs	r3, #1
 800b926:	4a0a      	ldr	r2, [pc, #40]	@ (800b950 <prvCheckTasksWaitingTermination+0x58>)
 800b928:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b92a:	f000 fbcf 	bl	800c0cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f000 f810 	bl	800b954 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b934:	4b06      	ldr	r3, [pc, #24]	@ (800b950 <prvCheckTasksWaitingTermination+0x58>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d1e1      	bne.n	800b900 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b93c:	bf00      	nop
 800b93e:	bf00      	nop
 800b940:	3708      	adds	r7, #8
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
 800b946:	bf00      	nop
 800b948:	200006cc 	.word	0x200006cc
 800b94c:	200006f8 	.word	0x200006f8
 800b950:	200006e0 	.word	0x200006e0

0800b954 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b954:	b580      	push	{r7, lr}
 800b956:	b084      	sub	sp, #16
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b962:	2b00      	cmp	r3, #0
 800b964:	d108      	bne.n	800b978 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b96a:	4618      	mov	r0, r3
 800b96c:	f000 fd48 	bl	800c400 <vPortFree>
				vPortFree( pxTCB );
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f000 fd45 	bl	800c400 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b976:	e019      	b.n	800b9ac <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b97e:	2b01      	cmp	r3, #1
 800b980:	d103      	bne.n	800b98a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 fd3c 	bl	800c400 <vPortFree>
	}
 800b988:	e010      	b.n	800b9ac <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b990:	2b02      	cmp	r3, #2
 800b992:	d00b      	beq.n	800b9ac <prvDeleteTCB+0x58>
	__asm volatile
 800b994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b998:	f383 8811 	msr	BASEPRI, r3
 800b99c:	f3bf 8f6f 	isb	sy
 800b9a0:	f3bf 8f4f 	dsb	sy
 800b9a4:	60fb      	str	r3, [r7, #12]
}
 800b9a6:	bf00      	nop
 800b9a8:	bf00      	nop
 800b9aa:	e7fd      	b.n	800b9a8 <prvDeleteTCB+0x54>
	}
 800b9ac:	bf00      	nop
 800b9ae:	3710      	adds	r7, #16
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b083      	sub	sp, #12
 800b9b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b9ba:	4b0e      	ldr	r3, [pc, #56]	@ (800b9f4 <prvResetNextTaskUnblockTime+0x40>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d101      	bne.n	800b9c8 <prvResetNextTaskUnblockTime+0x14>
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	e000      	b.n	800b9ca <prvResetNextTaskUnblockTime+0x16>
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d004      	beq.n	800b9d8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b9ce:	4b0a      	ldr	r3, [pc, #40]	@ (800b9f8 <prvResetNextTaskUnblockTime+0x44>)
 800b9d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b9d4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b9d6:	e008      	b.n	800b9ea <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b9d8:	4b06      	ldr	r3, [pc, #24]	@ (800b9f4 <prvResetNextTaskUnblockTime+0x40>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	68db      	ldr	r3, [r3, #12]
 800b9de:	68db      	ldr	r3, [r3, #12]
 800b9e0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	685b      	ldr	r3, [r3, #4]
 800b9e6:	4a04      	ldr	r2, [pc, #16]	@ (800b9f8 <prvResetNextTaskUnblockTime+0x44>)
 800b9e8:	6013      	str	r3, [r2, #0]
}
 800b9ea:	bf00      	nop
 800b9ec:	370c      	adds	r7, #12
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bc80      	pop	{r7}
 800b9f2:	4770      	bx	lr
 800b9f4:	200006b0 	.word	0x200006b0
 800b9f8:	20000718 	.word	0x20000718

0800b9fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b083      	sub	sp, #12
 800ba00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ba02:	4b0b      	ldr	r3, [pc, #44]	@ (800ba30 <xTaskGetSchedulerState+0x34>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d102      	bne.n	800ba10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	607b      	str	r3, [r7, #4]
 800ba0e:	e008      	b.n	800ba22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba10:	4b08      	ldr	r3, [pc, #32]	@ (800ba34 <xTaskGetSchedulerState+0x38>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d102      	bne.n	800ba1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ba18:	2302      	movs	r3, #2
 800ba1a:	607b      	str	r3, [r7, #4]
 800ba1c:	e001      	b.n	800ba22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ba22:	687b      	ldr	r3, [r7, #4]
	}
 800ba24:	4618      	mov	r0, r3
 800ba26:	370c      	adds	r7, #12
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bc80      	pop	{r7}
 800ba2c:	4770      	bx	lr
 800ba2e:	bf00      	nop
 800ba30:	20000704 	.word	0x20000704
 800ba34:	20000720 	.word	0x20000720

0800ba38 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ba44:	2300      	movs	r3, #0
 800ba46:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d06e      	beq.n	800bb2c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba52:	4b39      	ldr	r3, [pc, #228]	@ (800bb38 <xTaskPriorityInherit+0x100>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d25e      	bcs.n	800bb1a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	699b      	ldr	r3, [r3, #24]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	db06      	blt.n	800ba72 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba64:	4b34      	ldr	r3, [pc, #208]	@ (800bb38 <xTaskPriorityInherit+0x100>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba6a:	f1c3 0207 	rsb	r2, r3, #7
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	6959      	ldr	r1, [r3, #20]
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba7a:	4613      	mov	r3, r2
 800ba7c:	009b      	lsls	r3, r3, #2
 800ba7e:	4413      	add	r3, r2
 800ba80:	009b      	lsls	r3, r3, #2
 800ba82:	4a2e      	ldr	r2, [pc, #184]	@ (800bb3c <xTaskPriorityInherit+0x104>)
 800ba84:	4413      	add	r3, r2
 800ba86:	4299      	cmp	r1, r3
 800ba88:	d101      	bne.n	800ba8e <xTaskPriorityInherit+0x56>
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	e000      	b.n	800ba90 <xTaskPriorityInherit+0x58>
 800ba8e:	2300      	movs	r3, #0
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d03a      	beq.n	800bb0a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	3304      	adds	r3, #4
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f7fe fbd1 	bl	800a240 <uxListRemove>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d115      	bne.n	800bad0 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800baa8:	4924      	ldr	r1, [pc, #144]	@ (800bb3c <xTaskPriorityInherit+0x104>)
 800baaa:	4613      	mov	r3, r2
 800baac:	009b      	lsls	r3, r3, #2
 800baae:	4413      	add	r3, r2
 800bab0:	009b      	lsls	r3, r3, #2
 800bab2:	440b      	add	r3, r1
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d10a      	bne.n	800bad0 <xTaskPriorityInherit+0x98>
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800babe:	2201      	movs	r2, #1
 800bac0:	fa02 f303 	lsl.w	r3, r2, r3
 800bac4:	43da      	mvns	r2, r3
 800bac6:	4b1e      	ldr	r3, [pc, #120]	@ (800bb40 <xTaskPriorityInherit+0x108>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	4013      	ands	r3, r2
 800bacc:	4a1c      	ldr	r2, [pc, #112]	@ (800bb40 <xTaskPriorityInherit+0x108>)
 800bace:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bad0:	4b19      	ldr	r3, [pc, #100]	@ (800bb38 <xTaskPriorityInherit+0x100>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bade:	2201      	movs	r2, #1
 800bae0:	409a      	lsls	r2, r3
 800bae2:	4b17      	ldr	r3, [pc, #92]	@ (800bb40 <xTaskPriorityInherit+0x108>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	4313      	orrs	r3, r2
 800bae8:	4a15      	ldr	r2, [pc, #84]	@ (800bb40 <xTaskPriorityInherit+0x108>)
 800baea:	6013      	str	r3, [r2, #0]
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800baf0:	4613      	mov	r3, r2
 800baf2:	009b      	lsls	r3, r3, #2
 800baf4:	4413      	add	r3, r2
 800baf6:	009b      	lsls	r3, r3, #2
 800baf8:	4a10      	ldr	r2, [pc, #64]	@ (800bb3c <xTaskPriorityInherit+0x104>)
 800bafa:	441a      	add	r2, r3
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	3304      	adds	r3, #4
 800bb00:	4619      	mov	r1, r3
 800bb02:	4610      	mov	r0, r2
 800bb04:	f7fe fb41 	bl	800a18a <vListInsertEnd>
 800bb08:	e004      	b.n	800bb14 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bb0a:	4b0b      	ldr	r3, [pc, #44]	@ (800bb38 <xTaskPriorityInherit+0x100>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bb14:	2301      	movs	r3, #1
 800bb16:	60fb      	str	r3, [r7, #12]
 800bb18:	e008      	b.n	800bb2c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bb1a:	68bb      	ldr	r3, [r7, #8]
 800bb1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bb1e:	4b06      	ldr	r3, [pc, #24]	@ (800bb38 <xTaskPriorityInherit+0x100>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d201      	bcs.n	800bb2c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bb28:	2301      	movs	r3, #1
 800bb2a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
	}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3710      	adds	r7, #16
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}
 800bb36:	bf00      	nop
 800bb38:	200005f8 	.word	0x200005f8
 800bb3c:	200005fc 	.word	0x200005fc
 800bb40:	20000700 	.word	0x20000700

0800bb44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b086      	sub	sp, #24
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bb50:	2300      	movs	r3, #0
 800bb52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d070      	beq.n	800bc3c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bb5a:	4b3b      	ldr	r3, [pc, #236]	@ (800bc48 <xTaskPriorityDisinherit+0x104>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	693a      	ldr	r2, [r7, #16]
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d00b      	beq.n	800bb7c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800bb64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb68:	f383 8811 	msr	BASEPRI, r3
 800bb6c:	f3bf 8f6f 	isb	sy
 800bb70:	f3bf 8f4f 	dsb	sy
 800bb74:	60fb      	str	r3, [r7, #12]
}
 800bb76:	bf00      	nop
 800bb78:	bf00      	nop
 800bb7a:	e7fd      	b.n	800bb78 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d10b      	bne.n	800bb9c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800bb84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb88:	f383 8811 	msr	BASEPRI, r3
 800bb8c:	f3bf 8f6f 	isb	sy
 800bb90:	f3bf 8f4f 	dsb	sy
 800bb94:	60bb      	str	r3, [r7, #8]
}
 800bb96:	bf00      	nop
 800bb98:	bf00      	nop
 800bb9a:	e7fd      	b.n	800bb98 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bba0:	1e5a      	subs	r2, r3, #1
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbae:	429a      	cmp	r2, r3
 800bbb0:	d044      	beq.n	800bc3c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d140      	bne.n	800bc3c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	3304      	adds	r3, #4
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f7fe fb3e 	bl	800a240 <uxListRemove>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d115      	bne.n	800bbf6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbce:	491f      	ldr	r1, [pc, #124]	@ (800bc4c <xTaskPriorityDisinherit+0x108>)
 800bbd0:	4613      	mov	r3, r2
 800bbd2:	009b      	lsls	r3, r3, #2
 800bbd4:	4413      	add	r3, r2
 800bbd6:	009b      	lsls	r3, r3, #2
 800bbd8:	440b      	add	r3, r1
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d10a      	bne.n	800bbf6 <xTaskPriorityDisinherit+0xb2>
 800bbe0:	693b      	ldr	r3, [r7, #16]
 800bbe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbe4:	2201      	movs	r2, #1
 800bbe6:	fa02 f303 	lsl.w	r3, r2, r3
 800bbea:	43da      	mvns	r2, r3
 800bbec:	4b18      	ldr	r3, [pc, #96]	@ (800bc50 <xTaskPriorityDisinherit+0x10c>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	4013      	ands	r3, r2
 800bbf2:	4a17      	ldr	r2, [pc, #92]	@ (800bc50 <xTaskPriorityDisinherit+0x10c>)
 800bbf4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbfe:	693b      	ldr	r3, [r7, #16]
 800bc00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc02:	f1c3 0207 	rsb	r2, r3, #7
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc0e:	2201      	movs	r2, #1
 800bc10:	409a      	lsls	r2, r3
 800bc12:	4b0f      	ldr	r3, [pc, #60]	@ (800bc50 <xTaskPriorityDisinherit+0x10c>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	4313      	orrs	r3, r2
 800bc18:	4a0d      	ldr	r2, [pc, #52]	@ (800bc50 <xTaskPriorityDisinherit+0x10c>)
 800bc1a:	6013      	str	r3, [r2, #0]
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc20:	4613      	mov	r3, r2
 800bc22:	009b      	lsls	r3, r3, #2
 800bc24:	4413      	add	r3, r2
 800bc26:	009b      	lsls	r3, r3, #2
 800bc28:	4a08      	ldr	r2, [pc, #32]	@ (800bc4c <xTaskPriorityDisinherit+0x108>)
 800bc2a:	441a      	add	r2, r3
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	3304      	adds	r3, #4
 800bc30:	4619      	mov	r1, r3
 800bc32:	4610      	mov	r0, r2
 800bc34:	f7fe faa9 	bl	800a18a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bc38:	2301      	movs	r3, #1
 800bc3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bc3c:	697b      	ldr	r3, [r7, #20]
	}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	3718      	adds	r7, #24
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}
 800bc46:	bf00      	nop
 800bc48:	200005f8 	.word	0x200005f8
 800bc4c:	200005fc 	.word	0x200005fc
 800bc50:	20000700 	.word	0x20000700

0800bc54 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b088      	sub	sp, #32
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
 800bc5c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bc62:	2301      	movs	r3, #1
 800bc64:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	f000 808a 	beq.w	800bd82 <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bc6e:	69bb      	ldr	r3, [r7, #24]
 800bc70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d10b      	bne.n	800bc8e <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800bc76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc7a:	f383 8811 	msr	BASEPRI, r3
 800bc7e:	f3bf 8f6f 	isb	sy
 800bc82:	f3bf 8f4f 	dsb	sy
 800bc86:	60fb      	str	r3, [r7, #12]
}
 800bc88:	bf00      	nop
 800bc8a:	bf00      	nop
 800bc8c:	e7fd      	b.n	800bc8a <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bc8e:	69bb      	ldr	r3, [r7, #24]
 800bc90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc92:	683a      	ldr	r2, [r7, #0]
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d902      	bls.n	800bc9e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	61fb      	str	r3, [r7, #28]
 800bc9c:	e002      	b.n	800bca4 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bc9e:	69bb      	ldr	r3, [r7, #24]
 800bca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bca2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bca4:	69bb      	ldr	r3, [r7, #24]
 800bca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bca8:	69fa      	ldr	r2, [r7, #28]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d069      	beq.n	800bd82 <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bcae:	69bb      	ldr	r3, [r7, #24]
 800bcb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bcb2:	697a      	ldr	r2, [r7, #20]
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d164      	bne.n	800bd82 <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bcb8:	4b34      	ldr	r3, [pc, #208]	@ (800bd8c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	69ba      	ldr	r2, [r7, #24]
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	d10b      	bne.n	800bcda <vTaskPriorityDisinheritAfterTimeout+0x86>
	__asm volatile
 800bcc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcc6:	f383 8811 	msr	BASEPRI, r3
 800bcca:	f3bf 8f6f 	isb	sy
 800bcce:	f3bf 8f4f 	dsb	sy
 800bcd2:	60bb      	str	r3, [r7, #8]
}
 800bcd4:	bf00      	nop
 800bcd6:	bf00      	nop
 800bcd8:	e7fd      	b.n	800bcd6 <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bcda:	69bb      	ldr	r3, [r7, #24]
 800bcdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcde:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bce0:	69bb      	ldr	r3, [r7, #24]
 800bce2:	69fa      	ldr	r2, [r7, #28]
 800bce4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bce6:	69bb      	ldr	r3, [r7, #24]
 800bce8:	699b      	ldr	r3, [r3, #24]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	db04      	blt.n	800bcf8 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bcee:	69fb      	ldr	r3, [r7, #28]
 800bcf0:	f1c3 0207 	rsb	r2, r3, #7
 800bcf4:	69bb      	ldr	r3, [r7, #24]
 800bcf6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bcf8:	69bb      	ldr	r3, [r7, #24]
 800bcfa:	6959      	ldr	r1, [r3, #20]
 800bcfc:	693a      	ldr	r2, [r7, #16]
 800bcfe:	4613      	mov	r3, r2
 800bd00:	009b      	lsls	r3, r3, #2
 800bd02:	4413      	add	r3, r2
 800bd04:	009b      	lsls	r3, r3, #2
 800bd06:	4a22      	ldr	r2, [pc, #136]	@ (800bd90 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800bd08:	4413      	add	r3, r2
 800bd0a:	4299      	cmp	r1, r3
 800bd0c:	d101      	bne.n	800bd12 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 800bd0e:	2301      	movs	r3, #1
 800bd10:	e000      	b.n	800bd14 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 800bd12:	2300      	movs	r3, #0
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d034      	beq.n	800bd82 <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd18:	69bb      	ldr	r3, [r7, #24]
 800bd1a:	3304      	adds	r3, #4
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f7fe fa8f 	bl	800a240 <uxListRemove>
 800bd22:	4603      	mov	r3, r0
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d115      	bne.n	800bd54 <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bd28:	69bb      	ldr	r3, [r7, #24]
 800bd2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd2c:	4918      	ldr	r1, [pc, #96]	@ (800bd90 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800bd2e:	4613      	mov	r3, r2
 800bd30:	009b      	lsls	r3, r3, #2
 800bd32:	4413      	add	r3, r2
 800bd34:	009b      	lsls	r3, r3, #2
 800bd36:	440b      	add	r3, r1
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d10a      	bne.n	800bd54 <vTaskPriorityDisinheritAfterTimeout+0x100>
 800bd3e:	69bb      	ldr	r3, [r7, #24]
 800bd40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd42:	2201      	movs	r2, #1
 800bd44:	fa02 f303 	lsl.w	r3, r2, r3
 800bd48:	43da      	mvns	r2, r3
 800bd4a:	4b12      	ldr	r3, [pc, #72]	@ (800bd94 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	4013      	ands	r3, r2
 800bd50:	4a10      	ldr	r2, [pc, #64]	@ (800bd94 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 800bd52:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bd54:	69bb      	ldr	r3, [r7, #24]
 800bd56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd58:	2201      	movs	r2, #1
 800bd5a:	409a      	lsls	r2, r3
 800bd5c:	4b0d      	ldr	r3, [pc, #52]	@ (800bd94 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	4313      	orrs	r3, r2
 800bd62:	4a0c      	ldr	r2, [pc, #48]	@ (800bd94 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 800bd64:	6013      	str	r3, [r2, #0]
 800bd66:	69bb      	ldr	r3, [r7, #24]
 800bd68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd6a:	4613      	mov	r3, r2
 800bd6c:	009b      	lsls	r3, r3, #2
 800bd6e:	4413      	add	r3, r2
 800bd70:	009b      	lsls	r3, r3, #2
 800bd72:	4a07      	ldr	r2, [pc, #28]	@ (800bd90 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800bd74:	441a      	add	r2, r3
 800bd76:	69bb      	ldr	r3, [r7, #24]
 800bd78:	3304      	adds	r3, #4
 800bd7a:	4619      	mov	r1, r3
 800bd7c:	4610      	mov	r0, r2
 800bd7e:	f7fe fa04 	bl	800a18a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bd82:	bf00      	nop
 800bd84:	3720      	adds	r7, #32
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}
 800bd8a:	bf00      	nop
 800bd8c:	200005f8 	.word	0x200005f8
 800bd90:	200005fc 	.word	0x200005fc
 800bd94:	20000700 	.word	0x20000700

0800bd98 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800bd98:	b480      	push	{r7}
 800bd9a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bd9c:	4b07      	ldr	r3, [pc, #28]	@ (800bdbc <pvTaskIncrementMutexHeldCount+0x24>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d004      	beq.n	800bdae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bda4:	4b05      	ldr	r3, [pc, #20]	@ (800bdbc <pvTaskIncrementMutexHeldCount+0x24>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bdaa:	3201      	adds	r2, #1
 800bdac:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800bdae:	4b03      	ldr	r3, [pc, #12]	@ (800bdbc <pvTaskIncrementMutexHeldCount+0x24>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
	}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bc80      	pop	{r7}
 800bdb8:	4770      	bx	lr
 800bdba:	bf00      	nop
 800bdbc:	200005f8 	.word	0x200005f8

0800bdc0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b084      	sub	sp, #16
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
 800bdc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bdca:	4b29      	ldr	r3, [pc, #164]	@ (800be70 <prvAddCurrentTaskToDelayedList+0xb0>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bdd0:	4b28      	ldr	r3, [pc, #160]	@ (800be74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	3304      	adds	r3, #4
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f7fe fa32 	bl	800a240 <uxListRemove>
 800bddc:	4603      	mov	r3, r0
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d10b      	bne.n	800bdfa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800bde2:	4b24      	ldr	r3, [pc, #144]	@ (800be74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bde8:	2201      	movs	r2, #1
 800bdea:	fa02 f303 	lsl.w	r3, r2, r3
 800bdee:	43da      	mvns	r2, r3
 800bdf0:	4b21      	ldr	r3, [pc, #132]	@ (800be78 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	4013      	ands	r3, r2
 800bdf6:	4a20      	ldr	r2, [pc, #128]	@ (800be78 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bdf8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800be00:	d10a      	bne.n	800be18 <prvAddCurrentTaskToDelayedList+0x58>
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d007      	beq.n	800be18 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be08:	4b1a      	ldr	r3, [pc, #104]	@ (800be74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	3304      	adds	r3, #4
 800be0e:	4619      	mov	r1, r3
 800be10:	481a      	ldr	r0, [pc, #104]	@ (800be7c <prvAddCurrentTaskToDelayedList+0xbc>)
 800be12:	f7fe f9ba 	bl	800a18a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800be16:	e026      	b.n	800be66 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800be18:	68fa      	ldr	r2, [r7, #12]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	4413      	add	r3, r2
 800be1e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800be20:	4b14      	ldr	r3, [pc, #80]	@ (800be74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	68ba      	ldr	r2, [r7, #8]
 800be26:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800be28:	68ba      	ldr	r2, [r7, #8]
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d209      	bcs.n	800be44 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be30:	4b13      	ldr	r3, [pc, #76]	@ (800be80 <prvAddCurrentTaskToDelayedList+0xc0>)
 800be32:	681a      	ldr	r2, [r3, #0]
 800be34:	4b0f      	ldr	r3, [pc, #60]	@ (800be74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	3304      	adds	r3, #4
 800be3a:	4619      	mov	r1, r3
 800be3c:	4610      	mov	r0, r2
 800be3e:	f7fe f9c7 	bl	800a1d0 <vListInsert>
}
 800be42:	e010      	b.n	800be66 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be44:	4b0f      	ldr	r3, [pc, #60]	@ (800be84 <prvAddCurrentTaskToDelayedList+0xc4>)
 800be46:	681a      	ldr	r2, [r3, #0]
 800be48:	4b0a      	ldr	r3, [pc, #40]	@ (800be74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	3304      	adds	r3, #4
 800be4e:	4619      	mov	r1, r3
 800be50:	4610      	mov	r0, r2
 800be52:	f7fe f9bd 	bl	800a1d0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800be56:	4b0c      	ldr	r3, [pc, #48]	@ (800be88 <prvAddCurrentTaskToDelayedList+0xc8>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	68ba      	ldr	r2, [r7, #8]
 800be5c:	429a      	cmp	r2, r3
 800be5e:	d202      	bcs.n	800be66 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800be60:	4a09      	ldr	r2, [pc, #36]	@ (800be88 <prvAddCurrentTaskToDelayedList+0xc8>)
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	6013      	str	r3, [r2, #0]
}
 800be66:	bf00      	nop
 800be68:	3710      	adds	r7, #16
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
 800be6e:	bf00      	nop
 800be70:	200006fc 	.word	0x200006fc
 800be74:	200005f8 	.word	0x200005f8
 800be78:	20000700 	.word	0x20000700
 800be7c:	200006e4 	.word	0x200006e4
 800be80:	200006b4 	.word	0x200006b4
 800be84:	200006b0 	.word	0x200006b0
 800be88:	20000718 	.word	0x20000718

0800be8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800be8c:	b480      	push	{r7}
 800be8e:	b085      	sub	sp, #20
 800be90:	af00      	add	r7, sp, #0
 800be92:	60f8      	str	r0, [r7, #12]
 800be94:	60b9      	str	r1, [r7, #8]
 800be96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	3b04      	subs	r3, #4
 800be9c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bea4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	3b04      	subs	r3, #4
 800beaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	f023 0201 	bic.w	r2, r3, #1
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	3b04      	subs	r3, #4
 800beba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bebc:	4a08      	ldr	r2, [pc, #32]	@ (800bee0 <pxPortInitialiseStack+0x54>)
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	3b14      	subs	r3, #20
 800bec6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bec8:	687a      	ldr	r2, [r7, #4]
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	3b20      	subs	r3, #32
 800bed2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bed4:	68fb      	ldr	r3, [r7, #12]
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3714      	adds	r7, #20
 800beda:	46bd      	mov	sp, r7
 800bedc:	bc80      	pop	{r7}
 800bede:	4770      	bx	lr
 800bee0:	0800bee5 	.word	0x0800bee5

0800bee4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bee4:	b480      	push	{r7}
 800bee6:	b085      	sub	sp, #20
 800bee8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800beea:	2300      	movs	r3, #0
 800beec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800beee:	4b12      	ldr	r3, [pc, #72]	@ (800bf38 <prvTaskExitError+0x54>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bef6:	d00b      	beq.n	800bf10 <prvTaskExitError+0x2c>
	__asm volatile
 800bef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800befc:	f383 8811 	msr	BASEPRI, r3
 800bf00:	f3bf 8f6f 	isb	sy
 800bf04:	f3bf 8f4f 	dsb	sy
 800bf08:	60fb      	str	r3, [r7, #12]
}
 800bf0a:	bf00      	nop
 800bf0c:	bf00      	nop
 800bf0e:	e7fd      	b.n	800bf0c <prvTaskExitError+0x28>
	__asm volatile
 800bf10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf14:	f383 8811 	msr	BASEPRI, r3
 800bf18:	f3bf 8f6f 	isb	sy
 800bf1c:	f3bf 8f4f 	dsb	sy
 800bf20:	60bb      	str	r3, [r7, #8]
}
 800bf22:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bf24:	bf00      	nop
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d0fc      	beq.n	800bf26 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bf2c:	bf00      	nop
 800bf2e:	bf00      	nop
 800bf30:	3714      	adds	r7, #20
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bc80      	pop	{r7}
 800bf36:	4770      	bx	lr
 800bf38:	20000124 	.word	0x20000124
 800bf3c:	00000000 	.word	0x00000000

0800bf40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bf40:	4b07      	ldr	r3, [pc, #28]	@ (800bf60 <pxCurrentTCBConst2>)
 800bf42:	6819      	ldr	r1, [r3, #0]
 800bf44:	6808      	ldr	r0, [r1, #0]
 800bf46:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800bf4a:	f380 8809 	msr	PSP, r0
 800bf4e:	f3bf 8f6f 	isb	sy
 800bf52:	f04f 0000 	mov.w	r0, #0
 800bf56:	f380 8811 	msr	BASEPRI, r0
 800bf5a:	f04e 0e0d 	orr.w	lr, lr, #13
 800bf5e:	4770      	bx	lr

0800bf60 <pxCurrentTCBConst2>:
 800bf60:	200005f8 	.word	0x200005f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bf64:	bf00      	nop
 800bf66:	bf00      	nop

0800bf68 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800bf68:	4806      	ldr	r0, [pc, #24]	@ (800bf84 <prvPortStartFirstTask+0x1c>)
 800bf6a:	6800      	ldr	r0, [r0, #0]
 800bf6c:	6800      	ldr	r0, [r0, #0]
 800bf6e:	f380 8808 	msr	MSP, r0
 800bf72:	b662      	cpsie	i
 800bf74:	b661      	cpsie	f
 800bf76:	f3bf 8f4f 	dsb	sy
 800bf7a:	f3bf 8f6f 	isb	sy
 800bf7e:	df00      	svc	0
 800bf80:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bf82:	bf00      	nop
 800bf84:	e000ed08 	.word	0xe000ed08

0800bf88 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b084      	sub	sp, #16
 800bf8c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bf8e:	4b32      	ldr	r3, [pc, #200]	@ (800c058 <xPortStartScheduler+0xd0>)
 800bf90:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	781b      	ldrb	r3, [r3, #0]
 800bf96:	b2db      	uxtb	r3, r3
 800bf98:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	22ff      	movs	r2, #255	@ 0xff
 800bf9e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	781b      	ldrb	r3, [r3, #0]
 800bfa4:	b2db      	uxtb	r3, r3
 800bfa6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bfa8:	78fb      	ldrb	r3, [r7, #3]
 800bfaa:	b2db      	uxtb	r3, r3
 800bfac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bfb0:	b2da      	uxtb	r2, r3
 800bfb2:	4b2a      	ldr	r3, [pc, #168]	@ (800c05c <xPortStartScheduler+0xd4>)
 800bfb4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bfb6:	4b2a      	ldr	r3, [pc, #168]	@ (800c060 <xPortStartScheduler+0xd8>)
 800bfb8:	2207      	movs	r2, #7
 800bfba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bfbc:	e009      	b.n	800bfd2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800bfbe:	4b28      	ldr	r3, [pc, #160]	@ (800c060 <xPortStartScheduler+0xd8>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	3b01      	subs	r3, #1
 800bfc4:	4a26      	ldr	r2, [pc, #152]	@ (800c060 <xPortStartScheduler+0xd8>)
 800bfc6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bfc8:	78fb      	ldrb	r3, [r7, #3]
 800bfca:	b2db      	uxtb	r3, r3
 800bfcc:	005b      	lsls	r3, r3, #1
 800bfce:	b2db      	uxtb	r3, r3
 800bfd0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bfd2:	78fb      	ldrb	r3, [r7, #3]
 800bfd4:	b2db      	uxtb	r3, r3
 800bfd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bfda:	2b80      	cmp	r3, #128	@ 0x80
 800bfdc:	d0ef      	beq.n	800bfbe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bfde:	4b20      	ldr	r3, [pc, #128]	@ (800c060 <xPortStartScheduler+0xd8>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f1c3 0307 	rsb	r3, r3, #7
 800bfe6:	2b04      	cmp	r3, #4
 800bfe8:	d00b      	beq.n	800c002 <xPortStartScheduler+0x7a>
	__asm volatile
 800bfea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfee:	f383 8811 	msr	BASEPRI, r3
 800bff2:	f3bf 8f6f 	isb	sy
 800bff6:	f3bf 8f4f 	dsb	sy
 800bffa:	60bb      	str	r3, [r7, #8]
}
 800bffc:	bf00      	nop
 800bffe:	bf00      	nop
 800c000:	e7fd      	b.n	800bffe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c002:	4b17      	ldr	r3, [pc, #92]	@ (800c060 <xPortStartScheduler+0xd8>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	021b      	lsls	r3, r3, #8
 800c008:	4a15      	ldr	r2, [pc, #84]	@ (800c060 <xPortStartScheduler+0xd8>)
 800c00a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c00c:	4b14      	ldr	r3, [pc, #80]	@ (800c060 <xPortStartScheduler+0xd8>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c014:	4a12      	ldr	r2, [pc, #72]	@ (800c060 <xPortStartScheduler+0xd8>)
 800c016:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	b2da      	uxtb	r2, r3
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c020:	4b10      	ldr	r3, [pc, #64]	@ (800c064 <xPortStartScheduler+0xdc>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	4a0f      	ldr	r2, [pc, #60]	@ (800c064 <xPortStartScheduler+0xdc>)
 800c026:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c02a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c02c:	4b0d      	ldr	r3, [pc, #52]	@ (800c064 <xPortStartScheduler+0xdc>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	4a0c      	ldr	r2, [pc, #48]	@ (800c064 <xPortStartScheduler+0xdc>)
 800c032:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c036:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c038:	f000 f8b8 	bl	800c1ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c03c:	4b0a      	ldr	r3, [pc, #40]	@ (800c068 <xPortStartScheduler+0xe0>)
 800c03e:	2200      	movs	r2, #0
 800c040:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c042:	f7ff ff91 	bl	800bf68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c046:	f7ff fa93 	bl	800b570 <vTaskSwitchContext>
	prvTaskExitError();
 800c04a:	f7ff ff4b 	bl	800bee4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c04e:	2300      	movs	r3, #0
}
 800c050:	4618      	mov	r0, r3
 800c052:	3710      	adds	r7, #16
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}
 800c058:	e000e400 	.word	0xe000e400
 800c05c:	20000724 	.word	0x20000724
 800c060:	20000728 	.word	0x20000728
 800c064:	e000ed20 	.word	0xe000ed20
 800c068:	20000124 	.word	0x20000124

0800c06c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c06c:	b480      	push	{r7}
 800c06e:	b083      	sub	sp, #12
 800c070:	af00      	add	r7, sp, #0
	__asm volatile
 800c072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c076:	f383 8811 	msr	BASEPRI, r3
 800c07a:	f3bf 8f6f 	isb	sy
 800c07e:	f3bf 8f4f 	dsb	sy
 800c082:	607b      	str	r3, [r7, #4]
}
 800c084:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c086:	4b0f      	ldr	r3, [pc, #60]	@ (800c0c4 <vPortEnterCritical+0x58>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	3301      	adds	r3, #1
 800c08c:	4a0d      	ldr	r2, [pc, #52]	@ (800c0c4 <vPortEnterCritical+0x58>)
 800c08e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c090:	4b0c      	ldr	r3, [pc, #48]	@ (800c0c4 <vPortEnterCritical+0x58>)
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	2b01      	cmp	r3, #1
 800c096:	d110      	bne.n	800c0ba <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c098:	4b0b      	ldr	r3, [pc, #44]	@ (800c0c8 <vPortEnterCritical+0x5c>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	b2db      	uxtb	r3, r3
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d00b      	beq.n	800c0ba <vPortEnterCritical+0x4e>
	__asm volatile
 800c0a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0a6:	f383 8811 	msr	BASEPRI, r3
 800c0aa:	f3bf 8f6f 	isb	sy
 800c0ae:	f3bf 8f4f 	dsb	sy
 800c0b2:	603b      	str	r3, [r7, #0]
}
 800c0b4:	bf00      	nop
 800c0b6:	bf00      	nop
 800c0b8:	e7fd      	b.n	800c0b6 <vPortEnterCritical+0x4a>
	}
}
 800c0ba:	bf00      	nop
 800c0bc:	370c      	adds	r7, #12
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bc80      	pop	{r7}
 800c0c2:	4770      	bx	lr
 800c0c4:	20000124 	.word	0x20000124
 800c0c8:	e000ed04 	.word	0xe000ed04

0800c0cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	b083      	sub	sp, #12
 800c0d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c0d2:	4b12      	ldr	r3, [pc, #72]	@ (800c11c <vPortExitCritical+0x50>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d10b      	bne.n	800c0f2 <vPortExitCritical+0x26>
	__asm volatile
 800c0da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0de:	f383 8811 	msr	BASEPRI, r3
 800c0e2:	f3bf 8f6f 	isb	sy
 800c0e6:	f3bf 8f4f 	dsb	sy
 800c0ea:	607b      	str	r3, [r7, #4]
}
 800c0ec:	bf00      	nop
 800c0ee:	bf00      	nop
 800c0f0:	e7fd      	b.n	800c0ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c0f2:	4b0a      	ldr	r3, [pc, #40]	@ (800c11c <vPortExitCritical+0x50>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	3b01      	subs	r3, #1
 800c0f8:	4a08      	ldr	r2, [pc, #32]	@ (800c11c <vPortExitCritical+0x50>)
 800c0fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c0fc:	4b07      	ldr	r3, [pc, #28]	@ (800c11c <vPortExitCritical+0x50>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d105      	bne.n	800c110 <vPortExitCritical+0x44>
 800c104:	2300      	movs	r3, #0
 800c106:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	f383 8811 	msr	BASEPRI, r3
}
 800c10e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c110:	bf00      	nop
 800c112:	370c      	adds	r7, #12
 800c114:	46bd      	mov	sp, r7
 800c116:	bc80      	pop	{r7}
 800c118:	4770      	bx	lr
 800c11a:	bf00      	nop
 800c11c:	20000124 	.word	0x20000124

0800c120 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c120:	f3ef 8009 	mrs	r0, PSP
 800c124:	f3bf 8f6f 	isb	sy
 800c128:	4b0d      	ldr	r3, [pc, #52]	@ (800c160 <pxCurrentTCBConst>)
 800c12a:	681a      	ldr	r2, [r3, #0]
 800c12c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c130:	6010      	str	r0, [r2, #0]
 800c132:	e92d 4008 	stmdb	sp!, {r3, lr}
 800c136:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c13a:	f380 8811 	msr	BASEPRI, r0
 800c13e:	f7ff fa17 	bl	800b570 <vTaskSwitchContext>
 800c142:	f04f 0000 	mov.w	r0, #0
 800c146:	f380 8811 	msr	BASEPRI, r0
 800c14a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c14e:	6819      	ldr	r1, [r3, #0]
 800c150:	6808      	ldr	r0, [r1, #0]
 800c152:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c156:	f380 8809 	msr	PSP, r0
 800c15a:	f3bf 8f6f 	isb	sy
 800c15e:	4770      	bx	lr

0800c160 <pxCurrentTCBConst>:
 800c160:	200005f8 	.word	0x200005f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c164:	bf00      	nop
 800c166:	bf00      	nop

0800c168 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b082      	sub	sp, #8
 800c16c:	af00      	add	r7, sp, #0
	__asm volatile
 800c16e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c172:	f383 8811 	msr	BASEPRI, r3
 800c176:	f3bf 8f6f 	isb	sy
 800c17a:	f3bf 8f4f 	dsb	sy
 800c17e:	607b      	str	r3, [r7, #4]
}
 800c180:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c182:	f7ff f937 	bl	800b3f4 <xTaskIncrementTick>
 800c186:	4603      	mov	r3, r0
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d003      	beq.n	800c194 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c18c:	4b06      	ldr	r3, [pc, #24]	@ (800c1a8 <SysTick_Handler+0x40>)
 800c18e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c192:	601a      	str	r2, [r3, #0]
 800c194:	2300      	movs	r3, #0
 800c196:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	f383 8811 	msr	BASEPRI, r3
}
 800c19e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c1a0:	bf00      	nop
 800c1a2:	3708      	adds	r7, #8
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}
 800c1a8:	e000ed04 	.word	0xe000ed04

0800c1ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c1ac:	b480      	push	{r7}
 800c1ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c1b0:	4b0a      	ldr	r3, [pc, #40]	@ (800c1dc <vPortSetupTimerInterrupt+0x30>)
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c1b6:	4b0a      	ldr	r3, [pc, #40]	@ (800c1e0 <vPortSetupTimerInterrupt+0x34>)
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c1bc:	4b09      	ldr	r3, [pc, #36]	@ (800c1e4 <vPortSetupTimerInterrupt+0x38>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	4a09      	ldr	r2, [pc, #36]	@ (800c1e8 <vPortSetupTimerInterrupt+0x3c>)
 800c1c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c1c6:	099b      	lsrs	r3, r3, #6
 800c1c8:	4a08      	ldr	r2, [pc, #32]	@ (800c1ec <vPortSetupTimerInterrupt+0x40>)
 800c1ca:	3b01      	subs	r3, #1
 800c1cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c1ce:	4b03      	ldr	r3, [pc, #12]	@ (800c1dc <vPortSetupTimerInterrupt+0x30>)
 800c1d0:	2207      	movs	r2, #7
 800c1d2:	601a      	str	r2, [r3, #0]
}
 800c1d4:	bf00      	nop
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bc80      	pop	{r7}
 800c1da:	4770      	bx	lr
 800c1dc:	e000e010 	.word	0xe000e010
 800c1e0:	e000e018 	.word	0xe000e018
 800c1e4:	20000008 	.word	0x20000008
 800c1e8:	10624dd3 	.word	0x10624dd3
 800c1ec:	e000e014 	.word	0xe000e014

0800c1f0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c1f0:	b480      	push	{r7}
 800c1f2:	b085      	sub	sp, #20
 800c1f4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c1f6:	f3ef 8305 	mrs	r3, IPSR
 800c1fa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	2b0f      	cmp	r3, #15
 800c200:	d915      	bls.n	800c22e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c202:	4a17      	ldr	r2, [pc, #92]	@ (800c260 <vPortValidateInterruptPriority+0x70>)
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	4413      	add	r3, r2
 800c208:	781b      	ldrb	r3, [r3, #0]
 800c20a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c20c:	4b15      	ldr	r3, [pc, #84]	@ (800c264 <vPortValidateInterruptPriority+0x74>)
 800c20e:	781b      	ldrb	r3, [r3, #0]
 800c210:	7afa      	ldrb	r2, [r7, #11]
 800c212:	429a      	cmp	r2, r3
 800c214:	d20b      	bcs.n	800c22e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c21a:	f383 8811 	msr	BASEPRI, r3
 800c21e:	f3bf 8f6f 	isb	sy
 800c222:	f3bf 8f4f 	dsb	sy
 800c226:	607b      	str	r3, [r7, #4]
}
 800c228:	bf00      	nop
 800c22a:	bf00      	nop
 800c22c:	e7fd      	b.n	800c22a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c22e:	4b0e      	ldr	r3, [pc, #56]	@ (800c268 <vPortValidateInterruptPriority+0x78>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c236:	4b0d      	ldr	r3, [pc, #52]	@ (800c26c <vPortValidateInterruptPriority+0x7c>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	429a      	cmp	r2, r3
 800c23c:	d90b      	bls.n	800c256 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c23e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c242:	f383 8811 	msr	BASEPRI, r3
 800c246:	f3bf 8f6f 	isb	sy
 800c24a:	f3bf 8f4f 	dsb	sy
 800c24e:	603b      	str	r3, [r7, #0]
}
 800c250:	bf00      	nop
 800c252:	bf00      	nop
 800c254:	e7fd      	b.n	800c252 <vPortValidateInterruptPriority+0x62>
	}
 800c256:	bf00      	nop
 800c258:	3714      	adds	r7, #20
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bc80      	pop	{r7}
 800c25e:	4770      	bx	lr
 800c260:	e000e3f0 	.word	0xe000e3f0
 800c264:	20000724 	.word	0x20000724
 800c268:	e000ed0c 	.word	0xe000ed0c
 800c26c:	20000728 	.word	0x20000728

0800c270 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b08a      	sub	sp, #40	@ 0x28
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c278:	2300      	movs	r3, #0
 800c27a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c27c:	f7ff f80e 	bl	800b29c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c280:	4b5a      	ldr	r3, [pc, #360]	@ (800c3ec <pvPortMalloc+0x17c>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d101      	bne.n	800c28c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c288:	f000 f916 	bl	800c4b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c28c:	4b58      	ldr	r3, [pc, #352]	@ (800c3f0 <pvPortMalloc+0x180>)
 800c28e:	681a      	ldr	r2, [r3, #0]
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	4013      	ands	r3, r2
 800c294:	2b00      	cmp	r3, #0
 800c296:	f040 8090 	bne.w	800c3ba <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d01e      	beq.n	800c2de <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c2a0:	2208      	movs	r2, #8
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	4413      	add	r3, r2
 800c2a6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f003 0307 	and.w	r3, r3, #7
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d015      	beq.n	800c2de <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f023 0307 	bic.w	r3, r3, #7
 800c2b8:	3308      	adds	r3, #8
 800c2ba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f003 0307 	and.w	r3, r3, #7
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d00b      	beq.n	800c2de <pvPortMalloc+0x6e>
	__asm volatile
 800c2c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2ca:	f383 8811 	msr	BASEPRI, r3
 800c2ce:	f3bf 8f6f 	isb	sy
 800c2d2:	f3bf 8f4f 	dsb	sy
 800c2d6:	617b      	str	r3, [r7, #20]
}
 800c2d8:	bf00      	nop
 800c2da:	bf00      	nop
 800c2dc:	e7fd      	b.n	800c2da <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d06a      	beq.n	800c3ba <pvPortMalloc+0x14a>
 800c2e4:	4b43      	ldr	r3, [pc, #268]	@ (800c3f4 <pvPortMalloc+0x184>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	687a      	ldr	r2, [r7, #4]
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	d865      	bhi.n	800c3ba <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c2ee:	4b42      	ldr	r3, [pc, #264]	@ (800c3f8 <pvPortMalloc+0x188>)
 800c2f0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c2f2:	4b41      	ldr	r3, [pc, #260]	@ (800c3f8 <pvPortMalloc+0x188>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2f8:	e004      	b.n	800c304 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c2fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2fc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c2fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c306:	685b      	ldr	r3, [r3, #4]
 800c308:	687a      	ldr	r2, [r7, #4]
 800c30a:	429a      	cmp	r2, r3
 800c30c:	d903      	bls.n	800c316 <pvPortMalloc+0xa6>
 800c30e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d1f1      	bne.n	800c2fa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c316:	4b35      	ldr	r3, [pc, #212]	@ (800c3ec <pvPortMalloc+0x17c>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c31c:	429a      	cmp	r2, r3
 800c31e:	d04c      	beq.n	800c3ba <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c320:	6a3b      	ldr	r3, [r7, #32]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	2208      	movs	r2, #8
 800c326:	4413      	add	r3, r2
 800c328:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c32a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c32c:	681a      	ldr	r2, [r3, #0]
 800c32e:	6a3b      	ldr	r3, [r7, #32]
 800c330:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c334:	685a      	ldr	r2, [r3, #4]
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	1ad2      	subs	r2, r2, r3
 800c33a:	2308      	movs	r3, #8
 800c33c:	005b      	lsls	r3, r3, #1
 800c33e:	429a      	cmp	r2, r3
 800c340:	d920      	bls.n	800c384 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c342:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	4413      	add	r3, r2
 800c348:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c34a:	69bb      	ldr	r3, [r7, #24]
 800c34c:	f003 0307 	and.w	r3, r3, #7
 800c350:	2b00      	cmp	r3, #0
 800c352:	d00b      	beq.n	800c36c <pvPortMalloc+0xfc>
	__asm volatile
 800c354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c358:	f383 8811 	msr	BASEPRI, r3
 800c35c:	f3bf 8f6f 	isb	sy
 800c360:	f3bf 8f4f 	dsb	sy
 800c364:	613b      	str	r3, [r7, #16]
}
 800c366:	bf00      	nop
 800c368:	bf00      	nop
 800c36a:	e7fd      	b.n	800c368 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c36c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c36e:	685a      	ldr	r2, [r3, #4]
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	1ad2      	subs	r2, r2, r3
 800c374:	69bb      	ldr	r3, [r7, #24]
 800c376:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c37a:	687a      	ldr	r2, [r7, #4]
 800c37c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c37e:	69b8      	ldr	r0, [r7, #24]
 800c380:	f000 f8fc 	bl	800c57c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c384:	4b1b      	ldr	r3, [pc, #108]	@ (800c3f4 <pvPortMalloc+0x184>)
 800c386:	681a      	ldr	r2, [r3, #0]
 800c388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c38a:	685b      	ldr	r3, [r3, #4]
 800c38c:	1ad3      	subs	r3, r2, r3
 800c38e:	4a19      	ldr	r2, [pc, #100]	@ (800c3f4 <pvPortMalloc+0x184>)
 800c390:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c392:	4b18      	ldr	r3, [pc, #96]	@ (800c3f4 <pvPortMalloc+0x184>)
 800c394:	681a      	ldr	r2, [r3, #0]
 800c396:	4b19      	ldr	r3, [pc, #100]	@ (800c3fc <pvPortMalloc+0x18c>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	429a      	cmp	r2, r3
 800c39c:	d203      	bcs.n	800c3a6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c39e:	4b15      	ldr	r3, [pc, #84]	@ (800c3f4 <pvPortMalloc+0x184>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	4a16      	ldr	r2, [pc, #88]	@ (800c3fc <pvPortMalloc+0x18c>)
 800c3a4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c3a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3a8:	685a      	ldr	r2, [r3, #4]
 800c3aa:	4b11      	ldr	r3, [pc, #68]	@ (800c3f0 <pvPortMalloc+0x180>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	431a      	orrs	r2, r3
 800c3b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3b2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c3b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c3ba:	f7fe ff7d 	bl	800b2b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c3be:	69fb      	ldr	r3, [r7, #28]
 800c3c0:	f003 0307 	and.w	r3, r3, #7
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d00b      	beq.n	800c3e0 <pvPortMalloc+0x170>
	__asm volatile
 800c3c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3cc:	f383 8811 	msr	BASEPRI, r3
 800c3d0:	f3bf 8f6f 	isb	sy
 800c3d4:	f3bf 8f4f 	dsb	sy
 800c3d8:	60fb      	str	r3, [r7, #12]
}
 800c3da:	bf00      	nop
 800c3dc:	bf00      	nop
 800c3de:	e7fd      	b.n	800c3dc <pvPortMalloc+0x16c>
	return pvReturn;
 800c3e0:	69fb      	ldr	r3, [r7, #28]
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3728      	adds	r7, #40	@ 0x28
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}
 800c3ea:	bf00      	nop
 800c3ec:	20001334 	.word	0x20001334
 800c3f0:	20001340 	.word	0x20001340
 800c3f4:	20001338 	.word	0x20001338
 800c3f8:	2000132c 	.word	0x2000132c
 800c3fc:	2000133c 	.word	0x2000133c

0800c400 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b086      	sub	sp, #24
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d04a      	beq.n	800c4a8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c412:	2308      	movs	r3, #8
 800c414:	425b      	negs	r3, r3
 800c416:	697a      	ldr	r2, [r7, #20]
 800c418:	4413      	add	r3, r2
 800c41a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c420:	693b      	ldr	r3, [r7, #16]
 800c422:	685a      	ldr	r2, [r3, #4]
 800c424:	4b22      	ldr	r3, [pc, #136]	@ (800c4b0 <vPortFree+0xb0>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	4013      	ands	r3, r2
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d10b      	bne.n	800c446 <vPortFree+0x46>
	__asm volatile
 800c42e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c432:	f383 8811 	msr	BASEPRI, r3
 800c436:	f3bf 8f6f 	isb	sy
 800c43a:	f3bf 8f4f 	dsb	sy
 800c43e:	60fb      	str	r3, [r7, #12]
}
 800c440:	bf00      	nop
 800c442:	bf00      	nop
 800c444:	e7fd      	b.n	800c442 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c446:	693b      	ldr	r3, [r7, #16]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d00b      	beq.n	800c466 <vPortFree+0x66>
	__asm volatile
 800c44e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c452:	f383 8811 	msr	BASEPRI, r3
 800c456:	f3bf 8f6f 	isb	sy
 800c45a:	f3bf 8f4f 	dsb	sy
 800c45e:	60bb      	str	r3, [r7, #8]
}
 800c460:	bf00      	nop
 800c462:	bf00      	nop
 800c464:	e7fd      	b.n	800c462 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	685a      	ldr	r2, [r3, #4]
 800c46a:	4b11      	ldr	r3, [pc, #68]	@ (800c4b0 <vPortFree+0xb0>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	4013      	ands	r3, r2
 800c470:	2b00      	cmp	r3, #0
 800c472:	d019      	beq.n	800c4a8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c474:	693b      	ldr	r3, [r7, #16]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d115      	bne.n	800c4a8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	685a      	ldr	r2, [r3, #4]
 800c480:	4b0b      	ldr	r3, [pc, #44]	@ (800c4b0 <vPortFree+0xb0>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	43db      	mvns	r3, r3
 800c486:	401a      	ands	r2, r3
 800c488:	693b      	ldr	r3, [r7, #16]
 800c48a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c48c:	f7fe ff06 	bl	800b29c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c490:	693b      	ldr	r3, [r7, #16]
 800c492:	685a      	ldr	r2, [r3, #4]
 800c494:	4b07      	ldr	r3, [pc, #28]	@ (800c4b4 <vPortFree+0xb4>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	4413      	add	r3, r2
 800c49a:	4a06      	ldr	r2, [pc, #24]	@ (800c4b4 <vPortFree+0xb4>)
 800c49c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c49e:	6938      	ldr	r0, [r7, #16]
 800c4a0:	f000 f86c 	bl	800c57c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c4a4:	f7fe ff08 	bl	800b2b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c4a8:	bf00      	nop
 800c4aa:	3718      	adds	r7, #24
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}
 800c4b0:	20001340 	.word	0x20001340
 800c4b4:	20001338 	.word	0x20001338

0800c4b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c4b8:	b480      	push	{r7}
 800c4ba:	b085      	sub	sp, #20
 800c4bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c4be:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800c4c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c4c4:	4b27      	ldr	r3, [pc, #156]	@ (800c564 <prvHeapInit+0xac>)
 800c4c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	f003 0307 	and.w	r3, r3, #7
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d00c      	beq.n	800c4ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	3307      	adds	r3, #7
 800c4d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	f023 0307 	bic.w	r3, r3, #7
 800c4de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c4e0:	68ba      	ldr	r2, [r7, #8]
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	1ad3      	subs	r3, r2, r3
 800c4e6:	4a1f      	ldr	r2, [pc, #124]	@ (800c564 <prvHeapInit+0xac>)
 800c4e8:	4413      	add	r3, r2
 800c4ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c4f0:	4a1d      	ldr	r2, [pc, #116]	@ (800c568 <prvHeapInit+0xb0>)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c4f6:	4b1c      	ldr	r3, [pc, #112]	@ (800c568 <prvHeapInit+0xb0>)
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	68ba      	ldr	r2, [r7, #8]
 800c500:	4413      	add	r3, r2
 800c502:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c504:	2208      	movs	r2, #8
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	1a9b      	subs	r3, r3, r2
 800c50a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	f023 0307 	bic.w	r3, r3, #7
 800c512:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	4a15      	ldr	r2, [pc, #84]	@ (800c56c <prvHeapInit+0xb4>)
 800c518:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c51a:	4b14      	ldr	r3, [pc, #80]	@ (800c56c <prvHeapInit+0xb4>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	2200      	movs	r2, #0
 800c520:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c522:	4b12      	ldr	r3, [pc, #72]	@ (800c56c <prvHeapInit+0xb4>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	2200      	movs	r2, #0
 800c528:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	68fa      	ldr	r2, [r7, #12]
 800c532:	1ad2      	subs	r2, r2, r3
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c538:	4b0c      	ldr	r3, [pc, #48]	@ (800c56c <prvHeapInit+0xb4>)
 800c53a:	681a      	ldr	r2, [r3, #0]
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	685b      	ldr	r3, [r3, #4]
 800c544:	4a0a      	ldr	r2, [pc, #40]	@ (800c570 <prvHeapInit+0xb8>)
 800c546:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	685b      	ldr	r3, [r3, #4]
 800c54c:	4a09      	ldr	r2, [pc, #36]	@ (800c574 <prvHeapInit+0xbc>)
 800c54e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c550:	4b09      	ldr	r3, [pc, #36]	@ (800c578 <prvHeapInit+0xc0>)
 800c552:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c556:	601a      	str	r2, [r3, #0]
}
 800c558:	bf00      	nop
 800c55a:	3714      	adds	r7, #20
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bc80      	pop	{r7}
 800c560:	4770      	bx	lr
 800c562:	bf00      	nop
 800c564:	2000072c 	.word	0x2000072c
 800c568:	2000132c 	.word	0x2000132c
 800c56c:	20001334 	.word	0x20001334
 800c570:	2000133c 	.word	0x2000133c
 800c574:	20001338 	.word	0x20001338
 800c578:	20001340 	.word	0x20001340

0800c57c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c57c:	b480      	push	{r7}
 800c57e:	b085      	sub	sp, #20
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c584:	4b27      	ldr	r3, [pc, #156]	@ (800c624 <prvInsertBlockIntoFreeList+0xa8>)
 800c586:	60fb      	str	r3, [r7, #12]
 800c588:	e002      	b.n	800c590 <prvInsertBlockIntoFreeList+0x14>
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	60fb      	str	r3, [r7, #12]
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	687a      	ldr	r2, [r7, #4]
 800c596:	429a      	cmp	r2, r3
 800c598:	d8f7      	bhi.n	800c58a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	68ba      	ldr	r2, [r7, #8]
 800c5a4:	4413      	add	r3, r2
 800c5a6:	687a      	ldr	r2, [r7, #4]
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	d108      	bne.n	800c5be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	685a      	ldr	r2, [r3, #4]
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	685b      	ldr	r3, [r3, #4]
 800c5b4:	441a      	add	r2, r3
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	685b      	ldr	r3, [r3, #4]
 800c5c6:	68ba      	ldr	r2, [r7, #8]
 800c5c8:	441a      	add	r2, r3
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d118      	bne.n	800c604 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	681a      	ldr	r2, [r3, #0]
 800c5d6:	4b14      	ldr	r3, [pc, #80]	@ (800c628 <prvInsertBlockIntoFreeList+0xac>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	429a      	cmp	r2, r3
 800c5dc:	d00d      	beq.n	800c5fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	685a      	ldr	r2, [r3, #4]
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	685b      	ldr	r3, [r3, #4]
 800c5e8:	441a      	add	r2, r3
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	681a      	ldr	r2, [r3, #0]
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	601a      	str	r2, [r3, #0]
 800c5f8:	e008      	b.n	800c60c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c5fa:	4b0b      	ldr	r3, [pc, #44]	@ (800c628 <prvInsertBlockIntoFreeList+0xac>)
 800c5fc:	681a      	ldr	r2, [r3, #0]
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	601a      	str	r2, [r3, #0]
 800c602:	e003      	b.n	800c60c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	681a      	ldr	r2, [r3, #0]
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c60c:	68fa      	ldr	r2, [r7, #12]
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	429a      	cmp	r2, r3
 800c612:	d002      	beq.n	800c61a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	687a      	ldr	r2, [r7, #4]
 800c618:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c61a:	bf00      	nop
 800c61c:	3714      	adds	r7, #20
 800c61e:	46bd      	mov	sp, r7
 800c620:	bc80      	pop	{r7}
 800c622:	4770      	bx	lr
 800c624:	2000132c 	.word	0x2000132c
 800c628:	20001334 	.word	0x20001334

0800c62c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c630:	2200      	movs	r2, #0
 800c632:	4912      	ldr	r1, [pc, #72]	@ (800c67c <MX_USB_DEVICE_Init+0x50>)
 800c634:	4812      	ldr	r0, [pc, #72]	@ (800c680 <MX_USB_DEVICE_Init+0x54>)
 800c636:	f7fc fbba 	bl	8008dae <USBD_Init>
 800c63a:	4603      	mov	r3, r0
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d001      	beq.n	800c644 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c640:	f7f4 f942 	bl	80008c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c644:	490f      	ldr	r1, [pc, #60]	@ (800c684 <MX_USB_DEVICE_Init+0x58>)
 800c646:	480e      	ldr	r0, [pc, #56]	@ (800c680 <MX_USB_DEVICE_Init+0x54>)
 800c648:	f7fc fbdc 	bl	8008e04 <USBD_RegisterClass>
 800c64c:	4603      	mov	r3, r0
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d001      	beq.n	800c656 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c652:	f7f4 f939 	bl	80008c8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c656:	490c      	ldr	r1, [pc, #48]	@ (800c688 <MX_USB_DEVICE_Init+0x5c>)
 800c658:	4809      	ldr	r0, [pc, #36]	@ (800c680 <MX_USB_DEVICE_Init+0x54>)
 800c65a:	f7fc fb0d 	bl	8008c78 <USBD_CDC_RegisterInterface>
 800c65e:	4603      	mov	r3, r0
 800c660:	2b00      	cmp	r3, #0
 800c662:	d001      	beq.n	800c668 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c664:	f7f4 f930 	bl	80008c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c668:	4805      	ldr	r0, [pc, #20]	@ (800c680 <MX_USB_DEVICE_Init+0x54>)
 800c66a:	f7fc fbe4 	bl	8008e36 <USBD_Start>
 800c66e:	4603      	mov	r3, r0
 800c670:	2b00      	cmp	r3, #0
 800c672:	d001      	beq.n	800c678 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c674:	f7f4 f928 	bl	80008c8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c678:	bf00      	nop
 800c67a:	bd80      	pop	{r7, pc}
 800c67c:	20000138 	.word	0x20000138
 800c680:	20001344 	.word	0x20001344
 800c684:	20000020 	.word	0x20000020
 800c688:	20000128 	.word	0x20000128

0800c68c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c690:	2200      	movs	r2, #0
 800c692:	4905      	ldr	r1, [pc, #20]	@ (800c6a8 <CDC_Init_FS+0x1c>)
 800c694:	4805      	ldr	r0, [pc, #20]	@ (800c6ac <CDC_Init_FS+0x20>)
 800c696:	f7fc fb05 	bl	8008ca4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c69a:	4905      	ldr	r1, [pc, #20]	@ (800c6b0 <CDC_Init_FS+0x24>)
 800c69c:	4803      	ldr	r0, [pc, #12]	@ (800c6ac <CDC_Init_FS+0x20>)
 800c69e:	f7fc fb1a 	bl	8008cd6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c6a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	bd80      	pop	{r7, pc}
 800c6a8:	20001a08 	.word	0x20001a08
 800c6ac:	20001344 	.word	0x20001344
 800c6b0:	20001608 	.word	0x20001608

0800c6b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c6b4:	b480      	push	{r7}
 800c6b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c6b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	bc80      	pop	{r7}
 800c6c0:	4770      	bx	lr
	...

0800c6c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b083      	sub	sp, #12
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	6039      	str	r1, [r7, #0]
 800c6ce:	71fb      	strb	r3, [r7, #7]
 800c6d0:	4613      	mov	r3, r2
 800c6d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c6d4:	79fb      	ldrb	r3, [r7, #7]
 800c6d6:	2b23      	cmp	r3, #35	@ 0x23
 800c6d8:	d84a      	bhi.n	800c770 <CDC_Control_FS+0xac>
 800c6da:	a201      	add	r2, pc, #4	@ (adr r2, 800c6e0 <CDC_Control_FS+0x1c>)
 800c6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6e0:	0800c771 	.word	0x0800c771
 800c6e4:	0800c771 	.word	0x0800c771
 800c6e8:	0800c771 	.word	0x0800c771
 800c6ec:	0800c771 	.word	0x0800c771
 800c6f0:	0800c771 	.word	0x0800c771
 800c6f4:	0800c771 	.word	0x0800c771
 800c6f8:	0800c771 	.word	0x0800c771
 800c6fc:	0800c771 	.word	0x0800c771
 800c700:	0800c771 	.word	0x0800c771
 800c704:	0800c771 	.word	0x0800c771
 800c708:	0800c771 	.word	0x0800c771
 800c70c:	0800c771 	.word	0x0800c771
 800c710:	0800c771 	.word	0x0800c771
 800c714:	0800c771 	.word	0x0800c771
 800c718:	0800c771 	.word	0x0800c771
 800c71c:	0800c771 	.word	0x0800c771
 800c720:	0800c771 	.word	0x0800c771
 800c724:	0800c771 	.word	0x0800c771
 800c728:	0800c771 	.word	0x0800c771
 800c72c:	0800c771 	.word	0x0800c771
 800c730:	0800c771 	.word	0x0800c771
 800c734:	0800c771 	.word	0x0800c771
 800c738:	0800c771 	.word	0x0800c771
 800c73c:	0800c771 	.word	0x0800c771
 800c740:	0800c771 	.word	0x0800c771
 800c744:	0800c771 	.word	0x0800c771
 800c748:	0800c771 	.word	0x0800c771
 800c74c:	0800c771 	.word	0x0800c771
 800c750:	0800c771 	.word	0x0800c771
 800c754:	0800c771 	.word	0x0800c771
 800c758:	0800c771 	.word	0x0800c771
 800c75c:	0800c771 	.word	0x0800c771
 800c760:	0800c771 	.word	0x0800c771
 800c764:	0800c771 	.word	0x0800c771
 800c768:	0800c771 	.word	0x0800c771
 800c76c:	0800c771 	.word	0x0800c771
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c770:	bf00      	nop
  }

  return (USBD_OK);
 800c772:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c774:	4618      	mov	r0, r3
 800c776:	370c      	adds	r7, #12
 800c778:	46bd      	mov	sp, r7
 800c77a:	bc80      	pop	{r7}
 800c77c:	4770      	bx	lr
 800c77e:	bf00      	nop

0800c780 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b082      	sub	sp, #8
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
 800c788:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c78a:	6879      	ldr	r1, [r7, #4]
 800c78c:	4819      	ldr	r0, [pc, #100]	@ (800c7f4 <CDC_Receive_FS+0x74>)
 800c78e:	f7fc faa2 	bl	8008cd6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c792:	4818      	ldr	r0, [pc, #96]	@ (800c7f4 <CDC_Receive_FS+0x74>)
 800c794:	f7fc fae1 	bl	8008d5a <USBD_CDC_ReceivePacket>

  switch(Buf[0])
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	781b      	ldrb	r3, [r3, #0]
 800c79c:	2b9d      	cmp	r3, #157	@ 0x9d
 800c79e:	d020      	beq.n	800c7e2 <CDC_Receive_FS+0x62>
 800c7a0:	2b9d      	cmp	r3, #157	@ 0x9d
 800c7a2:	dc20      	bgt.n	800c7e6 <CDC_Receive_FS+0x66>
 800c7a4:	2b99      	cmp	r3, #153	@ 0x99
 800c7a6:	d006      	beq.n	800c7b6 <CDC_Receive_FS+0x36>
 800c7a8:	2b99      	cmp	r3, #153	@ 0x99
 800c7aa:	dc1c      	bgt.n	800c7e6 <CDC_Receive_FS+0x66>
 800c7ac:	2b61      	cmp	r3, #97	@ 0x61
 800c7ae:	d014      	beq.n	800c7da <CDC_Receive_FS+0x5a>
 800c7b0:	2b90      	cmp	r3, #144	@ 0x90
 800c7b2:	d004      	beq.n	800c7be <CDC_Receive_FS+0x3e>
	  // Debugging purpose: check USB validity
	  xTaskADC_flag = true;
	  break;

  default:
	  break;
 800c7b4:	e017      	b.n	800c7e6 <CDC_Receive_FS+0x66>
	  xTaskI2C_flag = true;
 800c7b6:	4b10      	ldr	r3, [pc, #64]	@ (800c7f8 <CDC_Receive_FS+0x78>)
 800c7b8:	2201      	movs	r2, #1
 800c7ba:	701a      	strb	r2, [r3, #0]
	  break;
 800c7bc:	e014      	b.n	800c7e8 <CDC_Receive_FS+0x68>
	  configure_peripheral_context(Buf[1] & 0x3F, Buf[2]);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	3301      	adds	r3, #1
 800c7c2:	781b      	ldrb	r3, [r3, #0]
 800c7c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c7c8:	b2da      	uxtb	r2, r3
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	3302      	adds	r3, #2
 800c7ce:	781b      	ldrb	r3, [r3, #0]
 800c7d0:	4619      	mov	r1, r3
 800c7d2:	4610      	mov	r0, r2
 800c7d4:	f000 f814 	bl	800c800 <configure_peripheral_context>
	  break;
 800c7d8:	e006      	b.n	800c7e8 <CDC_Receive_FS+0x68>
	  xTaskADC_flag = true;
 800c7da:	4b08      	ldr	r3, [pc, #32]	@ (800c7fc <CDC_Receive_FS+0x7c>)
 800c7dc:	2201      	movs	r2, #1
 800c7de:	701a      	strb	r2, [r3, #0]
	  break;
 800c7e0:	e002      	b.n	800c7e8 <CDC_Receive_FS+0x68>
	  break;
 800c7e2:	bf00      	nop
 800c7e4:	e000      	b.n	800c7e8 <CDC_Receive_FS+0x68>
	  break;
 800c7e6:	bf00      	nop
  }

  return (USBD_OK);
 800c7e8:	2300      	movs	r3, #0
}
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	3708      	adds	r7, #8
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd80      	pop	{r7, pc}
 800c7f2:	bf00      	nop
 800c7f4:	20001344 	.word	0x20001344
 800c7f8:	20000000 	.word	0x20000000
 800c7fc:	200005a1 	.word	0x200005a1

0800c800 <configure_peripheral_context>:



void configure_peripheral_context(uint8_t config_message, uint8_t config_data)
{
 800c800:	b480      	push	{r7}
 800c802:	b083      	sub	sp, #12
 800c804:	af00      	add	r7, sp, #0
 800c806:	4603      	mov	r3, r0
 800c808:	460a      	mov	r2, r1
 800c80a:	71fb      	strb	r3, [r7, #7]
 800c80c:	4613      	mov	r3, r2
 800c80e:	71bb      	strb	r3, [r7, #6]
	switch(config_message)
 800c810:	79fb      	ldrb	r3, [r7, #7]
 800c812:	2b32      	cmp	r3, #50	@ 0x32
 800c814:	f200 80e7 	bhi.w	800c9e6 <configure_peripheral_context+0x1e6>
 800c818:	a201      	add	r2, pc, #4	@ (adr r2, 800c820 <configure_peripheral_context+0x20>)
 800c81a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c81e:	bf00      	nop
 800c820:	0800c8ed 	.word	0x0800c8ed
 800c824:	0800c911 	.word	0x0800c911
 800c828:	0800c9e7 	.word	0x0800c9e7
 800c82c:	0800c9e7 	.word	0x0800c9e7
 800c830:	0800c937 	.word	0x0800c937
 800c834:	0800c951 	.word	0x0800c951
 800c838:	0800c9e7 	.word	0x0800c9e7
 800c83c:	0800c9e7 	.word	0x0800c9e7
 800c840:	0800c96b 	.word	0x0800c96b
 800c844:	0800c979 	.word	0x0800c979
 800c848:	0800c9e7 	.word	0x0800c9e7
 800c84c:	0800c9e7 	.word	0x0800c9e7
 800c850:	0800c9e7 	.word	0x0800c9e7
 800c854:	0800c9e7 	.word	0x0800c9e7
 800c858:	0800c9e7 	.word	0x0800c9e7
 800c85c:	0800c9e7 	.word	0x0800c9e7
 800c860:	0800c987 	.word	0x0800c987
 800c864:	0800c987 	.word	0x0800c987
 800c868:	0800c9e7 	.word	0x0800c9e7
 800c86c:	0800c9e7 	.word	0x0800c9e7
 800c870:	0800c9e7 	.word	0x0800c9e7
 800c874:	0800c9e7 	.word	0x0800c9e7
 800c878:	0800c9e7 	.word	0x0800c9e7
 800c87c:	0800c9e7 	.word	0x0800c9e7
 800c880:	0800c9e7 	.word	0x0800c9e7
 800c884:	0800c9e7 	.word	0x0800c9e7
 800c888:	0800c9e7 	.word	0x0800c9e7
 800c88c:	0800c9e7 	.word	0x0800c9e7
 800c890:	0800c9e7 	.word	0x0800c9e7
 800c894:	0800c9e7 	.word	0x0800c9e7
 800c898:	0800c9e7 	.word	0x0800c9e7
 800c89c:	0800c9e7 	.word	0x0800c9e7
 800c8a0:	0800c9a7 	.word	0x0800c9a7
 800c8a4:	0800c9a7 	.word	0x0800c9a7
 800c8a8:	0800c9e7 	.word	0x0800c9e7
 800c8ac:	0800c9e7 	.word	0x0800c9e7
 800c8b0:	0800c9e7 	.word	0x0800c9e7
 800c8b4:	0800c9e7 	.word	0x0800c9e7
 800c8b8:	0800c9e7 	.word	0x0800c9e7
 800c8bc:	0800c9e7 	.word	0x0800c9e7
 800c8c0:	0800c9e7 	.word	0x0800c9e7
 800c8c4:	0800c9e7 	.word	0x0800c9e7
 800c8c8:	0800c9e7 	.word	0x0800c9e7
 800c8cc:	0800c9e7 	.word	0x0800c9e7
 800c8d0:	0800c9e7 	.word	0x0800c9e7
 800c8d4:	0800c9e7 	.word	0x0800c9e7
 800c8d8:	0800c9e7 	.word	0x0800c9e7
 800c8dc:	0800c9e7 	.word	0x0800c9e7
 800c8e0:	0800c9c7 	.word	0x0800c9c7
 800c8e4:	0800c9c7 	.word	0x0800c9c7
 800c8e8:	0800c9e7 	.word	0x0800c9e7
	case '2':
		// Purely for debugging purposes
		break;
	case ((PWM<<4)|(TOGGLE_TASK<<2)|(PIN_CHANNEL1)):
		// Toggle PWM1
		xTaskPWM1_flag_toggle = !xTaskPWM1_flag_toggle;
 800c8ec:	4b41      	ldr	r3, [pc, #260]	@ (800c9f4 <configure_peripheral_context+0x1f4>)
 800c8ee:	781b      	ldrb	r3, [r3, #0]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	bf14      	ite	ne
 800c8f4:	2301      	movne	r3, #1
 800c8f6:	2300      	moveq	r3, #0
 800c8f8:	b2db      	uxtb	r3, r3
 800c8fa:	f083 0301 	eor.w	r3, r3, #1
 800c8fe:	b2db      	uxtb	r3, r3
 800c900:	f003 0301 	and.w	r3, r3, #1
 800c904:	b2da      	uxtb	r2, r3
 800c906:	4b3b      	ldr	r3, [pc, #236]	@ (800c9f4 <configure_peripheral_context+0x1f4>)
 800c908:	701a      	strb	r2, [r3, #0]
		xTaskPWM1_flag = true;
 800c90a:	4b3b      	ldr	r3, [pc, #236]	@ (800c9f8 <configure_peripheral_context+0x1f8>)
 800c90c:	2201      	movs	r2, #1
 800c90e:	701a      	strb	r2, [r3, #0]

	case ((PWM<<4)|(TOGGLE_TASK<<2)|(PIN_CHANNEL2)):
		// Toggle PWM2
		xTaskPWM2_flag_toggle = !xTaskPWM2_flag_toggle;
 800c910:	4b3a      	ldr	r3, [pc, #232]	@ (800c9fc <configure_peripheral_context+0x1fc>)
 800c912:	781b      	ldrb	r3, [r3, #0]
 800c914:	2b00      	cmp	r3, #0
 800c916:	bf14      	ite	ne
 800c918:	2301      	movne	r3, #1
 800c91a:	2300      	moveq	r3, #0
 800c91c:	b2db      	uxtb	r3, r3
 800c91e:	f083 0301 	eor.w	r3, r3, #1
 800c922:	b2db      	uxtb	r3, r3
 800c924:	f003 0301 	and.w	r3, r3, #1
 800c928:	b2da      	uxtb	r2, r3
 800c92a:	4b34      	ldr	r3, [pc, #208]	@ (800c9fc <configure_peripheral_context+0x1fc>)
 800c92c:	701a      	strb	r2, [r3, #0]
		xTaskPWM2_flag = true;
 800c92e:	4b34      	ldr	r3, [pc, #208]	@ (800ca00 <configure_peripheral_context+0x200>)
 800c930:	2201      	movs	r2, #1
 800c932:	701a      	strb	r2, [r3, #0]
		break;
 800c934:	e058      	b.n	800c9e8 <configure_peripheral_context+0x1e8>

	case ((PWM<<4)|(CONFIG_ATT1<<2)|(PIN_CHANNEL1)):
		// Change PWM frequency for PWM1
		pwm1_freq = config_data*config_data;
 800c936:	79bb      	ldrb	r3, [r7, #6]
 800c938:	b29b      	uxth	r3, r3
 800c93a:	79ba      	ldrb	r2, [r7, #6]
 800c93c:	b292      	uxth	r2, r2
 800c93e:	fb02 f303 	mul.w	r3, r2, r3
 800c942:	b29a      	uxth	r2, r3
 800c944:	4b2f      	ldr	r3, [pc, #188]	@ (800ca04 <configure_peripheral_context+0x204>)
 800c946:	801a      	strh	r2, [r3, #0]
		xTaskPWM1_flag = true;
 800c948:	4b2b      	ldr	r3, [pc, #172]	@ (800c9f8 <configure_peripheral_context+0x1f8>)
 800c94a:	2201      	movs	r2, #1
 800c94c:	701a      	strb	r2, [r3, #0]
		break;
 800c94e:	e04b      	b.n	800c9e8 <configure_peripheral_context+0x1e8>
	case ((PWM<<4)|(CONFIG_ATT1<<2)|(PIN_CHANNEL2)):
		// Change PWM frequency for PWM2
		pwm2_freq = config_data*config_data;
 800c950:	79bb      	ldrb	r3, [r7, #6]
 800c952:	b29b      	uxth	r3, r3
 800c954:	79ba      	ldrb	r2, [r7, #6]
 800c956:	b292      	uxth	r2, r2
 800c958:	fb02 f303 	mul.w	r3, r2, r3
 800c95c:	b29a      	uxth	r2, r3
 800c95e:	4b2a      	ldr	r3, [pc, #168]	@ (800ca08 <configure_peripheral_context+0x208>)
 800c960:	801a      	strh	r2, [r3, #0]
		xTaskPWM2_flag = true;
 800c962:	4b27      	ldr	r3, [pc, #156]	@ (800ca00 <configure_peripheral_context+0x200>)
 800c964:	2201      	movs	r2, #1
 800c966:	701a      	strb	r2, [r3, #0]
		break;
 800c968:	e03e      	b.n	800c9e8 <configure_peripheral_context+0x1e8>
	case ((PWM<<4)|(CONFIG_ATT2<<2)|(PIN_CHANNEL1)):
		// Change PWM duty-cycle for PWM1
		pwm1_duty = config_data;
 800c96a:	4a28      	ldr	r2, [pc, #160]	@ (800ca0c <configure_peripheral_context+0x20c>)
 800c96c:	79bb      	ldrb	r3, [r7, #6]
 800c96e:	7013      	strb	r3, [r2, #0]
		xTaskPWM1_flag = true;
 800c970:	4b21      	ldr	r3, [pc, #132]	@ (800c9f8 <configure_peripheral_context+0x1f8>)
 800c972:	2201      	movs	r2, #1
 800c974:	701a      	strb	r2, [r3, #0]
		break;
 800c976:	e037      	b.n	800c9e8 <configure_peripheral_context+0x1e8>
	case ((PWM<<4)|(CONFIG_ATT2<<2)|(PIN_CHANNEL2)):
		// Change PWM duty-cycle for PWM2
		pwm2_duty = config_data;
 800c978:	4a25      	ldr	r2, [pc, #148]	@ (800ca10 <configure_peripheral_context+0x210>)
 800c97a:	79bb      	ldrb	r3, [r7, #6]
 800c97c:	7013      	strb	r3, [r2, #0]
		xTaskPWM2_flag = true;
 800c97e:	4b20      	ldr	r3, [pc, #128]	@ (800ca00 <configure_peripheral_context+0x200>)
 800c980:	2201      	movs	r2, #1
 800c982:	701a      	strb	r2, [r3, #0]
		break;
 800c984:	e030      	b.n	800c9e8 <configure_peripheral_context+0x1e8>

	case ((PIO<<4)|(TOGGLE_TASK<<2)|(PIN_CHANNEL1)):
	case ((PIO<<4)|(TOGGLE_TASK<<2)|(PIN_CHANNEL2)):
		// Prevent PIO task from being executed
		xTaskPIO_flag = !xTaskPIO_flag;
 800c986:	4b23      	ldr	r3, [pc, #140]	@ (800ca14 <configure_peripheral_context+0x214>)
 800c988:	781b      	ldrb	r3, [r3, #0]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	bf14      	ite	ne
 800c98e:	2301      	movne	r3, #1
 800c990:	2300      	moveq	r3, #0
 800c992:	b2db      	uxtb	r3, r3
 800c994:	f083 0301 	eor.w	r3, r3, #1
 800c998:	b2db      	uxtb	r3, r3
 800c99a:	f003 0301 	and.w	r3, r3, #1
 800c99e:	b2da      	uxtb	r2, r3
 800c9a0:	4b1c      	ldr	r3, [pc, #112]	@ (800ca14 <configure_peripheral_context+0x214>)
 800c9a2:	701a      	strb	r2, [r3, #0]
		break;
 800c9a4:	e020      	b.n	800c9e8 <configure_peripheral_context+0x1e8>


	case ((ADC<<4)|(TOGGLE_TASK<<2)|(PIN_CHANNEL1)):
	case ((ADC<<4)|(TOGGLE_TASK<<2)|(PIN_CHANNEL2)):
		// Toggle whether ADC gets read to USB
		xTaskADC_flag = !xTaskADC_flag;
 800c9a6:	4b1c      	ldr	r3, [pc, #112]	@ (800ca18 <configure_peripheral_context+0x218>)
 800c9a8:	781b      	ldrb	r3, [r3, #0]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	bf14      	ite	ne
 800c9ae:	2301      	movne	r3, #1
 800c9b0:	2300      	moveq	r3, #0
 800c9b2:	b2db      	uxtb	r3, r3
 800c9b4:	f083 0301 	eor.w	r3, r3, #1
 800c9b8:	b2db      	uxtb	r3, r3
 800c9ba:	f003 0301 	and.w	r3, r3, #1
 800c9be:	b2da      	uxtb	r2, r3
 800c9c0:	4b15      	ldr	r3, [pc, #84]	@ (800ca18 <configure_peripheral_context+0x218>)
 800c9c2:	701a      	strb	r2, [r3, #0]

		break;
 800c9c4:	e010      	b.n	800c9e8 <configure_peripheral_context+0x1e8>
		break;

	case ((I2C<<4)|(TOGGLE_TASK<<2)|(PIN_CHANNEL1)):
	case ((I2C<<4)|(TOGGLE_TASK<<2)|(PIN_CHANNEL2)):
		// Toggles whether Host can send data to I2C device
		xTaskI2C_flag = !xTaskI2C_flag;
 800c9c6:	4b15      	ldr	r3, [pc, #84]	@ (800ca1c <configure_peripheral_context+0x21c>)
 800c9c8:	781b      	ldrb	r3, [r3, #0]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	bf14      	ite	ne
 800c9ce:	2301      	movne	r3, #1
 800c9d0:	2300      	moveq	r3, #0
 800c9d2:	b2db      	uxtb	r3, r3
 800c9d4:	f083 0301 	eor.w	r3, r3, #1
 800c9d8:	b2db      	uxtb	r3, r3
 800c9da:	f003 0301 	and.w	r3, r3, #1
 800c9de:	b2da      	uxtb	r2, r3
 800c9e0:	4b0e      	ldr	r3, [pc, #56]	@ (800ca1c <configure_peripheral_context+0x21c>)
 800c9e2:	701a      	strb	r2, [r3, #0]
		break;
 800c9e4:	e000      	b.n	800c9e8 <configure_peripheral_context+0x1e8>

	default:
		  break;
 800c9e6:	bf00      	nop
	}
}
 800c9e8:	bf00      	nop
 800c9ea:	370c      	adds	r7, #12
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bc80      	pop	{r7}
 800c9f0:	4770      	bx	lr
 800c9f2:	bf00      	nop
 800c9f4:	200005a4 	.word	0x200005a4
 800c9f8:	200005a2 	.word	0x200005a2
 800c9fc:	200005a5 	.word	0x200005a5
 800ca00:	200005a3 	.word	0x200005a3
 800ca04:	20000004 	.word	0x20000004
 800ca08:	20000006 	.word	0x20000006
 800ca0c:	20000001 	.word	0x20000001
 800ca10:	20000002 	.word	0x20000002
 800ca14:	200005a0 	.word	0x200005a0
 800ca18:	200005a1 	.word	0x200005a1
 800ca1c:	20000000 	.word	0x20000000

0800ca20 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b084      	sub	sp, #16
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
 800ca28:	460b      	mov	r3, r1
 800ca2a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ca30:	4b0d      	ldr	r3, [pc, #52]	@ (800ca68 <CDC_Transmit_FS+0x48>)
 800ca32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca36:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d001      	beq.n	800ca46 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ca42:	2301      	movs	r3, #1
 800ca44:	e00b      	b.n	800ca5e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ca46:	887b      	ldrh	r3, [r7, #2]
 800ca48:	461a      	mov	r2, r3
 800ca4a:	6879      	ldr	r1, [r7, #4]
 800ca4c:	4806      	ldr	r0, [pc, #24]	@ (800ca68 <CDC_Transmit_FS+0x48>)
 800ca4e:	f7fc f929 	bl	8008ca4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ca52:	4805      	ldr	r0, [pc, #20]	@ (800ca68 <CDC_Transmit_FS+0x48>)
 800ca54:	f7fc f952 	bl	8008cfc <USBD_CDC_TransmitPacket>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ca5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca5e:	4618      	mov	r0, r3
 800ca60:	3710      	adds	r7, #16
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}
 800ca66:	bf00      	nop
 800ca68:	20001344 	.word	0x20001344

0800ca6c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca6c:	b480      	push	{r7}
 800ca6e:	b083      	sub	sp, #12
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	4603      	mov	r3, r0
 800ca74:	6039      	str	r1, [r7, #0]
 800ca76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	2212      	movs	r2, #18
 800ca7c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ca7e:	4b03      	ldr	r3, [pc, #12]	@ (800ca8c <USBD_FS_DeviceDescriptor+0x20>)
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	370c      	adds	r7, #12
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bc80      	pop	{r7}
 800ca88:	4770      	bx	lr
 800ca8a:	bf00      	nop
 800ca8c:	20000154 	.word	0x20000154

0800ca90 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca90:	b480      	push	{r7}
 800ca92:	b083      	sub	sp, #12
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	4603      	mov	r3, r0
 800ca98:	6039      	str	r1, [r7, #0]
 800ca9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	2204      	movs	r2, #4
 800caa0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800caa2:	4b03      	ldr	r3, [pc, #12]	@ (800cab0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	370c      	adds	r7, #12
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bc80      	pop	{r7}
 800caac:	4770      	bx	lr
 800caae:	bf00      	nop
 800cab0:	20000168 	.word	0x20000168

0800cab4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b082      	sub	sp, #8
 800cab8:	af00      	add	r7, sp, #0
 800caba:	4603      	mov	r3, r0
 800cabc:	6039      	str	r1, [r7, #0]
 800cabe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cac0:	79fb      	ldrb	r3, [r7, #7]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d105      	bne.n	800cad2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cac6:	683a      	ldr	r2, [r7, #0]
 800cac8:	4907      	ldr	r1, [pc, #28]	@ (800cae8 <USBD_FS_ProductStrDescriptor+0x34>)
 800caca:	4808      	ldr	r0, [pc, #32]	@ (800caec <USBD_FS_ProductStrDescriptor+0x38>)
 800cacc:	f7fd f929 	bl	8009d22 <USBD_GetString>
 800cad0:	e004      	b.n	800cadc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cad2:	683a      	ldr	r2, [r7, #0]
 800cad4:	4904      	ldr	r1, [pc, #16]	@ (800cae8 <USBD_FS_ProductStrDescriptor+0x34>)
 800cad6:	4805      	ldr	r0, [pc, #20]	@ (800caec <USBD_FS_ProductStrDescriptor+0x38>)
 800cad8:	f7fd f923 	bl	8009d22 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cadc:	4b02      	ldr	r3, [pc, #8]	@ (800cae8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3708      	adds	r7, #8
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}
 800cae6:	bf00      	nop
 800cae8:	20001e08 	.word	0x20001e08
 800caec:	0800d2a0 	.word	0x0800d2a0

0800caf0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b082      	sub	sp, #8
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	4603      	mov	r3, r0
 800caf8:	6039      	str	r1, [r7, #0]
 800cafa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cafc:	683a      	ldr	r2, [r7, #0]
 800cafe:	4904      	ldr	r1, [pc, #16]	@ (800cb10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cb00:	4804      	ldr	r0, [pc, #16]	@ (800cb14 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cb02:	f7fd f90e 	bl	8009d22 <USBD_GetString>
  return USBD_StrDesc;
 800cb06:	4b02      	ldr	r3, [pc, #8]	@ (800cb10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cb08:	4618      	mov	r0, r3
 800cb0a:	3708      	adds	r7, #8
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}
 800cb10:	20001e08 	.word	0x20001e08
 800cb14:	0800d2b8 	.word	0x0800d2b8

0800cb18 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b082      	sub	sp, #8
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	4603      	mov	r3, r0
 800cb20:	6039      	str	r1, [r7, #0]
 800cb22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	221a      	movs	r2, #26
 800cb28:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cb2a:	f000 f843 	bl	800cbb4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cb2e:	4b02      	ldr	r3, [pc, #8]	@ (800cb38 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3708      	adds	r7, #8
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}
 800cb38:	2000016c 	.word	0x2000016c

0800cb3c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b082      	sub	sp, #8
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	4603      	mov	r3, r0
 800cb44:	6039      	str	r1, [r7, #0]
 800cb46:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cb48:	79fb      	ldrb	r3, [r7, #7]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d105      	bne.n	800cb5a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cb4e:	683a      	ldr	r2, [r7, #0]
 800cb50:	4907      	ldr	r1, [pc, #28]	@ (800cb70 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cb52:	4808      	ldr	r0, [pc, #32]	@ (800cb74 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cb54:	f7fd f8e5 	bl	8009d22 <USBD_GetString>
 800cb58:	e004      	b.n	800cb64 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cb5a:	683a      	ldr	r2, [r7, #0]
 800cb5c:	4904      	ldr	r1, [pc, #16]	@ (800cb70 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cb5e:	4805      	ldr	r0, [pc, #20]	@ (800cb74 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cb60:	f7fd f8df 	bl	8009d22 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cb64:	4b02      	ldr	r3, [pc, #8]	@ (800cb70 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cb66:	4618      	mov	r0, r3
 800cb68:	3708      	adds	r7, #8
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}
 800cb6e:	bf00      	nop
 800cb70:	20001e08 	.word	0x20001e08
 800cb74:	0800d2cc 	.word	0x0800d2cc

0800cb78 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b082      	sub	sp, #8
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	4603      	mov	r3, r0
 800cb80:	6039      	str	r1, [r7, #0]
 800cb82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cb84:	79fb      	ldrb	r3, [r7, #7]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d105      	bne.n	800cb96 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cb8a:	683a      	ldr	r2, [r7, #0]
 800cb8c:	4907      	ldr	r1, [pc, #28]	@ (800cbac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cb8e:	4808      	ldr	r0, [pc, #32]	@ (800cbb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cb90:	f7fd f8c7 	bl	8009d22 <USBD_GetString>
 800cb94:	e004      	b.n	800cba0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cb96:	683a      	ldr	r2, [r7, #0]
 800cb98:	4904      	ldr	r1, [pc, #16]	@ (800cbac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cb9a:	4805      	ldr	r0, [pc, #20]	@ (800cbb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cb9c:	f7fd f8c1 	bl	8009d22 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cba0:	4b02      	ldr	r3, [pc, #8]	@ (800cbac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3708      	adds	r7, #8
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}
 800cbaa:	bf00      	nop
 800cbac:	20001e08 	.word	0x20001e08
 800cbb0:	0800d2d8 	.word	0x0800d2d8

0800cbb4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b084      	sub	sp, #16
 800cbb8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cbba:	4b0f      	ldr	r3, [pc, #60]	@ (800cbf8 <Get_SerialNum+0x44>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cbc0:	4b0e      	ldr	r3, [pc, #56]	@ (800cbfc <Get_SerialNum+0x48>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cbc6:	4b0e      	ldr	r3, [pc, #56]	@ (800cc00 <Get_SerialNum+0x4c>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cbcc:	68fa      	ldr	r2, [r7, #12]
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	4413      	add	r3, r2
 800cbd2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d009      	beq.n	800cbee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cbda:	2208      	movs	r2, #8
 800cbdc:	4909      	ldr	r1, [pc, #36]	@ (800cc04 <Get_SerialNum+0x50>)
 800cbde:	68f8      	ldr	r0, [r7, #12]
 800cbe0:	f000 f814 	bl	800cc0c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cbe4:	2204      	movs	r2, #4
 800cbe6:	4908      	ldr	r1, [pc, #32]	@ (800cc08 <Get_SerialNum+0x54>)
 800cbe8:	68b8      	ldr	r0, [r7, #8]
 800cbea:	f000 f80f 	bl	800cc0c <IntToUnicode>
  }
}
 800cbee:	bf00      	nop
 800cbf0:	3710      	adds	r7, #16
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}
 800cbf6:	bf00      	nop
 800cbf8:	1ffff7e8 	.word	0x1ffff7e8
 800cbfc:	1ffff7ec 	.word	0x1ffff7ec
 800cc00:	1ffff7f0 	.word	0x1ffff7f0
 800cc04:	2000016e 	.word	0x2000016e
 800cc08:	2000017e 	.word	0x2000017e

0800cc0c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b087      	sub	sp, #28
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	60f8      	str	r0, [r7, #12]
 800cc14:	60b9      	str	r1, [r7, #8]
 800cc16:	4613      	mov	r3, r2
 800cc18:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cc1e:	2300      	movs	r3, #0
 800cc20:	75fb      	strb	r3, [r7, #23]
 800cc22:	e027      	b.n	800cc74 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	0f1b      	lsrs	r3, r3, #28
 800cc28:	2b09      	cmp	r3, #9
 800cc2a:	d80b      	bhi.n	800cc44 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	0f1b      	lsrs	r3, r3, #28
 800cc30:	b2da      	uxtb	r2, r3
 800cc32:	7dfb      	ldrb	r3, [r7, #23]
 800cc34:	005b      	lsls	r3, r3, #1
 800cc36:	4619      	mov	r1, r3
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	440b      	add	r3, r1
 800cc3c:	3230      	adds	r2, #48	@ 0x30
 800cc3e:	b2d2      	uxtb	r2, r2
 800cc40:	701a      	strb	r2, [r3, #0]
 800cc42:	e00a      	b.n	800cc5a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	0f1b      	lsrs	r3, r3, #28
 800cc48:	b2da      	uxtb	r2, r3
 800cc4a:	7dfb      	ldrb	r3, [r7, #23]
 800cc4c:	005b      	lsls	r3, r3, #1
 800cc4e:	4619      	mov	r1, r3
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	440b      	add	r3, r1
 800cc54:	3237      	adds	r2, #55	@ 0x37
 800cc56:	b2d2      	uxtb	r2, r2
 800cc58:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	011b      	lsls	r3, r3, #4
 800cc5e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cc60:	7dfb      	ldrb	r3, [r7, #23]
 800cc62:	005b      	lsls	r3, r3, #1
 800cc64:	3301      	adds	r3, #1
 800cc66:	68ba      	ldr	r2, [r7, #8]
 800cc68:	4413      	add	r3, r2
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cc6e:	7dfb      	ldrb	r3, [r7, #23]
 800cc70:	3301      	adds	r3, #1
 800cc72:	75fb      	strb	r3, [r7, #23]
 800cc74:	7dfa      	ldrb	r2, [r7, #23]
 800cc76:	79fb      	ldrb	r3, [r7, #7]
 800cc78:	429a      	cmp	r2, r3
 800cc7a:	d3d3      	bcc.n	800cc24 <IntToUnicode+0x18>
  }
}
 800cc7c:	bf00      	nop
 800cc7e:	bf00      	nop
 800cc80:	371c      	adds	r7, #28
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bc80      	pop	{r7}
 800cc86:	4770      	bx	lr

0800cc88 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b084      	sub	sp, #16
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	4a0d      	ldr	r2, [pc, #52]	@ (800cccc <HAL_PCD_MspInit+0x44>)
 800cc96:	4293      	cmp	r3, r2
 800cc98:	d113      	bne.n	800ccc2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800cc9a:	4b0d      	ldr	r3, [pc, #52]	@ (800ccd0 <HAL_PCD_MspInit+0x48>)
 800cc9c:	69db      	ldr	r3, [r3, #28]
 800cc9e:	4a0c      	ldr	r2, [pc, #48]	@ (800ccd0 <HAL_PCD_MspInit+0x48>)
 800cca0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800cca4:	61d3      	str	r3, [r2, #28]
 800cca6:	4b0a      	ldr	r3, [pc, #40]	@ (800ccd0 <HAL_PCD_MspInit+0x48>)
 800cca8:	69db      	ldr	r3, [r3, #28]
 800ccaa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ccae:	60fb      	str	r3, [r7, #12]
 800ccb0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	2105      	movs	r1, #5
 800ccb6:	2014      	movs	r0, #20
 800ccb8:	f7f4 fcad 	bl	8001616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800ccbc:	2014      	movs	r0, #20
 800ccbe:	f7f4 fcc6 	bl	800164e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ccc2:	bf00      	nop
 800ccc4:	3710      	adds	r7, #16
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}
 800ccca:	bf00      	nop
 800cccc:	40005c00 	.word	0x40005c00
 800ccd0:	40021000 	.word	0x40021000

0800ccd4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b082      	sub	sp, #8
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800cce8:	4619      	mov	r1, r3
 800ccea:	4610      	mov	r0, r2
 800ccec:	f7fc f8eb 	bl	8008ec6 <USBD_LL_SetupStage>
}
 800ccf0:	bf00      	nop
 800ccf2:	3708      	adds	r7, #8
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}

0800ccf8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b082      	sub	sp, #8
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	460b      	mov	r3, r1
 800cd02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800cd0a:	78fa      	ldrb	r2, [r7, #3]
 800cd0c:	6879      	ldr	r1, [r7, #4]
 800cd0e:	4613      	mov	r3, r2
 800cd10:	009b      	lsls	r3, r3, #2
 800cd12:	4413      	add	r3, r2
 800cd14:	00db      	lsls	r3, r3, #3
 800cd16:	440b      	add	r3, r1
 800cd18:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800cd1c:	681a      	ldr	r2, [r3, #0]
 800cd1e:	78fb      	ldrb	r3, [r7, #3]
 800cd20:	4619      	mov	r1, r3
 800cd22:	f7fc f91d 	bl	8008f60 <USBD_LL_DataOutStage>
}
 800cd26:	bf00      	nop
 800cd28:	3708      	adds	r7, #8
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}

0800cd2e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd2e:	b580      	push	{r7, lr}
 800cd30:	b082      	sub	sp, #8
 800cd32:	af00      	add	r7, sp, #0
 800cd34:	6078      	str	r0, [r7, #4]
 800cd36:	460b      	mov	r3, r1
 800cd38:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800cd40:	78fa      	ldrb	r2, [r7, #3]
 800cd42:	6879      	ldr	r1, [r7, #4]
 800cd44:	4613      	mov	r3, r2
 800cd46:	009b      	lsls	r3, r3, #2
 800cd48:	4413      	add	r3, r2
 800cd4a:	00db      	lsls	r3, r3, #3
 800cd4c:	440b      	add	r3, r1
 800cd4e:	333c      	adds	r3, #60	@ 0x3c
 800cd50:	681a      	ldr	r2, [r3, #0]
 800cd52:	78fb      	ldrb	r3, [r7, #3]
 800cd54:	4619      	mov	r1, r3
 800cd56:	f7fc f974 	bl	8009042 <USBD_LL_DataInStage>
}
 800cd5a:	bf00      	nop
 800cd5c:	3708      	adds	r7, #8
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}

0800cd62 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd62:	b580      	push	{r7, lr}
 800cd64:	b082      	sub	sp, #8
 800cd66:	af00      	add	r7, sp, #0
 800cd68:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800cd70:	4618      	mov	r0, r3
 800cd72:	f7fc fa84 	bl	800927e <USBD_LL_SOF>
}
 800cd76:	bf00      	nop
 800cd78:	3708      	adds	r7, #8
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}

0800cd7e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd7e:	b580      	push	{r7, lr}
 800cd80:	b084      	sub	sp, #16
 800cd82:	af00      	add	r7, sp, #0
 800cd84:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cd86:	2301      	movs	r3, #1
 800cd88:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	689b      	ldr	r3, [r3, #8]
 800cd8e:	2b02      	cmp	r3, #2
 800cd90:	d001      	beq.n	800cd96 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cd92:	f7f3 fd99 	bl	80008c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800cd9c:	7bfa      	ldrb	r2, [r7, #15]
 800cd9e:	4611      	mov	r1, r2
 800cda0:	4618      	mov	r0, r3
 800cda2:	f7fc fa34 	bl	800920e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800cdac:	4618      	mov	r0, r3
 800cdae:	f7fc f9ed 	bl	800918c <USBD_LL_Reset>
}
 800cdb2:	bf00      	nop
 800cdb4:	3710      	adds	r7, #16
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}
	...

0800cdbc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b082      	sub	sp, #8
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f7fc fa2e 	bl	800922c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	699b      	ldr	r3, [r3, #24]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d005      	beq.n	800cde4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cdd8:	4b04      	ldr	r3, [pc, #16]	@ (800cdec <HAL_PCD_SuspendCallback+0x30>)
 800cdda:	691b      	ldr	r3, [r3, #16]
 800cddc:	4a03      	ldr	r2, [pc, #12]	@ (800cdec <HAL_PCD_SuspendCallback+0x30>)
 800cdde:	f043 0306 	orr.w	r3, r3, #6
 800cde2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cde4:	bf00      	nop
 800cde6:	3708      	adds	r7, #8
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}
 800cdec:	e000ed00 	.word	0xe000ed00

0800cdf0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b082      	sub	sp, #8
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f7fc fa28 	bl	8009254 <USBD_LL_Resume>
}
 800ce04:	bf00      	nop
 800ce06:	3708      	adds	r7, #8
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}

0800ce0c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b082      	sub	sp, #8
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ce14:	4a28      	ldr	r2, [pc, #160]	@ (800ceb8 <USBD_LL_Init+0xac>)
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	4a26      	ldr	r2, [pc, #152]	@ (800ceb8 <USBD_LL_Init+0xac>)
 800ce20:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ce24:	4b24      	ldr	r3, [pc, #144]	@ (800ceb8 <USBD_LL_Init+0xac>)
 800ce26:	4a25      	ldr	r2, [pc, #148]	@ (800cebc <USBD_LL_Init+0xb0>)
 800ce28:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ce2a:	4b23      	ldr	r3, [pc, #140]	@ (800ceb8 <USBD_LL_Init+0xac>)
 800ce2c:	2208      	movs	r2, #8
 800ce2e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ce30:	4b21      	ldr	r3, [pc, #132]	@ (800ceb8 <USBD_LL_Init+0xac>)
 800ce32:	2202      	movs	r2, #2
 800ce34:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ce36:	4b20      	ldr	r3, [pc, #128]	@ (800ceb8 <USBD_LL_Init+0xac>)
 800ce38:	2200      	movs	r2, #0
 800ce3a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ce3c:	4b1e      	ldr	r3, [pc, #120]	@ (800ceb8 <USBD_LL_Init+0xac>)
 800ce3e:	2200      	movs	r2, #0
 800ce40:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ce42:	4b1d      	ldr	r3, [pc, #116]	@ (800ceb8 <USBD_LL_Init+0xac>)
 800ce44:	2200      	movs	r2, #0
 800ce46:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ce48:	481b      	ldr	r0, [pc, #108]	@ (800ceb8 <USBD_LL_Init+0xac>)
 800ce4a:	f7f5 ff3e 	bl	8002cca <HAL_PCD_Init>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d001      	beq.n	800ce58 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800ce54:	f7f3 fd38 	bl	80008c8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ce5e:	2318      	movs	r3, #24
 800ce60:	2200      	movs	r2, #0
 800ce62:	2100      	movs	r1, #0
 800ce64:	f7f7 fc5c 	bl	8004720 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ce6e:	2358      	movs	r3, #88	@ 0x58
 800ce70:	2200      	movs	r2, #0
 800ce72:	2180      	movs	r1, #128	@ 0x80
 800ce74:	f7f7 fc54 	bl	8004720 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ce7e:	23c0      	movs	r3, #192	@ 0xc0
 800ce80:	2200      	movs	r2, #0
 800ce82:	2181      	movs	r1, #129	@ 0x81
 800ce84:	f7f7 fc4c 	bl	8004720 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ce8e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800ce92:	2200      	movs	r2, #0
 800ce94:	2101      	movs	r1, #1
 800ce96:	f7f7 fc43 	bl	8004720 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cea0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cea4:	2200      	movs	r2, #0
 800cea6:	2182      	movs	r1, #130	@ 0x82
 800cea8:	f7f7 fc3a 	bl	8004720 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ceac:	2300      	movs	r3, #0
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	3708      	adds	r7, #8
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}
 800ceb6:	bf00      	nop
 800ceb8:	20002008 	.word	0x20002008
 800cebc:	40005c00 	.word	0x40005c00

0800cec0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b084      	sub	sp, #16
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cec8:	2300      	movs	r3, #0
 800ceca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cecc:	2300      	movs	r3, #0
 800cece:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ced6:	4618      	mov	r0, r3
 800ced8:	f7f5 fff6 	bl	8002ec8 <HAL_PCD_Start>
 800cedc:	4603      	mov	r3, r0
 800cede:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cee0:	7bfb      	ldrb	r3, [r7, #15]
 800cee2:	4618      	mov	r0, r3
 800cee4:	f000 f94e 	bl	800d184 <USBD_Get_USB_Status>
 800cee8:	4603      	mov	r3, r0
 800ceea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ceec:	7bbb      	ldrb	r3, [r7, #14]
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3710      	adds	r7, #16
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}

0800cef6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cef6:	b580      	push	{r7, lr}
 800cef8:	b084      	sub	sp, #16
 800cefa:	af00      	add	r7, sp, #0
 800cefc:	6078      	str	r0, [r7, #4]
 800cefe:	4608      	mov	r0, r1
 800cf00:	4611      	mov	r1, r2
 800cf02:	461a      	mov	r2, r3
 800cf04:	4603      	mov	r3, r0
 800cf06:	70fb      	strb	r3, [r7, #3]
 800cf08:	460b      	mov	r3, r1
 800cf0a:	70bb      	strb	r3, [r7, #2]
 800cf0c:	4613      	mov	r3, r2
 800cf0e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf10:	2300      	movs	r3, #0
 800cf12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf14:	2300      	movs	r3, #0
 800cf16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cf1e:	78bb      	ldrb	r3, [r7, #2]
 800cf20:	883a      	ldrh	r2, [r7, #0]
 800cf22:	78f9      	ldrb	r1, [r7, #3]
 800cf24:	f7f6 f94b 	bl	80031be <HAL_PCD_EP_Open>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf2c:	7bfb      	ldrb	r3, [r7, #15]
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f000 f928 	bl	800d184 <USBD_Get_USB_Status>
 800cf34:	4603      	mov	r3, r0
 800cf36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf38:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	3710      	adds	r7, #16
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	bd80      	pop	{r7, pc}

0800cf42 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf42:	b580      	push	{r7, lr}
 800cf44:	b084      	sub	sp, #16
 800cf46:	af00      	add	r7, sp, #0
 800cf48:	6078      	str	r0, [r7, #4]
 800cf4a:	460b      	mov	r3, r1
 800cf4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf52:	2300      	movs	r3, #0
 800cf54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cf5c:	78fa      	ldrb	r2, [r7, #3]
 800cf5e:	4611      	mov	r1, r2
 800cf60:	4618      	mov	r0, r3
 800cf62:	f7f6 f989 	bl	8003278 <HAL_PCD_EP_Close>
 800cf66:	4603      	mov	r3, r0
 800cf68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf6a:	7bfb      	ldrb	r3, [r7, #15]
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f000 f909 	bl	800d184 <USBD_Get_USB_Status>
 800cf72:	4603      	mov	r3, r0
 800cf74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf76:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3710      	adds	r7, #16
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}

0800cf80 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b084      	sub	sp, #16
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
 800cf88:	460b      	mov	r3, r1
 800cf8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf90:	2300      	movs	r3, #0
 800cf92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cf9a:	78fa      	ldrb	r2, [r7, #3]
 800cf9c:	4611      	mov	r1, r2
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f7f6 fa31 	bl	8003406 <HAL_PCD_EP_SetStall>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfa8:	7bfb      	ldrb	r3, [r7, #15]
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f000 f8ea 	bl	800d184 <USBD_Get_USB_Status>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cfb4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	3710      	adds	r7, #16
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}

0800cfbe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cfbe:	b580      	push	{r7, lr}
 800cfc0:	b084      	sub	sp, #16
 800cfc2:	af00      	add	r7, sp, #0
 800cfc4:	6078      	str	r0, [r7, #4]
 800cfc6:	460b      	mov	r3, r1
 800cfc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cfd8:	78fa      	ldrb	r2, [r7, #3]
 800cfda:	4611      	mov	r1, r2
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f7f6 fa72 	bl	80034c6 <HAL_PCD_EP_ClrStall>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfe6:	7bfb      	ldrb	r3, [r7, #15]
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f000 f8cb 	bl	800d184 <USBD_Get_USB_Status>
 800cfee:	4603      	mov	r3, r0
 800cff0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cff2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cff4:	4618      	mov	r0, r3
 800cff6:	3710      	adds	r7, #16
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd80      	pop	{r7, pc}

0800cffc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cffc:	b480      	push	{r7}
 800cffe:	b085      	sub	sp, #20
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	460b      	mov	r3, r1
 800d006:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d00e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d010:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d014:	2b00      	cmp	r3, #0
 800d016:	da0c      	bge.n	800d032 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d018:	78fb      	ldrb	r3, [r7, #3]
 800d01a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d01e:	68f9      	ldr	r1, [r7, #12]
 800d020:	1c5a      	adds	r2, r3, #1
 800d022:	4613      	mov	r3, r2
 800d024:	009b      	lsls	r3, r3, #2
 800d026:	4413      	add	r3, r2
 800d028:	00db      	lsls	r3, r3, #3
 800d02a:	440b      	add	r3, r1
 800d02c:	3302      	adds	r3, #2
 800d02e:	781b      	ldrb	r3, [r3, #0]
 800d030:	e00b      	b.n	800d04a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d032:	78fb      	ldrb	r3, [r7, #3]
 800d034:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d038:	68f9      	ldr	r1, [r7, #12]
 800d03a:	4613      	mov	r3, r2
 800d03c:	009b      	lsls	r3, r3, #2
 800d03e:	4413      	add	r3, r2
 800d040:	00db      	lsls	r3, r3, #3
 800d042:	440b      	add	r3, r1
 800d044:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800d048:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	3714      	adds	r7, #20
 800d04e:	46bd      	mov	sp, r7
 800d050:	bc80      	pop	{r7}
 800d052:	4770      	bx	lr

0800d054 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b084      	sub	sp, #16
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
 800d05c:	460b      	mov	r3, r1
 800d05e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d060:	2300      	movs	r3, #0
 800d062:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d064:	2300      	movs	r3, #0
 800d066:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d06e:	78fa      	ldrb	r2, [r7, #3]
 800d070:	4611      	mov	r1, r2
 800d072:	4618      	mov	r0, r3
 800d074:	f7f6 f87e 	bl	8003174 <HAL_PCD_SetAddress>
 800d078:	4603      	mov	r3, r0
 800d07a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d07c:	7bfb      	ldrb	r3, [r7, #15]
 800d07e:	4618      	mov	r0, r3
 800d080:	f000 f880 	bl	800d184 <USBD_Get_USB_Status>
 800d084:	4603      	mov	r3, r0
 800d086:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d088:	7bbb      	ldrb	r3, [r7, #14]
}
 800d08a:	4618      	mov	r0, r3
 800d08c:	3710      	adds	r7, #16
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}

0800d092 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d092:	b580      	push	{r7, lr}
 800d094:	b086      	sub	sp, #24
 800d096:	af00      	add	r7, sp, #0
 800d098:	60f8      	str	r0, [r7, #12]
 800d09a:	607a      	str	r2, [r7, #4]
 800d09c:	461a      	mov	r2, r3
 800d09e:	460b      	mov	r3, r1
 800d0a0:	72fb      	strb	r3, [r7, #11]
 800d0a2:	4613      	mov	r3, r2
 800d0a4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d0b4:	893b      	ldrh	r3, [r7, #8]
 800d0b6:	7af9      	ldrb	r1, [r7, #11]
 800d0b8:	687a      	ldr	r2, [r7, #4]
 800d0ba:	f7f6 f96d 	bl	8003398 <HAL_PCD_EP_Transmit>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0c2:	7dfb      	ldrb	r3, [r7, #23]
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f000 f85d 	bl	800d184 <USBD_Get_USB_Status>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d0ce:	7dbb      	ldrb	r3, [r7, #22]
}
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	3718      	adds	r7, #24
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}

0800d0d8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b086      	sub	sp, #24
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	60f8      	str	r0, [r7, #12]
 800d0e0:	607a      	str	r2, [r7, #4]
 800d0e2:	461a      	mov	r2, r3
 800d0e4:	460b      	mov	r3, r1
 800d0e6:	72fb      	strb	r3, [r7, #11]
 800d0e8:	4613      	mov	r3, r2
 800d0ea:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d0fa:	893b      	ldrh	r3, [r7, #8]
 800d0fc:	7af9      	ldrb	r1, [r7, #11]
 800d0fe:	687a      	ldr	r2, [r7, #4]
 800d100:	f7f6 f902 	bl	8003308 <HAL_PCD_EP_Receive>
 800d104:	4603      	mov	r3, r0
 800d106:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d108:	7dfb      	ldrb	r3, [r7, #23]
 800d10a:	4618      	mov	r0, r3
 800d10c:	f000 f83a 	bl	800d184 <USBD_Get_USB_Status>
 800d110:	4603      	mov	r3, r0
 800d112:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d114:	7dbb      	ldrb	r3, [r7, #22]
}
 800d116:	4618      	mov	r0, r3
 800d118:	3718      	adds	r7, #24
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}

0800d11e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d11e:	b580      	push	{r7, lr}
 800d120:	b082      	sub	sp, #8
 800d122:	af00      	add	r7, sp, #0
 800d124:	6078      	str	r0, [r7, #4]
 800d126:	460b      	mov	r3, r1
 800d128:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d130:	78fa      	ldrb	r2, [r7, #3]
 800d132:	4611      	mov	r1, r2
 800d134:	4618      	mov	r0, r3
 800d136:	f7f6 f918 	bl	800336a <HAL_PCD_EP_GetRxCount>
 800d13a:	4603      	mov	r3, r0
}
 800d13c:	4618      	mov	r0, r3
 800d13e:	3708      	adds	r7, #8
 800d140:	46bd      	mov	sp, r7
 800d142:	bd80      	pop	{r7, pc}

0800d144 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d144:	b480      	push	{r7}
 800d146:	b083      	sub	sp, #12
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d14c:	4b02      	ldr	r3, [pc, #8]	@ (800d158 <USBD_static_malloc+0x14>)
}
 800d14e:	4618      	mov	r0, r3
 800d150:	370c      	adds	r7, #12
 800d152:	46bd      	mov	sp, r7
 800d154:	bc80      	pop	{r7}
 800d156:	4770      	bx	lr
 800d158:	200022f8 	.word	0x200022f8

0800d15c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d15c:	b480      	push	{r7}
 800d15e:	b083      	sub	sp, #12
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]

}
 800d164:	bf00      	nop
 800d166:	370c      	adds	r7, #12
 800d168:	46bd      	mov	sp, r7
 800d16a:	bc80      	pop	{r7}
 800d16c:	4770      	bx	lr

0800d16e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d16e:	b480      	push	{r7}
 800d170:	b083      	sub	sp, #12
 800d172:	af00      	add	r7, sp, #0
 800d174:	6078      	str	r0, [r7, #4]
 800d176:	460b      	mov	r3, r1
 800d178:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800d17a:	bf00      	nop
 800d17c:	370c      	adds	r7, #12
 800d17e:	46bd      	mov	sp, r7
 800d180:	bc80      	pop	{r7}
 800d182:	4770      	bx	lr

0800d184 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d184:	b480      	push	{r7}
 800d186:	b085      	sub	sp, #20
 800d188:	af00      	add	r7, sp, #0
 800d18a:	4603      	mov	r3, r0
 800d18c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d18e:	2300      	movs	r3, #0
 800d190:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d192:	79fb      	ldrb	r3, [r7, #7]
 800d194:	2b03      	cmp	r3, #3
 800d196:	d817      	bhi.n	800d1c8 <USBD_Get_USB_Status+0x44>
 800d198:	a201      	add	r2, pc, #4	@ (adr r2, 800d1a0 <USBD_Get_USB_Status+0x1c>)
 800d19a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d19e:	bf00      	nop
 800d1a0:	0800d1b1 	.word	0x0800d1b1
 800d1a4:	0800d1b7 	.word	0x0800d1b7
 800d1a8:	0800d1bd 	.word	0x0800d1bd
 800d1ac:	0800d1c3 	.word	0x0800d1c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	73fb      	strb	r3, [r7, #15]
    break;
 800d1b4:	e00b      	b.n	800d1ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d1b6:	2302      	movs	r3, #2
 800d1b8:	73fb      	strb	r3, [r7, #15]
    break;
 800d1ba:	e008      	b.n	800d1ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d1bc:	2301      	movs	r3, #1
 800d1be:	73fb      	strb	r3, [r7, #15]
    break;
 800d1c0:	e005      	b.n	800d1ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d1c2:	2302      	movs	r3, #2
 800d1c4:	73fb      	strb	r3, [r7, #15]
    break;
 800d1c6:	e002      	b.n	800d1ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d1c8:	2302      	movs	r3, #2
 800d1ca:	73fb      	strb	r3, [r7, #15]
    break;
 800d1cc:	bf00      	nop
  }
  return usb_status;
 800d1ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	3714      	adds	r7, #20
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bc80      	pop	{r7}
 800d1d8:	4770      	bx	lr
 800d1da:	bf00      	nop

0800d1dc <memset>:
 800d1dc:	4603      	mov	r3, r0
 800d1de:	4402      	add	r2, r0
 800d1e0:	4293      	cmp	r3, r2
 800d1e2:	d100      	bne.n	800d1e6 <memset+0xa>
 800d1e4:	4770      	bx	lr
 800d1e6:	f803 1b01 	strb.w	r1, [r3], #1
 800d1ea:	e7f9      	b.n	800d1e0 <memset+0x4>

0800d1ec <__libc_init_array>:
 800d1ec:	b570      	push	{r4, r5, r6, lr}
 800d1ee:	2600      	movs	r6, #0
 800d1f0:	4d0c      	ldr	r5, [pc, #48]	@ (800d224 <__libc_init_array+0x38>)
 800d1f2:	4c0d      	ldr	r4, [pc, #52]	@ (800d228 <__libc_init_array+0x3c>)
 800d1f4:	1b64      	subs	r4, r4, r5
 800d1f6:	10a4      	asrs	r4, r4, #2
 800d1f8:	42a6      	cmp	r6, r4
 800d1fa:	d109      	bne.n	800d210 <__libc_init_array+0x24>
 800d1fc:	f000 f828 	bl	800d250 <_init>
 800d200:	2600      	movs	r6, #0
 800d202:	4d0a      	ldr	r5, [pc, #40]	@ (800d22c <__libc_init_array+0x40>)
 800d204:	4c0a      	ldr	r4, [pc, #40]	@ (800d230 <__libc_init_array+0x44>)
 800d206:	1b64      	subs	r4, r4, r5
 800d208:	10a4      	asrs	r4, r4, #2
 800d20a:	42a6      	cmp	r6, r4
 800d20c:	d105      	bne.n	800d21a <__libc_init_array+0x2e>
 800d20e:	bd70      	pop	{r4, r5, r6, pc}
 800d210:	f855 3b04 	ldr.w	r3, [r5], #4
 800d214:	4798      	blx	r3
 800d216:	3601      	adds	r6, #1
 800d218:	e7ee      	b.n	800d1f8 <__libc_init_array+0xc>
 800d21a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d21e:	4798      	blx	r3
 800d220:	3601      	adds	r6, #1
 800d222:	e7f2      	b.n	800d20a <__libc_init_array+0x1e>
 800d224:	0800d328 	.word	0x0800d328
 800d228:	0800d328 	.word	0x0800d328
 800d22c:	0800d328 	.word	0x0800d328
 800d230:	0800d32c 	.word	0x0800d32c

0800d234 <memcpy>:
 800d234:	440a      	add	r2, r1
 800d236:	4291      	cmp	r1, r2
 800d238:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d23c:	d100      	bne.n	800d240 <memcpy+0xc>
 800d23e:	4770      	bx	lr
 800d240:	b510      	push	{r4, lr}
 800d242:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d246:	4291      	cmp	r1, r2
 800d248:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d24c:	d1f9      	bne.n	800d242 <memcpy+0xe>
 800d24e:	bd10      	pop	{r4, pc}

0800d250 <_init>:
 800d250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d252:	bf00      	nop
 800d254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d256:	bc08      	pop	{r3}
 800d258:	469e      	mov	lr, r3
 800d25a:	4770      	bx	lr

0800d25c <_fini>:
 800d25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d25e:	bf00      	nop
 800d260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d262:	bc08      	pop	{r3}
 800d264:	469e      	mov	lr, r3
 800d266:	4770      	bx	lr
